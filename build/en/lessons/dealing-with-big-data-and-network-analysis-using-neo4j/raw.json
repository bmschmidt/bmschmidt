{"metadata":{"title":"Dealing with Big Data and Network Analysis Using Neo4j","collection":"lessons","slug":"dealing-with-big-data-and-network-analysis-using-neo4j","authors":["Jon MacKay"],"date":"2018-02-20T00:00:00.000Z","reviewers":["Ryan Deschamps","François Dominic Laramée"],"editors":["Ian Milligan"],"difficulty":3,"review-ticket":"https://github.com/programminghistorian/ph-submissions/issues/87","topics":["network-analysis"],"activity":"analyzing","abstract":"In this lesson we will learn how to use a graph database to store and analyze complex networked information. This tutorial will focus on the Neo4j graph database, and the Cypher query language that comes with it.","layout":"lesson","redirect_from":"/lessons/dealing-with-big-data-and-network-analysis-using-neo4j","avatar_alt":"Constellation chart","doi":"10.46430/phen0074"},"html_body":"<p>{% include toc.html %}</p>\n<h1 id=\"introduction\">Introduction</h1>\n<p>In this lesson we will learn how to use a graph database to store and analyze complex networked information.\nNetworks are all around us.\nSocial scientists use networks to better understand how people are connected.\nThis information can be used to understand how things like rumors or even communicable diseases can spread throughout a community of people.</p>\n<p>The patterns of relationships that people maintain with others captured in a network can also be used to make inferences about a person&#39;s position in society.\nFor example, a person with many social ties is likely to receive information more quickly than someone who maintains very few connections with others.\nUsing common network terminology, one would say that a person with many ties is more central in a network, and a person with few ties is more peripheral in a network.\nHaving access to more information is generally believed to be advantageous.\nSimilarly, if someone is very well-connected to many other people that are themselves well-connected than we might infer that these individuals have a higher social status.</p>\n<p>Network analysis is useful to understand the implications of ties between organizations as well.\nBefore he was appointed to the Supreme Court of the United States, Louis Brandeis called attention to how anti-competitive activities were often organized through a web of appointments that had directors sitting on the boards of multiple ostensibly competing corporations.\nSince the 1970s sociologists have taken a more formal network-based approach to examining the network of so-called corporate interlocks that exist when directors sit on the boards of multiple corporations.\nOften these ties are innocent, but in some cases they can be indications of morally or legally questionable activities.\nThe recent release of the\n<a href=\"https://neo4j.com/blog/icij-releases-neo4j-desktop-download-paradise-papers/\">Paradise Papers</a> by\nthe\n<a href=\"https://icij.org\">International Consortium of Investigative Journalists</a>\nand the ensuing news scandals throughout the world\nshows how important understanding relationships between people and organizations can be.</p>\n<p>This tutorial will focus on the <a href=\"https://neo4j.com/\">Neo4j graph database</a>, and the <a href=\"https://neo4j.com/developer/cypher-query-language/\">Cypher\nquery language</a> that comes with it.</p>\n<ul>\n<li><a href=\"https://neo4j.com/\">Neo4j</a> is a free, open-source graph database\nwritten in java that is available for all major computing platforms.</li>\n<li><a href=\"https://neo4j.com/developer/cypher-query-language/\">Cypher</a> is the\nquery language for the Neo4j database that is designed to insert and\nselect information from the database.</li>\n</ul>\n<p>By the end of this lesson you will be able to construct, analyze and\nvisualize networks based on big --- or just inconveniently large --- data.\nThe final section of this lesson contains code and data to illustrate the key points of this lesson.</p>\n<p>Although beyond the scope of this tutorial, those interested in trying to better understand social networks\ncan refer to a number of sources.\nSociologists Robert A. Hanneman and Mark Riddle maintain an <a href=\"http://faculty.ucr.edu/~hanneman/nettext/\">on-line textbook on network analysis</a>.\nThere are also regular conferences hosted and useful resources available from the <a href=\"http://www.insna.org\">International Network for Social Network Analysis</a>.</p>\n<div class=\"alert alert-warning\">\nI strongly recommend that you read the lesson through before trying the example data.\nWherever possible I have included links back to more detailed documentation or tutorials.\n</div>\n\n<h1 id=\"what-is-neo4j-and-why-use-it\">What is Neo4j and why use it?</h1>\n<p>Neo4j is a specialized database that manages graphs. Traditional\ndatabase software stores information in tables -- much like data is displayed in Excel\nspreadsheets except on a much larger scale. Neo4j is also concerned with storing large\namounts of data but it is primarily designed to capture the relationship between items of\ninformation. Therefore, the organizing principle underlying Neo4j is to store information as a network of relationships rather than a table. Networks contain nodes and nodes are connected through\nties. (Nodes are also referred to as &quot;vertices&quot; and ties are referred to as &quot;edges&quot; or links. Networks are also frequently referred to as graphs.)</p>\n<p>Databases are designed for dealing with large amounts of data.\nHowever, when working with small datasets it is often more efficient not to use a database.\nThe <em>Programming Historian</em> has excellent tutorials for dealing with network data.\nFor an introduction, see <a href=\"/lessons/exploring-and-analyzing-network-data-with-python\">Exploring and Analyzing Network Data with Python</a>.</p>\n<h1 id=\"installing-and-creating-a-neo4j-database\">Installing and creating a Neo4j database</h1>\n<p>Neo4j is currently the most popular graph database on the market.\nIt is also well documented and open-source so this tutorial will focus on it.\nAccessing information within this type of database is as easy as following connections across the nodes of the graph.</p>\n<h2 id=\"installation\">Installation</h2>\n<p>The first step to install Neo4j is to download the <a href=\"https://neo4j.com/product/\">community edition of Neo4j</a>.\nThe software you want is called <strong>Neo4j Desktop</strong>.</p>\n<p>{% include figure.html filename=&quot;new_neo4j_download.png&quot; caption=&quot;Neo4j Desktop download&quot; %}</p>\n<p>Neo4j has recently changed the way the database is installed.\nOnce you download the desktop and install it you will be prompted to enter your user name and password.\nAt this point, you can choose to log in with an existing social media account or create a new login name and password.</p>\n<div class=\"alert alert-warning\">\nYou may be prompted to update the software. Our recommendation is to allow the installation to continue and update the software afterwards.\n</div>\n\n<p>Once you start the Neo4j Desktop installation process, the software will take care of installing all of the software it depends on including the latest Java Runtime Environment it depends on.\nThis step requires that you have a connection to the Internet.</p>\n<p>{% include figure.html filename=&quot;new_neo4j_desktop_install.png&quot; caption=&quot;Neo4j Desktop installation&quot; %}</p>\n<h2 id=\"creating-a-new-project\">Creating a new project</h2>\n<p>When the Neo4j Desktop starts for the first time, you will see a list of icons on the far left.\nThe topmost icon is a small file folder. This is the projects tab.\nYou can edit projects by simply clicking on a project in the project list.\nWhen you do so, the contents of the project will be displayed on the far right of the application (the part with the white background).</p>\n<p>{% include figure.html filename=&quot;neo4j-projects.png&quot; caption=&quot;Neo4j Desktop - Projects tab&quot; %}</p>\n<h2 id=\"adding-a-database-to-the-project\">Adding a database to the project</h2>\n<p>Adding a new database to a project is simply a matter of clicking &quot;New Database&quot;.\nChoose the &quot;Local&quot; option because we will store an example database to your local machine.\nYou will then have the option to change the name of your database, the Neo4j version that runs the database, and add a description.\nWe will simply stay with the defaults, but you can change these options later.</p>\n<p>{% include figure.html filename=&quot;new_neo4j_add_db.png&quot; caption=&quot;Neo4j Desktop - Adding a new database to a project.&quot; %}</p>\n<p>After the database is created you will see two buttons underneath.</p>\n<p>{% include figure.html filename=&quot;new-neo4j-db-options.png&quot; caption=&quot;Manage options of your database&quot; %}</p>\n<p>Click on &quot;Manage&quot; and you will be presented with a series of options to customize your database.\nNow that we have the Neo4j database installed, we need to add some example data so we can use it.</p>\n<h2 id=\"loading-data-into-neo4j\">Loading Data into Neo4j</h2>\n<p>The easiest way to load data into the Neo4j database is to load the information you are interested in using comma separated value (CSV) files.\nYou will need to separate your data into data for nodes and data for edges.\nThis is a common way for network information to be separated.\nIn this lesson we will use some example data that has already been formatted.</p>\n<p>Using the CSV batch loading mechanism in Neo4j is the fastest way to import data into your new database.\nIn this section I am going to talk about the process more generally for simple cases.\nThis process assumes that you have an empty database.</p>\n<p><strong>If you want to follow along, you can download the example data files\n<a href=\"/assets/dealing-with-big-data-and-network-analysis-using-neo4j/nodes_companies.csv\">nodes_companies.csv</a> and\n<a href=\"/assets/dealing-with-big-data-and-network-analysis-using-neo4j/edges_director_duration.csv\">edges_director_duration.csv</a>.\nThe canonical guide to loading data from CSV is on <a href=\"https://neo4j.com/developer/guide-import-csv/\">the Neo4j website</a>.</strong></p>\n<p>Now that we have the example CSV files downloaded, we will use the <strong>Cypher</strong> query language to load them into our empty Neo4j database.\nCypher is a specialized query language that is designed to load and manipulate data in the Neo4j database.</p>\n<h2 id=\"formatting-csv-files-for-loading-into-neo4j\">Formatting CSV files for loading into Neo4j</h2>\n<p>The columns in each CSV will have to be properly named to tell the import tools how to properly create relationships.</p>\n<p>Let&#39;s examine the basic format of the two CSV files we downloaded.</p>\n<p><strong>nodes_nodes_companies.csv</strong></p>\n<table>\n<thead>\n<tr>\n<th>companyId</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>CANADIAN BANK OF COMMERCE</td>\n</tr>\n<tr>\n<td>2</td>\n<td>SHAWINIGAN WATER AND POWER</td>\n</tr>\n<tr>\n<td>...</td>\n<td>...</td>\n</tr>\n</tbody></table>\n<p><strong>edges_director_duration.csv</strong></p>\n<table>\n<thead>\n<tr>\n<th>START_ID</th>\n<th>years_served</th>\n<th>END_ID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>281</td>\n<td>10</td>\n<td>422</td>\n</tr>\n<tr>\n<td>...</td>\n<td>...</td>\n<td>...</td>\n</tr>\n</tbody></table>\n<p>By looking at the two data files we can see that the Canadian Bank of Commerce and Shawinigan Water and Power have both employed the same director for 2 years.\n(The first row of edges_director_duration.csv shows the start node with the Canadian Bank of Commerce ID and the Shawinigan Water and Power ID as the end node.)\nThis director effectively acts as a tie (also known as a corporate interlock) between the two companies.</p>\n<p>Note that we could just as easily make the directors the nodes and the companies the edges that connect them.\nThis would give us a clearer picture of the professional network that unites individual directors.</p>\n<p>Another alternative would be to represent both Companies and Directors as node types.\nDirectors would still act to tie the boards of companies together but there would be a different relationship between the nodes.</p>\n<div class=\"alert alert-warning\">\nDepending on your data and your research questions you will need to decide what is the most sensible way to represent data for your application.\nTake your time on this phase of your project -- this is a crucial decision that will affect every other aspect of your project going forward.\n</div>\n\n<p>We&#39;ll talk more about defining relationships and nodes below.</p>\n<h1 id=\"using-cypher\">Using Cypher</h1>\n<p>In order to create a network in Neo4j we will load the nodes into the database followed by the information about the edges that connect these nodes together.\nThe process of loading data from a CSV file into Neo4j is relatively straightforward.\nWe are going to:</p>\n<ul>\n<li>Place our CSV files so they can be accessed by Neo4j</li>\n<li>Start the database.</li>\n<li>Open the browser and connect to the database so we can run a <strong>Cypher</strong> command.</li>\n<li>Using Cypher, we will load our specially formatted CSV files into the database.</li>\n</ul>\n<p>This process assumes that your data is cleanly separated into node and edge CSV files.</p>\n<h2 id=\"moving-the-csv-files-to-the-import-directory\">Moving the CSV files to the import directory</h2>\n<p>Click on the &quot;Manage&quot; button in the database pane, then the drop down menu next to &quot;Open Folders&quot; and select &quot;Import.&quot; A window will appear with a directory.</p>\n<p>{% include figure.html filename=&quot;new-neo4j-files.png&quot; caption=&quot;Pressing the Open Folders button&quot; %}</p>\n<p>You now need to copy the\n<code>nodes_nodes_companies.csv</code> and the <code>edges_director_duration.csv</code> files there.\nNow we can use a Cypher command to load the files.</p>\n<p>{% include figure.html filename=&quot;importing.png&quot; caption=&quot;Moving the files to this directory&quot; %}</p>\n<h2 id=\"start-the-database\">Start the database</h2>\n<p>In order to start the database, press the triangular play icon.</p>\n<p>{% include figure.html filename=&quot;new-neo4j-start-db.png&quot; caption=&quot;Pressing the start database button&quot; %}</p>\n<p>In the &quot;Details&quot; tab beneath, you will see information about the database starting.\nYou&#39;ll notice that the database server is running on &quot;HTTP port 7474&quot;.\nNeo4j allows access to the database through a web server. In the next step, we will open\na browser to connect to the database.</p>\n<h2 id=\"opening-the-browser\">Opening the browser</h2>\n<p>Click on the &quot;Open Browser&quot; button. A new browser window will appear.</p>\n<p>First, you will need to login to your new database. By default,\n the username and password are both <code>neo4j</code>. After you log in the\n  first time, you will be prompted to create a new password.</p>\n<p>At the top of the window is a prompt with a blinking cursor.\nWe can add our Cypher command to load our data here</p>\n<p>{% include figure.html filename=&quot;new-neo4j-browser.png&quot; caption=&quot;Browser window&quot; %}</p>\n<h3 id=\"using-cypher-to-load-the-csv-files-into-the-database\">Using Cypher to load the CSV files into the database</h3>\n<p>Again, press the trianglar run icon &quot;&gt;&quot; in order to execute the command. An example can be seen in the screenshot below:</p>\n<p>{% include figure.html filename=&quot;new-neo4j-load1.png&quot; caption=&quot;Cypher command window: loading nodes into the database&quot; %}</p>\n<pre><code class=\"language-sql\">LOAD CSV with headers FROM &quot;file:///nodes_companies.csv&quot; as nodes\nCREATE (n:COMPANY { id:toInteger(nodes.companyId), name:nodes.name })\n</code></pre>\n<p>The Cypher command LOADs the CSV file that contains informative headers (i.e. the first line)\nfrom the file we placed in the import directory. (By default, Neo4j can only load files from this directory.)\nThe results will be stored as an object called <strong>nodes</strong>.</p>\n<p>The second line CREATEs data in our database. In particular, we create a series of node objects of the type COMPANY\nthat contain a <code>name</code> and an <code>id</code>. We set the name of this new company node to the name stored in the <code>nodes.name</code> object and the id to the same as stored in the <code>nodes.companyID</code>.\nNotice that the fields that are stored in the nodes object corresponds to the headers we set in the CSV files.\nWe also use the <code>toInteger()</code> function to make sure our numbers are represented as integers and not as text.</p>\n<p>Next we need to load the edge data.</p>\n<p>This command does something similar. However, a new command called MATCH has been introduced.\nThe first line loads the CSV file from the import directory and assigns it to a variable called <strong>edges</strong>.\nThe next two lines use MATCH. The first line goes to the existing database and finds a COMPANY node with\nan id the same as START_ID. The next line does the same thing, except looks for a match with the END_ID column\nin the CSV file. These results are assigned to the variables <code>a</code> and <code>b</code>, respectively.</p>\n<p>The final line CREATES a relationship between these nodes. In this case, the relationship type is called INTERLOCK.\nThere is a field called years within the INTERLOCK that is set to the years_served value from the CSV.</p>\n<pre><code class=\"language-sql\">LOAD CSV WITH HEADERS FROM &quot;file:///edges_director_duration.csv&quot; AS edges\nMATCH (a:COMPANY { id: toInteger(edges.START_ID) })\nMATCH (b:COMPANY { id: toInteger(edges.END_ID)   })\nCREATE (a)-[r:INTERLOCK{weight:toInteger(edges.years_served)}]-&gt;(b);\n</code></pre>\n<p><strong>Note: If you have difficulties during the loading process, you can delete all of the nodes and\nedges in your database using the following command.</strong></p>\n<pre><code>MATCH (n)\nDETACH DELETE n\n</code></pre>\n<h3 id=\"using-the-cypher-query-language\">Using the Cypher query language</h3>\n<p>Cypher is a powerful language to query graph databases.\nCypher is a language dedicated to loading, selecting or altering data that is stored in the Neo4j database.\nThe following sections will show examples of these actions.</p>\n<p>The key to effectively querying Neo4j is to understand that information in the database is represented as a graph and not a table.\nTherefore, you need to consider the information you&#39;re working with in terms of <strong>nodes</strong> and <strong>relationships</strong> that connect nodes together.</p>\n<p>A typical Cypher statement shows the relationship between two nodes.</p>\n<p>For example, we can create a new COMPANY node:</p>\n<pre><code>CREATE (acompany:COMPANY { id:900, name:&quot;Economical Mutual Fire Insurance Company of Berlin&quot;})\n</code></pre>\n<p>In this example, <code>acompany</code> is the variable name we have given to the node object we created in the database.\nWe marked the node object as being a <code>COMPANY</code> type.\nA COMPANY has an attribute called <code>id</code> which is a unique number assigned to that particular company.\nIn the examples above, each entry also has a <code>name</code> field.\nWe can use this unique id to query the database for information about the ties from each firm</p>\n<p>Now suppose that the database already contains data and we aren&#39;t sure if there is information about a given company.\nIn this case, we can use the MATCH statement to match a unique node and manipulate it.</p>\n<p>In the following example, we MATCH both the companynodes (represented by the variables c and p).\nThe CREATE statement then uses the match for each company and CREATEs a relationship between the two nodes.\nIn this case, the relationship is of the type INTERLOCK.</p>\n<pre><code>MATCH  (c1:COMPANY {companyId:281})\nMATCH  (c2:COMPANY {companyId:879})\nCREATE (c1)-[r:INTERLOCK{weight:10}]-&gt;(c2)\nRETURN c1,c2,r;\n</code></pre>\n<p>Note that the relationship (r) here is between the two companies.\nThe relationship between COMPANIES is defined as an INTERLOCK.\nBut it is important to note that we can define multiple different kinds of nodes and relationships.</p>\n<div class=\"alert alert-warning\">\nData can be represented many different ways.\nIt is worth carefully considering what insights you want to get out of your data before you commit to a structure in the database.\n</div>\n\n<p>Finally, the RETURN statement returns the variables for us to further manipulate.\nFor example, we might decide to add another attribute to the company.\nHere we add a URL attribute to the company object that contains the company&#39;s current web site.</p>\n<pre><code>SET c.url = &quot;https://economical.com&quot;;\n</code></pre>\n<h3 id=\"reviewing-the-data\">Reviewing the data</h3>\n<p>The data supplied in the <code>nodes_companies.csv</code> and <code>edges_director_duration.csv</code> files\nprovides us with the basic corporate interlock network that existed in Canada in 1912.</p>\n<p>If we use the web interface that comes with Neo4j we&#39;ll be able to see what parts of this network looks like by using a simple query.</p>\n<p>With the Neo4j database running, we can open up the built in browser to make more Cypher queries.\n(Or we can put the following URL into  a browser <a href=\"http://localhost:7474/browser/\">http://localhost:7474/browser/</a>.</p>\n<p>Add the following Cypher query.</p>\n<pre><code class=\"language-sql\">MATCH (n:COMPANY) RETURN n LIMIT 40;\n</code></pre>\n<p>This query will request that Neo4j find all nodes that are of the type company and return them.\nThe LIMIT option limits the results to the first 40 nodes.</p>\n<p>You should see a network that looks something like this.</p>\n<p>{% include figure.html filename=&quot;new-neo4j-simple-match.png&quot; caption=&quot;Neo4j results after a simple query&quot; %}</p>\n<h3 id=\"a-brief-note-on-index\">A brief note on INDEX</h3>\n<p>Creating an index is important for any database to run efficiently.\nAn index is a particular field in a database that is designated for the database to optimize so that lookups are as fast as possible.</p>\n<p>To create an index in Neo4j, we would issue the following Cypher command.\nCreating an index only needs to be done once.</p>\n<pre><code>CREATE INDEX ON :COMPANY(id)\n</code></pre>\n<p>Create another index using the company name as well.</p>\n<pre><code>CREATE INDEX ON :COMPANY(name)\n</code></pre>\n<p>Creating this index will greatly speed up any queries we make based on the unique keys <code>id</code> and <code>name</code>.</p>\n<div class=\"alert alert-warning\">\nDon't create more indexes than you need.\nCreating too many indexes will have the effect of slowing down your database.\nAgain, designing your database so that you have a unique key to do lookups is crucial.\n</div>\n\n<h3 id=\"querying-neo4j-create-match-set\">Querying Neo4j: CREATE, MATCH, SET</h3>\n<p>So far we have used the basic syntax of the Cypher query language.\nWe&#39;ve seen that relationships on a graph are written quite intuitively using Cypher.</p>\n<pre><code>(n1:NODE)-[:relationship]-&gt;(n2:NODE)\n</code></pre>\n<p>In this section we used Cypher to CREATE entries in the database, MATCH existing data, and we used SET to alter existing data we found.</p>\n<p>More on the <a href=\"https://neo4j.com/developer/cypher-query-language/\">Cypher query language</a> can be found on the Neo4j\nweb site.</p>\n<h1 id=\"putting-it-all-together-a-working-example\">Putting it all together: A working example</h1>\n<p>If we return to the <a href=\"http://localhost:7474\">web interface on your local machine</a> we can query our new database.\nLet&#39;s look at the firms that have the greatest number of connections (i.e. the highest degree).\nTo calculate degree we can make a simple query with Cypher.</p>\n<pre><code>MATCH (c:COMPANY)\nset c.degree = size((c)--&gt;());\n</code></pre>\n<p>This code simply matches to each node and counts the size (or degree) of each node.\nWe use the SET command to set the degree value as an attribute of each node.</p>\n<p>Now we can examine those nodes with the highest degree.\nHere we list companies where there are 75 or more connections (via high level employees or directors to other companies).</p>\n<pre><code>match (c0:COMPANY)-[r]-(c1) where c0.degree &gt; 75\nreturn DISTINCT c0.name;\n</code></pre>\n<p>This results in the following companies:</p>\n<ul>\n<li>TORONTO AND YORK RADIAL RAILWAY</li>\n<li>MONTREAL ELECTRIC HEAT AND POWER</li>\n<li>CANADIAN PACIFIC RAILWAY</li>\n<li>TORONTO RAILWAY</li>\n<li>DOMINION COAL</li>\n<li>CANADIAN GENERAL ELECTRIC</li>\n</ul>\n<p>We can also try to examine all of the interlocks between these well-connected companies.</p>\n<pre><code>match (c0:COMPANY)-[r]-(c1) where c0.degree &gt; 75 and c1.degree &gt; 75\nreturn c0, r, c1;\n</code></pre>\n<p>{% include figure.html filename=&quot;graph_example.png&quot; caption=&quot;Example graph&quot; %}</p>\n<p>You can download the data used in this lesson <a href=\"http://jgmackay.com/\">here</a> (search for the relevant blog posts).\nIf you make use of this data, please cite the following in addition to this lesson:</p>\n<p>Mackay, Jon. 2017. &quot;Canadian Regional and National Business Elites in 1912: Who Was Connected, Who Wasn&#39;t and\nWhy&quot; In A History of Socially Responsible Business, c.1600--1950, 189-212. Palgrave Studies in the History\nof Finance. Palgrave Macmillan.\n<a href=\"https://doi.org/10.1007/978-3-319-60146-5_8\">https://doi.org/10.1007/978-3-319-60146-5_8</a>.</p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>In this lesson we&#39;ve introduced the Neo4j graph database.\nWe&#39;ve shown how we can talk directly to the database using the Cypher query language.\nWe&#39;ve also shown how easy it is to visualize different parts of graphs stored in Neo4j using\nNeo4j&#39;s built in visualization system.\nFinally, we&#39;ve also included some data and example code that reinforces the key topics of this lesson.\nWherever possible this lesson has also linked to primary documents and software to make getting started as easy as possible.</p>\n"}