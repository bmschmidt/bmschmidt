{"metadata":{"title":"Code Reuse and Modularity in Python","layout":"lesson","date":"2012-07-17T00:00:00.000Z","authors":["William J. Turkel","Adam Crymble"],"reviewers":["Jim Clifford"],"editors":["Miriam Posner"],"difficulty":2,"exclude_from_check":["review-ticket"],"activity":"transforming","topics":["python"],"abstract":"Computer programs can become long, unwieldy and confusing without special mechanisms for managing complexity. This lesson will show you how to reuse parts of your code by writing functions and break your programs into modules, in order to keep everything concise and easier to debug.","next":"working-with-web-pages","previous":"working-with-text-files","series_total":"15 lessons","sequence":4,"categories":["lessons","original-ph","python"],"python_warning":false,"redirect_from":"/lessons/code-reuse-and-modularity","avatar_alt":"Three caricature heads","doi":"10.46430/phen0002"},"html_body":"<p>{% include toc.html %}</p>\n<h2 id=\"lesson-goals\">Lesson Goals</h2>\n<p>Computer programs can become long, unwieldy and confusing without\nspecial mechanisms for managing complexity. This lesson will show you\nhow to reuse parts of your code by writing <em>Functions</em> and break your\nprograms into <em>Modules</em>, in order to keep everything concise and easier to\ndebug. Being able to remove a single dysfunctional module can save time\nand effort.</p>\n<h3 id=\"functions\">Functions</h3>\n<p>You will often find that you want to re-use a particular set of\nstatements, usually because you have a task that you need to do over and\nover. Programs are mostly composed of routines that are powerful and\ngeneral-purpose enough to be reused. These are known as functions, and\nPython has mechanisms that allow you to define new functions. Let’s work\nthrough a very simple example of a function. Suppose you want to create\na general purpose function for greeting people. Copy the following\nfunction definition into Komodo Edit and save it as <code>greet.py</code>.</p>\n<pre><code class=\"language-python\"># greet.py\n\ndef greetEntity (x):\n    print(&quot;hello &quot; + x)\n\ngreetEntity(&quot;Everybody&quot;)\ngreetEntity(&quot;Programming Historian&quot;)\n</code></pre>\n<p>The line beginning with <code>def</code> is the function declaration. We are going\nto define (&quot;def&quot;) a function, which in this case we have named\n&quot;greetEntity&quot;. The <code>(x)</code> is the function&#39;s parameter. You should\nunderstand how that works in a moment. The second line contains the code\nof the function. This could be as many lines as we need, but in this\ncase it is only a single line.</p>\n<p>Note that <em>indentation</em> is very important in Python. The blank space\nbefore the <code>print</code> statement tells the interpreter that it is part of the\nfunction that is being defined. You will learn more about this as we go\nalong; for now, make sure to keep indentation the way we show it. Run\nthe program, and you should see something like this:</p>\n<pre><code>hello Everybody\nhello Programming Historian\n</code></pre>\n<p>This example contains one function: <em>greetEntity</em>. This function is then\n&quot;called&quot; (sometimes referred to as &quot;invoked&quot;) two times. Calling or\ninvoking a function just means we have told the program to execute the\ncode in that function. Like giving the dog his chicken-flavoured treat\n(*woof* *woof*). In this case each time we have called the function\nwe have given it a different parameter. Try editing <code>greet.py</code> so that\nit calls the <em>greetEntity</em> function a third time using your own name as a\nparameter. Run the program again. You should now be able to figure out\nwhat <code>(x)</code> does in the function declaration.</p>\n<p>Before moving on to the next step, edit <code>greet.py</code> to delete the\nfunction calls, leaving only the function declaration. You&#39;re going to\nlearn how to call the function from another program. When you are\nfinished, your <code>greet.py</code> file should look like this:</p>\n<pre><code class=\"language-python\"># greet.py\n\ndef greetEntity (x):\n    print(&quot;hello &quot; + x)\n</code></pre>\n<h2 id=\"modularity\">Modularity</h2>\n<p>When programs are small like the above example, they are typically\nstored in a single file. When you want to run one of your programs, you\ncan simply send the file to the interpreter. As programs become larger,\nit makes sense to split them into separate files known as modules. This\nmodularity makes it easier for you to work on sections of your larger\nprograms. By perfecting each section of the program before putting all\nof the sections together, you not only make it easier to reuse\nindividual modules in other programs, you make it easier to fix problems\nby being able to pinpoint the source of the error. When you break a\nprogram into modules, you are also able to hide the details for how\nsomething is done within the module that does it. Other modules don’t\nneed to know how something is accomplished if they are not responsible\nfor doing it. This need-to-know principle is called “encapsulation“.</p>\n<p>Suppose you were building a car. You could start adding pieces willy\nnilly, but it would make more sense to start by building and testing one\nmodule — perhaps the engine — before moving on to others. The engine, in\nturn, could be imagined to consist of a number of other, smaller modules\nlike the carburettor and ignition system, and those are comprised of\nstill smaller and more basic modules. The same is true when coding. You\ntry to break a problem into smaller pieces, and solve those first.</p>\n<p>You already created a module when you wrote the <code>greet.py</code> program. Now\nyou are going to write a second program, <code>using-greet.py</code> which will\n<code>import</code> code from your module and make use of it. Python has a special\n<code>import</code> statement that allows one program to gain access to the contents\nof another program file. This is what you will be using.</p>\n<p>Copy this code to Komodo Edit and save it as <code>using-greet.py</code>. This file\nis your program; <code>greet.py</code> is your module.</p>\n<pre><code class=\"language-python\"># using-greet.py\n\nimport greet\ngreet.greetEntity(&quot;everybody&quot;)\ngreet.greetEntity(&quot;programming historian&quot;)\n</code></pre>\n<p>We have done a few things here. First, we have told Python to <code>import</code>\n(load) the <code>greet.py</code> module, which we previously created.</p>\n<p>You will also notice that whereas before we were able to run the\nfunction by calling only its name: <em>greetEntity(&quot;everybody&quot;)</em>, we now\nneed to include the module&#39;s name followed by a dot (.) in front of the\nfunction name. In plain English this means: run the <em>greetEntity</em>\nfunction, which you should find in the <code>greet.py</code> module.</p>\n<p>You can run your <code>using-greet.py</code> program with the &quot;Run Python&quot; command\nthat you created in Komodo Edit. Note that you do not have to run your\nmodule…just the program that calls it. If all went well, you should see\nthe following in the Komodo Edit output pane:</p>\n<pre><code>hello everybody\nhello programming historian\n</code></pre>\n<p>Make sure that you understand the difference between loading a data file\n(e.g., <code>helloworld.txt</code>) and importing a program file (e.g. <code>greet.py</code>)\nbefore moving on.</p>\n<h2 id=\"suggested-readings\">Suggested Readings</h2>\n<ul>\n<li><a href=\"https://users.astro.ufl.edu/~warner/prog/python.html\">Python Basics</a></li>\n</ul>\n"}