{"metadata":{"title":"Web Mapping with Python and Leaflet","authors":["Kim Pham"],"date":"2017-08-29T00:00:00.000Z","reviewers":["Shawn Graham","Jim Clifford"],"editors":["Ian Milligan"],"difficulty":2,"review-ticket":"https://github.com/programminghistorian/ph-submissions/issues/85","activity":"presenting","topics":["mapping"],"abstract":"This tutorial teaches users how to create a web map based on tabular data.","layout":"lesson","redirect_from":"/lessons/mapping-with-python-leaflet","avatar_alt":"Map of a mountainous terrain","doi":"10.46430/phen0070"},"html_body":"<p>{% include toc.html %}</p>\n<h1 id=\"lesson-goals\">Lesson Goals</h1>\n<p>In this lesson, you will learn how to create a web map based on that data.  By the end of this lesson, you will be able to:</p>\n<ul>\n<li>Manipulate tabular data programmatically to extract geonames and create location-based data</li>\n<li>Convert tabular data into a meaningful geographic data structure</li>\n<li>Understand and apply the basic concepts of web mapping to design your own web map</li>\n</ul>\n<h2 id=\"getting-started\">Getting Started</h2>\n<h3 id=\"initial-setup\">Initial Setup</h3>\n<p>This lesson uses:</p>\n<ul>\n<li><a href=\"/lessons/?topic=python\">python</a> (<a href=\"http://pip.readthedocs.org/en/stable/\">pip</a>, <a href=\"https://github.com/geopy/geopy\">geopy</a>, <a href=\"http://pandas.pydata.org/pandas-docs/stable/dsintro.html#dataframe\">pandas</a>)</li>\n<li><a href=\"http://leafletjs.com/\">leaflet</a></li>\n<li><a href=\"http://geojson.io/\">geojson.io (from mapbox)</a></li>\n<li><a href=\"https://www.javascript.com/\">javascript</a> and <a href=\"https://jquery.com/\">jquery</a></li>\n</ul>\n<p>Optional: If you wish to follow along with pre-made scripts you can find them in <a href=\"https://github.com/programminghistorian/jekyll/tree/gh-pages/assets/mapping-with-python-leaflet\">this directory</a>.</p>\n<p>To set up your working environment:</p>\n<ol>\n<li>Create a directory for this project where you will keep all of your scripts and files that you will work from</li>\n<li>If you have a text editor where you can work from the directory of your project, import that directory. You can use editors such as <a href=\"http://www.barebones.com/products/textwrangler/\">TextWrangler</a> for OS X, <a href=\"https://notepad-plus-plus.org/\">Notepad++</a> for Windows, or <a href=\"http://www.sublimetext.com/\">Sublime Text</a>.\nIf you are using a code editor such as Sublime Text, to import the folder you could drag and drop the folder that you want to work from into your editor window. Once you&#39;ve done that, the directory will appear on the left hand sidebar as you root folder. If you click on your folder, you&#39;ll be able to see the contents of your folder. Importing a folder allows you to easily work with the files in your project. If you need to work with multiple files and directories in directories, this will make it easier to search through these files, switch between them while you&#39;re working and keep you organized.</li>\n<li>(Optional) It is recommended to use a <a href=\"http://docs.python-guide.org/en/latest/dev/virtualenvs/\">Python virtual environment</a> to store the dependencies and versions required for your specific project.</li>\n</ol>\n<h3 id=\"getting-data-download-the-csv\">Getting Data: Download the CSV</h3>\n<p>We&#39;re going to start with a plain comma-separated values (CSV) data file and create a web map from it.</p>\n<p><a href=\"/assets/mapping-with-python-leaflet/census.csv\">The data file can be downloaded here</a>. You can grab this by either opening the link in your browser and saving the page, or you can use the curl command from your command line:</p>\n<p><code>curl -O https://programminghistorian.org/assets/mapping-with-python-leaflet/census.csv</code></p>\n<p>The original source of this data is from the <a href=\"http://data.london.gov.uk/dataset/historic-census-population\">Greater London Authority London Datastore</a>.</p>\n<h2 id=\"geocoding-with-python\">Geocoding with Python</h2>\n<h3 id=\"geocode-the-placenames-in-the-csv-using-geopy-pandas\">Geocode the placenames in the CSV using Geopy, Pandas</h3>\n<p>Now that we have data, we will use this as our source to make a web map. Web maps typically represent locations and features from geographic data formats such as geoJSON and KML. Every location in a geographic data file can be considered to have geometry (such as points, lines, polygons) as well as additional properties. Web maps typically understand locations as a series of coordinates. For example, 43.6426,-79.3871 would represent the exact coordinates of the <a href=\"https://en.wikipedia.org/wiki/CN_Tower\">CN Tower in Toronto</a>.</p>\n<p>In our data file, we have a list of placenames in our CSV data (the Area Name column), but no coordinates. What we want to do then is to somehow generate coordinates from these locations. This process is called geocoding.</p>\n<p>So here is our first problem to solve:  how can we geocode placenames? How could we take an entry such as &quot;CN Tower&quot; and add the coordinates 43.6426,-79.3871 to it automatically?</p>\n<p>To clarify, we need to figure out how to gather coordinates for a location for each row of a CSV file in order to display these locations on a web map.</p>\n<p>There&#39;s a simple way to do this: you can look up a coordinate online in Google Maps and put each coordinate in your spreadsheet manually.  But, if you had 5,000 points the task becomes a little bit more daunting. If you&#39;re faced with a repetitive task, it might be worthwhile to approach it programmatically.</p>\n<p>If you&#39;re familiar with <em>Programming Historian</em>, you might have already noticed that there are many <a href=\"/lessons/?topic=python\">lessons available on how to use Python</a>.  Python is a great beginner programming language because it is easy to read and happens to be used a lot in GIS applications to optimize workflows.  One of the biggest advantages to Python is the impressive amount of libraries which act like pluggable tools to use for many different tasks.  Knowing that this is a good programmatic approach, we&#39;re now going to build a Python script that will automate geocode every address for us.</p>\n<p><a href=\"https://github.com/geopy/geopy\">Geopy</a> is a Python library that gives you access to the various geocoding APIs.  Geopy makes it easy for Python developers to locate the coordinates of addresses, cities, countries, and landmarks across the globe using third-party geocoders and other data sources. Geopy includes geocoders built by OpenStreetMap Nominatim, ESRI ArcGIS, Google Geocoding API (V3), Baidu Maps, Bing Maps API, Yahoo! PlaceFinder, Yandex, IGN France, GeoNames, NaviData, OpenMapQuest, What3Words, OpenCage, SmartyStreets, geocoder.us, and GeocodeFarm geocoder services.</p>\n<p><a href=\"http://pandas.pydata.org/pandas-docs/stable/dsintro.html#dataframe\">Pandas</a> is another python library that we will use.  It&#39;s very popular library amongst scientists and mathematicians to manipulate and analyse data.</p>\n<p>Finally, <a href=\"http://pip.readthedocs.org/en/stable/\">Pip</a> is a very useful package manager to help you install things like Geopy and Pandas! If you&#39;ve <a href=\"/lessons/introduction-and-installation\">already installed Python</a> and <a href=\"/lessons/installing-python-modules-pip\">installed pip</a>, type <code>pip list</code> to see if you already have the geopy and pandas packages installed. If you do not have pip installed, you can download <a href=\"https://bootstrap.pypa.io/get-pip.py\">get-pip.py</a>, then from your command line go to the directory where get-pip.py is located and run</p>\n<p><code>python get-pip.py </code></p>\n<p>For the most up to date instructions, you can visit <a href=\"http://pip.readthedocs.org/en/stable/installing/\">pip&#39;s installation manual</a>.</p>\n<p>To install Geopy and Pandas, open your <a href=\"/lessons/intro-to-bash\">command line (using this lesson as a guideline if necessary)</a> and install the Geopy and Pandas libraries:</p>\n<p>On OS X or Linux, the following commands will install the necessary packages:</p>\n<pre><code class=\"language-bash\">pip install numpy\npip install python-dateutil\npip install pytz\npip install geopy\npip install pandas\n</code></pre>\n<p>Note: We are installing numpy, python-dateutil, and pytz because pandas <a href=\"http://pandas.pydata.org/pandas-docs/stable/install.html#dependencies\">requires them</a>.</p>\n<p>For Windows, you may need to install <a href=\"https://wiki.python.org/moin/WindowsCompilers\">Microsoft Visual C++ Compiler for Python</a>. Set the environmental variables to recognize python and pip from the command line:</p>\n<pre><code>setx  PATH &quot;%PATH%;C:\\Python27&quot;\nsetx  PATH &quot;%PATH%;C:\\Python27\\Scripts&quot;\n</code></pre>\n<p>If you keep getting an error when you&#39;re trying to install these libraries, you may need to use <code>sudo pip install</code> instead of just <code>pip install</code>. You may also need to upgrade your libraries if you&#39;ve installed them earlier and you find that you&#39;re encountering an error when using Python (i.e. an ImportError). In order to do so, the following command works:</p>\n<pre><code class=\"language-bash\">pip install python --upgrade\n</code></pre>\n<p>Repeat for the other dependencies listed above.</p>\n<p>Now we&#39;re going to start building our script. We&#39;re going to go through the script, line by line, and then run it through the command line at the end. To get started, open your text editor and save your blank document as a python script (name it <code>geocoder.py</code>).  For the first part of your Python script, you will want to import your libraries and your data:</p>\n<pre><code class=\"language-python\">import geopy\nimport pandas\nfrom geopy.geocoders import Nominatim\n# versions used: geopy 2.2.0, pandas 1.3.3, python 3.7.5\n</code></pre>\n<p>In the code above, we are importing the different Python libraries that we will need to use later on in our script.  We import geopy, specifically the geopy.geocoders that we will call on later which is <a href=\"https://wiki.openstreetmap.org/wiki/Nominatim\">Nominatim</a> and <a href=\"https://developers.google.com/maps/documentation/geocoding/start\">Google Maps V3 API</a>, and we import pandas.</p>\n<p>Then you want to create a function main() that reads your input CSV.</p>\n<pre><code class=\"language-python\">import geopy\nimport pandas\nfrom geopy.geocoders import Nominatim\n# versions used: geopy 2.2.0, pandas 1.3.3, python 3.7.5\n\ndef main():\n    io = pandas.read_csv(&#39;census-historic-population-borough.csv&#39;, index_col=None, header=0, sep=&quot;,&quot;)\n</code></pre>\n<p>We are first using pandas&#39; pre-existing read_csv() function to open the CSV file. We pass the filepath to our data file in the first parameter, &#39;census-historic-population-borough.csv&#39;. If it was in a folder called &#39;data&#39;, you would put &#39;data/census-historic-population-borough.csv&#39;.  The second parameter, <code>index_col=None</code>, will number the rows to generate the index without using any column.  If we use <code>index_col=0</code>, it indexes the first column in your data as the row name. The third parameter, <code>header=0</code>, indicates that there is a header row, which is the first line of the spreadsheet (Note: Python uses &quot;0&quot; instead of &quot;1&quot; to indicate the first value in an index). The fourth parameter <code>sep=&quot;,&quot;</code> is where you indicate delimiter symbol that is used to split data into fields.  Since are using a comma separated values data format, we need to indicate that we are using a comma to split our data.</p>\n<p>There are many other parameters you can use.  A full list is available in the pandas documentation on the <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html\">read_csv() function</a>.</p>\n<p>Next, we anticipate that when we geocode the csv we will get points in the format of (latitude, longitude). If we only want the latitude value of the point in a csv column, we will define a function to isolate that value. The same can be done for our longitude value.</p>\n<pre><code class=\"language-python\">import geopy\nimport pandas\n# versions used: geopy 2.2.0, pandas 1.3.3, python 3.7.5\n\ndef main():\n  io = pandas.read_csv(&#39;census-historic-population-borough.csv&#39;, index_col=None, header=0, sep=&quot;,&quot;)\n\ndef get_latitude(x):\n  return x.latitude\n\ndef get_longitude(x):\n  return x.longitude\n</code></pre>\n<p>Next, select the geolocator you want to use.  Here we&#39;re creating two geolocators: Open Street Map&#39;s Nominatim and Google&#39;s Geocoding API.  Here&#39;s a quick comparison:</p>\n<table>\n<thead>\n<tr>\n<th>Geolocator</th>\n<th>Nominatim()</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>affiliation</td>\n<td>OpenStreetMap</td>\n</tr>\n<tr>\n<td>application use</td>\n<td>single-threaded applications, can only run geolocator one process at a time</td>\n</tr>\n<tr>\n<td>capabilities for app development</td>\n<td>can geocode based on user-input</td>\n</tr>\n<tr>\n<td>request limit</td>\n<td>1 request/s or timeout</td>\n</tr>\n<tr>\n<td>performance test on census data</td>\n<td>33.5s</td>\n</tr>\n</tbody></table>\n<p>You can also choose a different geolocator from the list found in <a href=\"http://geopy.readthedocs.org/\">the geopy documentation</a>. GoogleV3 is a geocoder compatible with geopy, it is a reliable geolocator choice because of their large geographic data coverage. However, since July 2018 an API key is required, and you need to enable billing in Google Cloud to use it. For more information about choosing geolocators, you can follow the discussion in the <a href=\"https://github.com/geopy/geopy/issues/90\">geopy repository on Github</a>.</p>\n<p>To use a geolocator, import them and assign a variable name (in this case we use the name geolocator):</p>\n<pre><code class=\"language-python\">import geopy\nimport pandas\nfrom geopy.geocoders import Nominatim\n# versions used: geopy 2.2.0, pandas 1.3.3, python 3.7.5\n\ndef main():\n  io = pandas.read_csv(&#39;census-historic-population-borough.csv&#39;, index_col=None, header=0, sep=&quot;,&quot;)\n\n  def get_latitude(x):\n    return x.latitude\n\n  def get_longitude(x):\n    return x.longitude\n\ngeolocator = Nominatim()\n</code></pre>\n<p>Finally, using pandas you want to create a column in your spreadsheet called &#39;latitude&#39;.  The script will read the existing &#39;Area_Name&#39; data column, run the geopy <a href=\"http://geopy.readthedocs.io/en/latest/#module-geopy.geocoders\">geolocator</a> on the column using pandas&#39; <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.apply.html\">apply function</a>, and generate a latitude coordinate in that column.  The same transformation will occur in the &#39;longitude&#39; column.  Once this is finished it will output a new CSV file with those two columns:</p>\n<pre><code class=\"language-python\">import geopy\nimport pandas\nfrom geopy.geocoders import Nominatim\n# versions used: geopy 2.2.0, pandas 1.3.3, python 3.7.5\n\ndef main():\n  io = pandas.read_csv(&#39;census-historic-population-borough.csv&#39;, index_col=None, header=0, sep=&quot;,&quot;)\n\n  def get_latitude(x):\n    return x.latitude\n\n  def get_longitude(x):\n    return x.longitude\n\n  geolocator = Nominatim()\n\n  geolocate_column = io[&#39;Area_Name&#39;].apply(geolocator.geocode)\n  io[&#39;latitude&#39;] = geolocate_column.apply(get_latitude)\n  io[&#39;longitude&#39;] = geolocate_column.apply(get_longitude)\n  io.to_csv(&#39;geocoding-output.csv&#39;)\n</code></pre>\n<p>If we didn&#39;t have the <code>.apply(get_latitude)</code> part of the code, we&#39;d get the full point data. For instance, if we were again geocoding the CN Tower and used just <code>.apply(geolocator.geocode)</code>, we would get 43.6426,-79.3871 in our column. Adding the additional <code>.apply(get_latitude)</code> would mean that we&#39;d only get 43.6426 in our column.</p>\n<p>To finish off your code, it&#39;s good practice to make your python modular, that way you can plug it in and out of other applications (should you want to use this script as part of another program). This is what your final python script should look like:</p>\n<pre><code class=\"language-python\">import geopy\nimport pandas\nfrom geopy.geocoders import Nominatim\n# versions used: geopy 2.2.0, pandas 1.3.3, python 3.7.5\n\ndef main():\n  io = pandas.read_csv(&#39;census-historic-population-borough.csv&#39;, index_col=None, header=0, sep=&quot;,&quot;)\n\n  def get_latitude(x):\n    return x.latitude\n\n  def get_longitude(x):\n    return x.longitude\n\n  geolocator = Nominatim(user_agent=&quot;email@email.com&quot;)\n\n  geolocate_column = io[&#39;Area_Name&#39;].apply(geolocator.geocode)\n  io[&#39;latitude&#39;] = geolocate_column.apply(get_latitude)\n  io[&#39;longitude&#39;] = geolocate_column.apply(get_longitude)\n  io.to_csv(&#39;geocoding-output.csv&#39;)\n\nif __name__ == &#39;__main__&#39;:\n  main()\n</code></pre>\n<p>Do you have the script saved and ready to go? Good.  Run the script from your command line by typing:</p>\n<pre><code class=\"language-bash\">python geocoder.py\n</code></pre>\n<p>It takes a few seconds and may take longer depending on the geolocator you use. Once the script finishes running, you should have coordinates for every Area_Name.</p>\n<p><em>Tip 1: If you want to pass the filenames from the command line rather than changing the input file name in the python script everytime, you can import the python &#39;sys&#39; library to pass through arguments. Your code might look like this:</em></p>\n<pre><code class=\"language-python\">import geopy, sys\nimport pandas\nfrom geopy.geocoders import Nominatim\n# versions used: geopy 2.2.0, pandas 1.3.3, python 3.7.5\n\ninputfile=str(sys.argv[1])\nnamecolumn=str(sys.argv[2])\n\ndef main():\n  io = pandas.read_csv(inputfile, index_col=None, header=0, sep=&quot;,&quot;)\n\ndef get_latitude(x):\n  return x.latitude\n\n  def get_longitude(x):\n    return x.longitude\n\n  geolocator = Nominatim()\n\n  geolocate_column = io[namecolumn].apply(geolocator.geocode)\n  io[&#39;latitude&#39;] = geolocate_column.apply(get_latitude)\n  io[&#39;longitude&#39;] = geolocate_column.apply(get_longitude)\n  io.to_csv(&#39;geocoding-output.csv&#39;)\n\nif __name__ == &#39;__main__&#39;:\n  main()\n</code></pre>\n<p>To run your python script your command would look like this:</p>\n<p><code>python geocoder.py census-historic-population-borough.csv Area_Name</code></p>\n<p><em>Tip 2:\nIf you run geocoder.py too many times you might get a timeout error.</em></p>\n<p>The error will look like this if you use the Nominatim geocoder:</p>\n<p><code>geopy.exc.GeocoderTimedOut: Service timed out</code></p>\n<p>To address the timeout error, you could add the parameter <code>timeout</code>, which specifies the time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. So your geolocator declaration will look like this:</p>\n<p><code>geolocator = Nominatim(user_agent=&quot;email@email.com&quot;, timeout=5)</code></p>\n<h2 id=\"transforming-data-with-python\">Transforming Data with Python</h2>\n<h3 id=\"making-geojson\">Making GeoJSON</h3>\n<p>Now that you have a spreadsheet full of coordinate data, we can convert the CSV spreadsheet into a format that web maps like, like GeoJSON.  GeoJSON is a web mapping standard of JSON data.  There are a couple of ways to make GeoJSON:</p>\n<p>The easiest, recommended way is to use a UI tool developed by Mapbox called <a href=\"http://geojson.io\">geojson.io</a>.  All you have to do is click and drag your csv file into the data window (the right side of the screen, next to the map), and it will automatically format your data into GeoJSON for you. You can select the &#39;GeoJSON&#39; option under &#39;Save.&#39;  Save your GeoJSON file as <code>census.geojson</code>.</p>\n<p>{% include figure.html filename=&quot;webmap-01-geojsonio.gif&quot; caption=&quot;Drag and Drop GeoJSON creation!&quot; %}</p>\n<p>Image Credit: with permission from Mauricio Giraldo Arteaga, NYPL Labs</p>\n<p>You can also do it from the command line, using the <a href=\"https://github.com/mapbox/csv2geojson\">csv2geojson library</a> that powers geojson.io.</p>\n<p>Test this data out by importing it again into geojson.io.  You should see points generated in the preview window.  That&#39;s your data!</p>\n<h3 id=\"you-finally-have-geojson-but-you-need-to-do-some-cleaning\">You finally have GeoJSON... but you need to do some cleaning!</h3>\n<p>If you&#39;ve tested your GeoJSON data, you might notice that not every point is geolocated correctly.  We know that every Area_Name is a borough of London, but points appear all over United Kingdom, and some aren&#39;t located even in the country.</p>\n<p>To make the results more accurate, save another copy of the census-historic-population-borough.csv file, calling it census_country.csv and include an additional column called &#39;Country&#39; and put &#39;United Kingdom&#39; in every row of your data. For even greater accuracy add &#39;City&#39; and put &#39;London&#39; in every row of your data to provide additional context for your data.</p>\n<p>{% include figure.html filename=&quot;webmap-02-countrycolumn.png&quot; caption=&quot;A new Country column&quot; %}</p>\n<p>Make a copy of your geocoder.py python script, calling it geocoder-helpercolumn.py. Remove the following lines:</p>\n<pre><code class=\"language-python\">  geolocate_column = io[namecolumn].apply(geolocator.geocode)\n  io[&#39;latitude&#39;] = geolocate_column.apply(get_latitude)\n  io[&#39;longitude&#39;] = geolocate_column.apply(get_longitude)\n</code></pre>\n<p> and replacing it with the following that combines the Area_Name and Country or City column to geocode your data:</p>\n<pre><code class=\"language-python\">  io[&#39;helper&#39;] = io[&#39;Area_Name&#39;].map(str) + &quot; &quot; + io[&#39;Country&#39;].map(str)\n  geolocate_column = io[&#39;helper&#39;].apply(geolocator.geocode)\n  io[&#39;latitude&#39;] = geolocate_column.apply(get_latitude)\n  io[&#39;longitude&#39;] = geolocate_column.apply(get_longitude)\n</code></pre>\n<p>Note that we added the .map(str) function. This is a pandas function that is allowing you to concatenate two DataFrame columns into a new, single column (helper) using the syntax format:</p>\n<pre><code class=\"language-python\">df[&#39;newcol&#39;] = df[&#39;col1&#39;].map(str) + df[&#39;col2&#39;].map(str)\n</code></pre>\n<p>You will also want to comment out and commenting out <code>namecolumn=str(sys.argv[2])</code> since we are now directly specifying the column that we are using in the script.</p>\n<p>Your final script should look like this:</p>\n<pre><code class=\"language-python\">import geopy, sys\nimport pandas\nfrom geopy.geocoders import Nominatim\n\ninputfile=str(sys.argv[1])\n# namecolumn=str(sys.argv[2])\n\ndef main():\n  io = pandas.read_csv(inputfile, index_col=None, header=0, sep=&quot;,&quot;)\n\n  def get_latitude(x):\n    return x.latitude\n\n  def get_longitude(x):\n    return x.longitude\n\n  # geolocator = Nominatim(timeout=5)\n  # uncomment the geolocator you want to use\n  # change the timeout value if you get a timeout error, for instance, geolocator = Nominatim(timeout=60)\n  io[&#39;helper&#39;] = io[&#39;Area_Name&#39;].map(str) + &quot; &quot; + io[&#39;Country&#39;].map(str)\n  geolocate_column = io[&#39;helper&#39;].apply(geolocator.geocode)\n  io[&#39;latitude&#39;] = geolocate_column.apply(get_latitude)\n  io[&#39;longitude&#39;] = geolocate_column.apply(get_longitude)\n  io.to_csv(&#39;geocoding-output-helper.csv&#39;)\n\nif __name__ == &#39;__main__&#39;:\n  main()\n</code></pre>\n<p>Which you can now run by using the command:</p>\n<pre><code>python geocoder-helpercolumn.py census_country.csv\n</code></pre>\n<p>Turn your clean data into GeoJSON by saving it as <code>census.geojson</code> and test it out at <a href=\"http://geojson.io\">geojson.io</a>. Remember, drag the new CSV you created (<code>census_country.csv</code> into the window to create that beautiful JSON). Do the results look better now? Good!</p>\n<h2 id=\"using-leaflet-to-create-a-web-map\">Using Leaflet to Create a Web Map</h2>\n<h3 id=\"i-now-have-clean-geojson-data--lets-make-a-map\">I now have clean GeoJSON data.  Lets make a map!</h3>\n<p>Setup a test web server to test out our maps. A web server is used to serve content from your directory to your browser.</p>\n<p> If you&#39;re in your working directory, from the command line, run:</p>\n<p><code>python -m SimpleHTTPServer</code> or <code>python3 -m http.server</code> (for Python3)</p>\n<p>SimpleHTTPServer is a Python module. If you want to change the server to port 8080 (or any other port), use</p>\n<p><code>python -m SimpleHTTPServer 8080</code> or <code>python3 -m http.server 8080</code> (for Python3)</p>\n<p>In your browser go to <a href=\"http://localhost:8080\">http://localhost:8080</a> and you should see the files you&#39;ve been working with so far.</p>\n<p>Now in your text editor open a new document and save it as an html file (mymap.html).  If you want to do a quick test, copy and paste the text below, refresh your <a href=\"http://localhost:8080\">http://localhost:8080</a> and open the html file in your browser.</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.css&quot; /&gt;\n&lt;script src=&quot;http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://code.jquery.com/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;\n\n\n&lt;style&gt;\n#my-map {\n    width:960px;\n    height:500px;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=&quot;my-map&quot;&gt;&lt;/div&gt;\n&lt;script&gt;\nwindow.onload = function () {\n    var basemap = L.tileLayer(&#39;http://{s}.tile.osm.org/{z}/{x}/{y}.png&#39;, {\n        attribution: &#39;&amp;copy; &lt;a href=&quot;http://osm.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&#39;\n    });\n\n    $.getJSON(&quot;census.geojson&quot;, function(data) {\n\n    var geojson = L.geoJson(data, {\n      onEachFeature: function (feature, layer) {\n        layer.bindPopup(feature.properties.Area_Name);\n      }\n    });\n\n    var map = L.map(&#39;my-map&#39;)\n    .fitBounds(geojson.getBounds());\n//    .setView([0.0,-10.0], 2);\n\n    basemap.addTo(map);\n    geojson.addTo(map);\n  });\n\n};\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Do you see a map now?  Good! If not, you can troubleshoot by inspecting the browser, or by going back and retracing your steps.</p>\n<h3 id=\"what-did-i-just-make\">What did I just make?</h3>\n<p>You made a web map!  Web maps use map tiles, which are pixel based images (rasters) of maps that contain geographical data. This means that each pixel of a map tile has been georeferenced, or assigned a coordinate based on the location that they represent.  When you zoom in and out of a web map, you are getting a whole new set of tiles to display at each zoom level. GeoJSON (which you are now familiar with) is a widely used data standard for web mapping.  In our example, we are using an open-source Javascript library called <a href=\"http://leafletjs.com/reference.html\">Leaflet</a> to help us build our web map. The benefits of using an open-source library such as Leaflet is the flexibility you get and with developing and customizing your map, without worry of the technology being deprecated or no longer supported that is beyond your control.  With frameworks like Leaflet or Google Maps Javascript API, you&#39;re not building a map completely from scratch, rather, you&#39;re using pre-written functions and controls that helps you customize your own map in code.</p>\n<p>Lets go through what each part of the code is doing. But first, it&#39;s best practice to maintain your html, css, js in different files so that the web map&#39;s content, presentation and behaviour layers are kept separate (though it&#39;s not always possible). This adds a bit more structure to your code, making it easier for you and others to understand. It will be easier to focus on certain parts of the code when you&#39;re going back and making changes. So here is our code split into three files:</p>\n<p>mymap.html</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.css&quot; /&gt;\n&lt;script src=&quot;http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://code.jquery.com/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=&quot;my-map&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=&#39;leafletmap.js&#39;&gt;&lt;/script&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p>style.css</p>\n<pre><code class=\"language-css\">#my-map {\n    width:960px;\n    height:500px;\n}\n</code></pre>\n<p>leafletmap.js</p>\n<pre><code class=\"language-javascript\">window.onload = function () {\n    var basemap = L.tileLayer(&#39;http://{s}.tile.osm.org/{z}/{x}/{y}.png&#39;, {\n        attribution: &#39;&amp;copy; &lt;a href=&quot;http://osm.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&#39;\n    });\n\n    $.getJSON(&quot;census.geojson&quot;, function(data) {\n\n    var geojson = L.geoJson(data, {\n      onEachFeature: function (feature, layer) {\n        layer.bindPopup(feature.properties.Area_Name);\n      }\n    });\n\n\n    var map = L.map(&#39;my-map&#39;)\n    .fitBounds(geojson.getBounds());\n\n    basemap.addTo(map);\n    geojson.addTo(map);\n  });\n\n};\n</code></pre>\n<p>Seems a bit easier to undestand now, doesn&#39;t it? Now lets look at what the html file is doing.</p>\n<h4 id=\"mymaphtml-walkthrough\">mymap.html walkthrough</h4>\n<p>mymap.html</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.css&quot; /&gt;\n&lt;script src=&quot;http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://code.jquery.com/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;\n&lt;/head&gt;\n</code></pre>\n<p>The above code is the first section, or header of your html document. We are linking to the external javascript library and css stylesheets provided by leaflet.  We&#39;re also linking to our own stylesheet, style.css.</p>\n<pre><code class=\"language-html\">\n&lt;body&gt;\n    &lt;div id=&quot;my-map&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=&#39;leafletmap.js&#39;&gt;&lt;/script&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p>Next, we&#39;re declaring the body and where you want the map to go on your page. We&#39;re also linking to our own javascript file, leafletmap.js.</p>\n<h4 id=\"stylecss-walkthrough\">style.css walkthrough</h4>\n<p>style.css</p>\n<pre><code class=\"language-css\">#my-map {\n    width:960px;\n    height:500px;\n}\n</code></pre>\n<p>There&#39;s a bit of CSS styling here to specify the size of your map. Some optional styling will happen in your javascript file if you&#39;re using the Leaflet library.</p>\n<h4 id=\"leafletmapjs-walkthrough\">leafletmap.js walkthrough</h4>\n<p>leafletmap.js</p>\n<pre><code class=\"language-javascript\">window.onload = function () {\n    var basemap = L.tileLayer(&#39;http://{s}.tile.osm.org/{z}/{x}/{y}.png&#39;, {\n        attribution: &#39;&amp;copy; &lt;a href=&quot;http://osm.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&#39;\n    });\n</code></pre>\n<p>The javascript file is what provides the behaviour, or functionality of our web map. It&#39;s what makes our web map come alive! In the code above, we&#39;re telling the javascript to load when the browser loads. We&#39;re creating our first map layer, which is your basemap.  The basemap is the tiles provided by OpenStreetMap that provides places and streetnames found on maps.</p>\n<pre><code class=\"language-javascript\">    $.getJSON(&quot;census.geojson&quot;, function(data) {\n\n    var geojson = L.geoJson(data, {\n      onEachFeature: function (feature, layer) {\n        layer.bindPopup(feature.properties.Area_Name);\n      }\n    });\n</code></pre>\n<p>Next, we&#39;re loading our data as another map layer, <code>census.geojson</code>.  This data will have additional properties: each point of data is represented by an icon. It will look and behave like a popup so that when you click on the icon it will load information from your data file (in this case, the Area_Name).</p>\n<pre><code class=\"language-javascript\">   var map = L.map(&#39;my-map&#39;)\n    .fitBounds(geojson.getBounds());\n\n    basemap.addTo(map);\n    geojson.addTo(map);\n  });\n\n};\n</code></pre>\n<p>Now we&#39;re creating the view for our map.  The boundary for our map will be based on the range of our data points in <code>census.geojson</code>.  You can also manually set your your viewport by using the <a href=\"http://leafletjs.com/reference.html#map-set-methods\">setView property</a>. For example, if you&#39;re using <code>.setView([0.0,-10.0], 2)</code> , the viewport coordinates &#39;[0.0,-10.0], 2&#39; means that you&#39;re setting the centre of the map to be 0.0, -10.0 and at a zoom level of 2.</p>\n<p>{% include figure.html filename=&quot;webmap-03-result.jpg&quot; caption=&quot;My Web Map&quot; %}</p>\n<p>Finally, the map layers you created will be added to your map. Put it all together and hurrah, you&#39;ve got your web map!  Now lets play around with it. The following five exercises give you tasks to do to learn some of the other elements, with answers provided.</p>\n<h3 id=\"exercise-1-default-viewports\">Exercise 1: Default Viewports</h3>\n<p>Let&#39;s change the map to use a viewport to 51.505 latitude, -0.09 longitude with a zoom level 9. To do this, we just need to edit one file: <code>leafletmap.js</code>.</p>\n<pre><code class=\"language-javascript\">window.onload = function () {\n    var basemap = L.tileLayer(&#39;http://{s}.tile.osm.org/{z}/{x}/{y}.png&#39;, {\n    attribution: &#39;&amp;copy; &lt;a href=&quot;http://osm.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&#39;\n  });\n\n    $.getJSON(&quot;census.geojson&quot;, function(data) {\n\n    var geojson = L.geoJson(data, {\n      onEachFeature: function (feature, layer) {\n        layer.bindPopup(feature.properties.Area_Name);\n      }\n    });\n\n\n    var map = L.map(&#39;my-map&#39;)\n    //.fitBounds(geojson.getBounds());\n    .setView([51.505,-0.09], 9);\n    //EDIT HERE\n\n    basemap.addTo(map);\n    geojson.addTo(map);\n  });\n\n};\n</code></pre>\n<p>What we&#39;ve done there is changed the <code>.fitBounds</code> to <code>.setView</code>, with the various options mentioned above. Try reloading the file, and you&#39;ll see it loads to the correct place.</p>\n<p>{% include figure.html filename=&quot;webmap-05-exercise01.jpg&quot; caption=&quot;Exercise 01&quot; %}</p>\n<h3 id=\"exercise-2-marker-properties\">Exercise 2: Marker Properties</h3>\n<p>Now let&#39;s add the 2001, 1981 and 1991 population property to each marker popup. You can use HTML to style your popup window. To do so, we again need to edit the javascript.</p>\n<pre><code class=\"language-javascript\">window.onload = function () {\n    var basemap = L.tileLayer(&#39;http://{s}.tile.osm.org/{z}/{x}/{y}.png&#39;, {\n    attribution: &#39;&amp;copy; &lt;a href=&quot;http://osm.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&#39;\n  });\n\n    $.getJSON(&quot;census.geojson&quot;, function(data) {\n\n    var geojson = L.geoJson(data, {\n      onEachFeature: function (feature, layer) {\n        layer.bindPopup(feature.properties.Area_Name + &#39;&lt;p&gt;&lt;b&gt; 2001 Population: &#39; + feature.properties.Pop_2001 + &#39;&lt;/b&gt;&lt;/p&gt;&#39; + &#39;&lt;p&gt;&lt;b&gt; 1981 Population: &#39; + feature.properties.Pop_1981 + &#39;&lt;/b&gt;&lt;/p&gt;&#39; + &#39;&lt;p&gt;&lt;b&gt; 1801 Population &#39; + feature.properties.Pop_1801 + &#39;&lt;/b&gt;&lt;/p&gt;&#39;);\n        //EDIT HERE\n      }\n    });\n\n\n    var map = L.map(&#39;my-map&#39;)\n    //.fitBounds(geojson.getBounds());\n    .setView([51.505,-0.09], 9);\n\n    basemap.addTo(map);\n    geojson.addTo(map);\n  });\n\n};\n</code></pre>\n<p>What we&#39;ve done here is edit the <a href=\"http://leafletjs.com/reference-1.2.0.html#geojson-oneachfeature\">onEachFeature function</a>, which gets called for each feature (in this case, each marker popup) to add additional information about each marker contained in our <code>census.geojson</code> data. To add attribute information from our <code>census.geojson</code> file, we use the convention <code>feature.properties.ATTRIBUTE_NAME</code> to access the population data. In this case, we are adding <code>feature.properties.Pop_2001</code>, <code>feature.properties.Pop_1981</code>, and <code>feature.properties.Pop_1801</code>, and adding a bit of styling with html for readability.</p>\n<p>{% include figure.html filename=&quot;webmap-06-exercise02.jpg&quot; caption=&quot;Exercise 02&quot; %}</p>\n<h3 id=\"exercise-3-change-data-source\">Exercise 3: Change Data Source</h3>\n<p>Change the data source to a different dataset, as an example you can use the <a href=\"/assets/mapping-with-python-leaflet/exercises/exercise03/stations.geojson\">stations.geojson</a> file.</p>\n<p>To do this, we need to edit the javascript file.</p>\n<pre><code class=\"language-javascript\">window.onload = function () {\n    var basemap = L.tileLayer(&#39;http://{s}.tile.osm.org/{z}/{x}/{y}.png&#39;, {\n    attribution: &#39;&amp;copy; &lt;a href=&quot;http://osm.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&#39;\n  });\n\n    $.getJSON(&quot;stations.geojson&quot;, function(data) {\n\n    var geojson = L.geoJson(data, {\n      onEachFeature: function (feature, layer) {\n        layer.bindPopup(feature.properties.name + &#39;&lt;p&gt;&lt;b&gt; Line: &#39; + feature.properties.line + &#39;&lt;/b&gt;&lt;/p&gt;&#39;);\n        //EDIT HERE\n      }\n    });\n\n\n    var map = L.map(&#39;my-map&#39;)\n    .fitBounds(geojson.getBounds());\n    // .setView([51.505,-0.09], 9);\n    // EDIT HERE\n\n    basemap.addTo(map);\n    geojson.addTo(map);\n  });\n\n};\n</code></pre>\n<p>Since we&#39;re loading a new dataset, we need a new view for our map. First, we&#39;ve replaced <code>census.geojson</code> with <code>stations.geojson</code> to our $getJSON request. Next, we add the attribute information found in our <code>stations.geojson</code> file, including the name (<code>feature.properties.name</code>) and line (<code>features.properties.line</code>). Finally, we are using the <code>.fitBounds</code> function so that the viewport automatically centers on our new set of data points.</p>\n<p>{% include figure.html filename=&quot;webmap-07-exercise03.jpg&quot; caption=&quot;Exercise 03&quot; %}</p>\n<h3 id=\"exercise-4-custom-basemap\">Exercise 4: Custom Basemap</h3>\n<p>Change your data source back to <code>census.geojson</code>. Change your basemap layer to a mapbox tileset.  You need to get a Mapbox account, create a map or style and get your Mapbox API access token.</p>\n<p>{% include figure.html filename=&quot;webmap-04-mapboxAPI.png&quot; caption=&quot;Mapbox API&quot; %}</p>\n<p>First, you will need to add a reference to the mapbox javascript and css libraries:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.css&quot; /&gt;\n&lt;script src=&quot;http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://code.jquery.com/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;\n&lt;!-- EDIT HERE --&gt;\n&lt;script src=&#39;https://api.mapbox.com/mapbox.js/v2.2.1/mapbox.js&#39;&gt;&lt;/script&gt;\n&lt;link href=&#39;https://api.mapbox.com/mapbox.js/v2.2.1/mapbox.css&#39; rel=&#39;stylesheet&#39; /&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div id=&quot;my-map&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=&#39;leafletmap.js&#39;&gt;&lt;/script&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p>Then we edit the javascript file:</p>\n<pre><code class=\"language-javascript\">\nwindow.onload = function () {\n     var basemap = L.tileLayer(&#39;http://{s}.tile.osm.org/{z}/{x}/{y}.png&#39;, {\n     attribution: &#39;&amp;copy; &lt;a href=&quot;http://osm.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&#39;\n   });\n\n    // EDIT HERE: get an access token, replace &#39;YOURTOKENHERE&#39; with something like &quot;pk.eyJ1Ijoia2ltcGhhbTU0IiwiYSI6IkdJX0tvM2cifQ.fVsdGC_QJrFYZ3SxZCsvhQ&quot;\n    L.mapbox.accessToken = &#39;YOURTOKENHERE&#39;;\n\n    // EDIT HERE: add the new baselayer style, replace &#39;YOURLINKHERE&#39; with something like &quot;kimpham54.au2i6bt9&quot;\n    var basemap = L.tileLayer(&#39;https://api.mapbox.com/v4/kimpham54.au2i6bt9/{z}/{x}/{y}.png?access_token=&#39; + L.mapbox.accessToken, {\n        attribution: &#39;&lt;a href=&quot;https://www.mapbox.com/tos/&quot;&gt;Mapbox&lt;/a&gt;&#39;\n      });\n\n    $.getJSON(&quot;stations.geojson&quot;, function(data) {\n\n    var geojson = L.geoJson(data, {\n      onEachFeature: function (feature, layer) {\n        layer.bindPopup(feature.properties.name + &#39;&lt;p&gt;&lt;b&gt; Line: &#39; + feature.properties.line + &#39;&lt;/b&gt;&lt;/p&gt;&#39;);\n        // EDIT HERE\n      }\n    });\n\n\n    var map = L.map(&#39;my-map&#39;)\n    .fitBounds(geojson.getBounds());\n    //.setView([51.505,-0.09], 9);\n    // EDIT HERE\n\n    basemap.addTo(map);\n    geojson.addTo(map);\n  });\n\n};\n</code></pre>\n<p>In the javascript file, we&#39;ve added our mapbox token in order to access the mapbox API that allows us to access the mapbox basemap that we want to use. Your final result (with your own basemap of choice) should look something like this:</p>\n<p>{% include figure.html filename=&quot;webmap-08-exercise04.jpg&quot; caption=&quot;Exercise 04&quot; %}</p>\n<h3 id=\"exercise-5-custom-marker-icon\">Exercise 5: Custom Marker Icon</h3>\n<p>Add a custom leaf icon, as an example you can use <a href=\"/assets/mapping-with-python-leaflet/exercises/exercise05/leaf.png\">leaf.png</a>. Or use your own!</p>\n<p>In this exercise, we only need to edit the javascript file:</p>\n<pre><code class=\"language-javascript\">window.onload = function () {\n\n    L.mapbox.accessToken = &#39;YOURTOKENHERE&#39;;\n\n    var basemap = L.tileLayer(&#39;https://api.mapbox.com/v4/YOURLINKHERE/{z}/{x}/{y}.png?access_token=&#39; + L.mapbox.accessToken, {\n        attribution: &#39;&lt;a href=&quot;https://www.mapbox.com/tos/&quot;&gt;Mapbox&lt;/a&gt;&#39;\n      });\n\n    $.getJSON(&quot;stations.geojson&quot;, function(data) {\n\n    var geojson = L.geoJson(data, {\n\n//EDIT HERE\n      pointToLayer: function (feature, latlng) {\n       var smallIcon = L.icon({\n                          iconSize: [27, 27],\n                          iconAnchor: [13, 27],\n                          popupAnchor:  [1, -24],\n                          iconUrl: &#39;leaf.png&#39;\n                  });\n\n         return L.marker(latlng, {icon: smallIcon});\n        },\n\n      onEachFeature: function (feature, layer) {\n        layer.bindPopup(feature.properties.name + &#39;&lt;p&gt;&lt;b&gt; Line: &#39; + feature.properties.line + &#39;&lt;/b&gt;&lt;/p&gt;&#39;);\n      }\n\n    });\n\n\n    var map = L.map(&#39;my-map&#39;)\n    .fitBounds(geojson.getBounds());\n    //.setView([51.505,-0.09], 9);\n\n    basemap.addTo(map);\n    geojson.addTo(map);\n  });\n\n};\n</code></pre>\n<p>Marker icons are defined in leaflet using the <code>L.icon</code> object. We specify the image are using to replace our marker by using the property <code>iconUrl</code>. Make sure that you specify the proper path to your image.  We specified a few additional properties, such as iconSize (dimensions of the icon in pixels), iconAnchor (coordinates of the icon which will correspond to marker&#39;s location), popupAnchor (coordinates from which the popup should open relative to the iconAnchor). Check out the <a href=\"http://leafletjs.com/reference-1.2.0.html#icon\">Icon Leaflet documentation</a> more information about <code>L.Icon</code> properties.</p>\n<p>The final map should look something like this:</p>\n<p>{% include figure.html filename=&quot;webmap-09-exercise05.jpg&quot; caption=&quot;Exercise 05&quot; %}</p>\n<h2 id=\"next-steps\">Next Steps</h2>\n<p>Congratulations! You now have some hands-on experience geocoding using common Python data analysis libraries and working with one of the most popular Javascript web mapping libraries out there.</p>\n<p>If you want to explore other web mapping features with Leaflet, there are a number of additional <a href=\"http://leafletjs.com/plugins.html\">plugins</a> to try out. Of particular interest may be ability to create <a href=\"https://github.com/skeate/Leaflet.timeline\">time based visualizations</a> and do <a href=\"https://github.com/pa7/heatmap.js\">heat-mapping</a>.</p>\n<p>Also, check out the Programming Historian Lesson <a href=\"/lessons/using-javascript-to-create-maps\">Using Javascript to Create Maps of Correspondence</a> that goes in depth on how to analyze correspondence using geospatial software, and using some of the same tools as this lesson.</p>\n"}