{"metadata":{"title":"Creating and Viewing HTML Files with Python","layout":"lesson","date":"2012-07-17T00:00:00.000Z","authors":["William J. Turkel","Adam Crymble"],"reviewers":["Jim Clifford"],"editors":["Miriam Posner"],"difficulty":2,"exclude_from_check":["review-ticket"],"activity":"presenting","topics":["python","website"],"abstract":"Here you will learn how to create HTML files with Python scripts, and how to use Python to automatically open an HTML file in Firefox.","next":"output-data-as-html-file","previous":"counting-frequencies","series_total":"15 lessons","sequence":11,"python_warning":false,"redirect_from":"/lessons/creating-and-viewing-html-files-with-python","avatar_alt":"Child drawing on a tablet","doi":"10.46430/phen0004"},"html_body":"<p>{% include toc.html %}</p>\n<h2 id=\"lesson-goals\">Lesson Goals</h2>\n<p>This lesson uses Python to create and view an HTML file. If you write\nprograms that output HTML, you can use any browser to look at your\nresults. This is especially convenient if your program is automatically\ncreating hyperlinks or graphic entities like charts and diagrams.</p>\n<p>Here you will learn how to create HTML files with Python scripts, and\nhow to use Python to automatically open an HTML file in Firefox.</p>\n<h2 id=\"files-needed-for-this-lesson\">Files Needed For This Lesson</h2>\n<ul>\n<li><code>obo.py</code></li>\n</ul>\n<p>If you do not have these files from the previous lesson, you can\ndownload programming-historian-5, a <a href=\"/assets/python-lessons5.zip\">zip file from the previous lesson</a>.</p>\n<h2 id=\"creating-html-with-python\">Creating HTML with Python</h2>\n<p>At this point, we’ve started to learn how to use Python to download\nonline sources and extract information from them automatically. Remember\nthat our ultimate goal is to incorporate programming seamlessly into our\nresearch practice. In keeping with this goal, in this lesson and the\nnext, we will learn how to output data back as HTML. This has a few\nadvantages. First, by storing the information on our hard drive as an\nHTML file we can open it with Firefox and use <a href=\"http://zotero.org\">Zotero</a> to index and\nannotate it later. Second, there are a wide range of visualization\noptions for HTML which we can draw on later.</p>\n<p>If you have not done the <a href=\"http://www.w3schools.com/html/default.asp\">W3 Schools HTML tutorial</a> yet, take a few\nminutes to do it before continuing. We’re going to be creating an HTML\ndocument using Python, so you will have to know what an HTML document\nis!</p>\n<h2 id=\"hello-world-in-html-using-python\">&quot;Hello World&quot; in HTML using Python</h2>\n<p>One of the more powerful ideas in computer science is that a file that\nseems to contain code from one perspective can be seen as data from\nanother. It is possible, in other words, to write programs that\nmanipulate other programs. What we&#39;re going to do next is create an HTML\nfile that says &quot;Hello World!&quot; using Python. We will do this by storing\nHTML <em>tags</em> in a multiline Python <em>string</em> and saving the contents to a new\nfile. This file will be saved with an <code>.html</code> extension rather than a\n<code>.txt</code> extension.</p>\n<p>Typically an HTML file begins with a <a href=\"http://www.w3schools.com/tags/tag_doctype.asp\">doctype declaration</a>. You saw\nthis when you wrote an HTML &quot;Hello World&quot; program in an earlier lesson.\nTo make reading our code easier, we will omit the doctype in this\nexample. Recall a multi-line string is created by enclosing the text in\nthree quotation marks (see below).</p>\n<pre><code class=\"language-python\"># write-html.py\n\nf = open(&#39;helloworld.html&#39;,&#39;w&#39;)\n\nmessage = &quot;&quot;&quot;&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;&lt;p&gt;Hello World!&lt;/p&gt;&lt;/body&gt;\n&lt;/html&gt;&quot;&quot;&quot;\n\nf.write(message)\nf.close()\n</code></pre>\n<p>Save the above program as <code>write-html.py</code> and execute it. Use <em>File -&gt;\nOpen</em> in your chosen text editor to open <code>helloworld.html</code> to verify that\nyour program actually created the file. The content should look like\nthis:</p>\n<p>{% include figure.html filename=&quot;hello-world-html.png&quot; caption=&quot;HTML Source Generated by Python Program&quot; %}</p>\n<p>Now go to your Firefox browser and choose <em>File -&gt; New Tab</em>, go to the\ntab, and choose <em>File -&gt; Open File</em>. Select <code>helloworld.html</code>. You\nshould now be able to see your message in the browser. Take a moment to\nthink about this: you now have the ability to write a program which can\nautomatically create a webpage. There is no reason why you could not\nwrite a program to automatically create a whole website if you wanted\nto.</p>\n<h2 id=\"using-python-to-control-firefox\">Using Python to Control Firefox</h2>\n<p>We automatically created an HTML file, but then we had to leave our\neditor and go to Firefox to open the file in a new tab. Wouldn&#39;t it be\ncool to have our Python program include that final step? Type or copy\nthe code below and save it as <code>write-html-2.py</code>. When you execute it, it\nshould create your HTML file and then automatically open it in a new tab\nin Firefox. Sweet!</p>\n<h3 id=\"mac-instructions\">Mac Instructions</h3>\n<p>Mac users will have to specify to the precise location of the <code>.html</code>\nfile on their computer. To do this, locate the <code>programming-historian</code>\nfolder you created to do these tutorials, right-click it and select &quot;Get\nInfo&quot;.</p>\n<p>You can then cut and paste the file location listed after &quot;Where:&quot; and\nmake sure you include a trailing slash (/) to let the computer know you\nwant something inside the directory (rather than the directory itself).</p>\n<pre><code class=\"language-python\"># write-html-2-mac.py\nimport webbrowser\n\nf = open(&#39;helloworld.html&#39;,&#39;w&#39;)\n\nmessage = &quot;&quot;&quot;&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;&lt;p&gt;Hello World!&lt;/p&gt;&lt;/body&gt;\n&lt;/html&gt;&quot;&quot;&quot;\n\nf.write(message)\nf.close()\n\n#Change path to reflect file location\nfilename = &#39;file:///Users/username/Desktop/programming-historian/&#39; + &#39;helloworld.html&#39;\nwebbrowser.open_new_tab(filename)\n</code></pre>\n<p>If you&#39;re getting a &quot;File not found&quot; error you haven&#39;t changed the\nfilename path correctly.</p>\n<h3 id=\"windows-instructions\">Windows Instructions</h3>\n<pre><code class=\"language-python\"># write-html-2-windows.py\n\nimport webbrowser\n\nf = open(&#39;helloworld.html&#39;,&#39;w&#39;)\n\nmessage = &quot;&quot;&quot;&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;&lt;p&gt;Hello World!&lt;/p&gt;&lt;/body&gt;\n&lt;/html&gt;&quot;&quot;&quot;\n\nf.write(message)\nf.close()\n\nwebbrowser.open_new_tab(&#39;helloworld.html&#39;)\n</code></pre>\n<p>***</p>\n<p>Not only have you written a Python program that can write simple HTML,\nbut you&#39;ve now controlled your Firefox browser using Python. In the next\nlesson, we turn to outputting the data that we have collected as an HTML\nfile.</p>\n<h2 id=\"suggested-readings\">Suggested Readings</h2>\n<ul>\n<li>Lutz, Learning Python<ul>\n<li>Re-read and review Chs. 1-17</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"code-syncing\">Code Syncing</h2>\n<p>To follow along with future lessons it is important that you have the\nright files and programs in your &quot;programming-historian&quot; directory. At\nthe end of each lesson in the series you can download the &quot;programming-historian&quot; zip\nfile to make sure you have the correct code. If you are following along\nwith the Mac / Linux version you may have to open the <code>obo.py</code> file and\nchange &quot;file:///Users/username/Desktop/programming-historian/&quot; to the\npath to the directory on your own computer.</p>\n<ul>\n<li>python-lessons6.zip <a href=\"/assets/python-lessons6.zip\">zip sync</a></li>\n</ul>\n"}