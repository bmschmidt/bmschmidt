{"metadata":{"title":"Output Data as an HTML File with Python","layout":"lesson","date":"2012-07-17T00:00:00.000Z","authors":["William J. Turkel","Adam Crymble"],"reviewers":["Jim Clifford","Frederik Elwert"],"editors":["Miriam Posner"],"difficulty":2,"exclude_from_check":["review-ticket"],"activity":"transforming","topics":["python","website"],"abstract":"This lesson takes the frequency pairs created in the 'Counting Frequencies' lesson and outputs them to an HTML file.","next":"keywords-in-context-using-n-grams","previous":"creating-and-viewing-html-files-with-python","series_total":"15 lessons","sequence":12,"python_warning":false,"redirect_from":"/lessons/output-data-as-html-file","avatar_alt":"A woman wearing an elaborate dress accompanied by two putti","doi":"10.46430/phen0015"},"html_body":"<p>{% include toc.html %}</p>\n<h2 id=\"lesson-goals\">Lesson Goals</h2>\n<p>This lesson takes the frequency pairs created in <a href=\"/lessons/counting-frequencies\">Counting\nFrequencies</a> and outputs them to an HTML file.</p>\n<p>Here you will learn how to output data as an HTML file using Python. You\nwill also learn about string formatting. The final result is an HTML\nfile that shows the keywords found in the original source in order of\ndescending frequency, along with the number of times that each keyword\nappears.</p>\n<h2 id=\"files-needed-for-this-lesson\">Files Needed For This Lesson</h2>\n<ul>\n<li><code>obo.py</code></li>\n</ul>\n<p>If you do not have these files from the previous lesson, you can\ndownload programming-historian-6, a <a href=\"/assets/python-lessons6.zip\">zip file from the previous lesson</a></p>\n<h2 id=\"building-an-html-wrapper\">Building an HTML wrapper</h2>\n<p>In the previous lesson, you learned how to embed the message &quot;Hello\nWorld!&quot; in HTML tags, write the result to a file and open it\nautomatically in the browser. A program that puts formatting codes\naround something so that it can be used by another program is sometimes\ncalled a <em>wrapper</em>. What we&#39;re going to do now is develop an HTML wrapper\nfor the output of our code that computes word frequencies. We&#39;re also\ngoing to add some helpful, dynamic <em>metadata</em> to supplement the frequency\ndata collected in <a href=\"/lessons/counting-frequencies\">Counting Frequencies</a>.</p>\n<h2 id=\"metadata\">Metadata</h2>\n<p>The distinction between data and metadata is crucial to information\nscience. Metadata are data about data. This concept should already be\nvery familiar to you, even if you haven&#39;t heard the term before.\nConsider a traditional book. If we take the text of the book to be the\ndata, there are a number of other characteristics which are associated\nwith that text, but which may or may not be explicitly printed in the\nbook. The title of the work, the author, the publisher, and the place\nand date of publication are metadata that are typically printed in the\nwork. The place and date of writing, the name of the copy editor,\nLibrary of Congress cataloging data, and the name of the font used to\ntypeset the book are sometimes printed in it. The person who purchased a\nparticular copy may or may not write their name in the book. If the book\nbelongs in the collection of a library, that library will keep\nadditional metadata, only some of which will be physically attached to\nthe book. The record of borrowing, for example, is usually kept in some\nkind of database and linked to the book by a unique identifier.\nLibraries, archives and museums all have elaborate systems to generate\nand keep track of metadata.</p>\n<p>When you&#39;re working with digital data, it is a good idea to incorporate\nmetadata into your own files whenever possible. We will now develop a\nfew basic strategies for making our data files <em>self-documenting</em>. In our\nwrapper, we want to include dynamic information about the file, such as\nthe time and date it was created, as well as an HTML title that is\nrelevant to the file. In this case we could just give it a name\nourselves, but when we start working with multiple files, automatically\ncreating self-documenting files will save a lot of time, so weâ€™ll\npractice now. And for that, we&#39;ll have to learn to take advantage of a\nfew more powerful string formatting options.</p>\n<h2 id=\"python-string-formatting\">Python string formatting</h2>\n<p>Python includes a special formatting operator that allows you to insert\none string into another one. It is represented by a percent sign\nfollowed by an &quot;s&quot;. Open a Python shell and try the following examples.</p>\n<pre><code class=\"language-python\">\nframe = &#39;This fruit is a %s&#39;\nprint(frame)\n-&gt; This fruit is a %s\n\nprint(frame % &#39;banana&#39;)\n-&gt; This fruit is a banana\n\nprint(frame % &#39;pear&#39;)\n-&gt; This fruit is a pear\n</code></pre>\n<p>There is also a form which allows you to interpolate a list of strings\ninto another one.</p>\n<pre><code class=\"language-python\">\nframe2 = &#39;These are %s, those are %s&#39;\nprint(frame2)\n-&gt; These are %s, those are %s\n\nprint(frame2 % (&#39;bananas&#39;, &#39;pears&#39;))\n-&gt; These are bananas, those are pears\n</code></pre>\n<p>In these examples, a <code>%s</code> in one string indicates that another string is\ngoing to be embedded at that point. There are a range of other string\nformatting codes, most of which allow you to embed numbers in strings in\nvarious formats, like <code>%i</code> for integer (eg. 1, 2, 3), <code>%f</code> for\nfloating-point decimal (eg. 3.023, 4.59, 1.0), and so on. Using this\nmethod we can input information that is unique to the file.</p>\n<h2 id=\"self-documenting-data-file\">Self-documenting data file</h2>\n<p>Let&#39;s bundle some of the code that we&#39;ve already written into functions.\nOne of these will take a URL and return a string of lowercase text from\nthe web page. Copy this code into the <code>obo.py</code> module.</p>\n<pre><code class=\"language-python\"># Given a URL, return string of lowercase text from page.\n\ndef webPageToText(url):\n    import urllib.request, urllib.error, urllib.parse\n    response = urllib.request.urlopen(url)\n    html = response.read().decode(&#39;UTF-8&#39;)\n    text = stripTags(html).lower()\n    return text\n</code></pre>\n<p>We&#39;re also going to want a function that takes a string of any sort and\nmakes it the body of an HTML file which is opened automatically in\nFirefox. This function should include some basic metadata, like the time\nand date that it was created and the name of the program that created\nit. Study the following code carefully, then copy it into the <code>obo.py</code>\nmodule.</p>\n<h3 id=\"mac-instructions\">Mac Instructions</h3>\n<p>If you are using a Mac, make sure you include the proper file path in\nthe filename variable on the 2nd last line to reflect where you&#39;re\nsaving your files.</p>\n<pre><code class=\"language-python\"># Given name of calling program, a url and a string to wrap,\n# output string in html body with basic metadata and open in Firefox tab.\n\ndef wrapStringInHTMLMac(program, url, body):\n    import datetime\n    from webbrowser import open_new_tab\n\n    now = datetime.datetime.today().strftime(&quot;%Y%m%d-%H%M%S&quot;)\n    filename = program + &#39;.html&#39;\n    f = open(filename,&#39;w&#39;)\n\n    wrapper = &quot;&quot;&quot;&lt;html&gt;\n    &lt;head&gt;\n    &lt;title&gt;%s output - %s&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;&lt;p&gt;URL: &lt;a href=\\&quot;%s\\&quot;&gt;%s&lt;/a&gt;&lt;/p&gt;&lt;p&gt;%s&lt;/p&gt;&lt;/body&gt;\n    &lt;/html&gt;&quot;&quot;&quot;\n\n    whole = wrapper % (program, now, url, url, body)\n    f.write(whole)\n    f.close()\n\n    #Change the filepath variable below to match the location of your directory\n    filename = &#39;file:///Users/username/Desktop/programming-historian/&#39; + filename\n\n    open_new_tab(filename)\n</code></pre>\n<h3 id=\"windows-instructions\">Windows Instructions</h3>\n<pre><code class=\"language-python\"># Given name of calling program, a url and a string to wrap,\n# output string in html body with basic metadata\n# and open in Firefox tab.\n\ndef wrapStringInHTMLWindows(program, url, body):\n    import datetime\n    from webbrowser import open_new_tab\n\n    now = datetime.datetime.today().strftime(&quot;%Y%m%d-%H%M%S&quot;)\n\n    filename = program + &#39;.html&#39;\n    f = open(filename,&#39;w&#39;)\n\n    wrapper = &quot;&quot;&quot;&lt;html&gt;\n    &lt;head&gt;\n    &lt;title&gt;%s output - %s&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;&lt;p&gt;URL: &lt;a href=\\&quot;%s\\&quot;&gt;%s&lt;/a&gt;&lt;/p&gt;&lt;p&gt;%s&lt;/p&gt;&lt;/body&gt;\n    &lt;/html&gt;&quot;&quot;&quot;\n\n    whole = wrapper % (program, now, url, url, body)\n    f.write(whole)\n    f.close()\n\n    open_new_tab(filename)\n</code></pre>\n<p>***</p>\n<p>Note that this function makes use of the string formatting operator\nabout which we just learned. If you are still having trouble with this\nidea, take a look at the HTML file that opened in your new Firefox tab\nand you should see how this worked. If you&#39;re still stuck, take a look\nat the</p>\n<pre><code>URL: http://www.oldbaileyonline.org/browse.jsp?id=t17800628-33&amp;div=t17800628-33\n</code></pre>\n<p>in the HTML file and trace back how the program knew to put the URL value\nthere.</p>\n<p>The function also calls the Python <code>datetime</code> library to determine the\ncurrent time and date. Like the string formatting operator <code>%s</code>, this\nlibrary uses the <code>%</code> as replacements for values. In this case, the <code>%Y %m %d %H %M %S</code> represents year, month, date, hour, minute and second\nrespectively. Unlike the <code>%s</code>, the program will determine the value of\nthese variables for you using your computer&#39;s clock. It is important to\nrecognize this difference.</p>\n<p>This date metadata, along with the name of the program that called the\nfunction, is stored in the HTML title tag. The HTML file that is created\nhas the same name as the Python program that creates it, but with a\n<code>.html</code> extension rather than a <code>.py</code> one.</p>\n<h2 id=\"putting-it-all-together\">Putting it all together</h2>\n<p>Now we can create another version of our program to compute frequencies.\nInstead of sending its output to a text file or an output window, it\nsends the output to an HTML file which is opened in a new Firefox tab.\nFrom there, the program&#39;s output can be added easily as bibliographic\nentries to Zotero. Type or copy the following code into your text\neditor, save it as <code>html-to-freq-3.py</code> and execute it, to confirm that\nit works as expected.</p>\n<p>Use either obo.wrapStringInHTMLMac() or obo.wrapStringInHTMLWindows() as appropriate\nfor your system.</p>\n<pre><code class=\"language-python\"># html-to-freq-3.py\nimport obo\n\n# create sorted dictionary of word-frequency pairs\nurl = &#39;http://www.oldbaileyonline.org/browse.jsp?id=t17800628-33&amp;div=t17800628-33&#39;\ntext = obo.webPageToText(url)\nfullwordlist = obo.stripNonAlphaNum(text)\nwordlist = obo.removeStopwords(fullwordlist, obo.stopwords)\ndictionary = obo.wordListToFreqDict(wordlist)\nsorteddict = obo.sortFreqDict(dictionary)\n\n# compile dictionary into string and wrap with HTML\noutstring = &quot;&quot;\nfor s in sorteddict:\n    outstring += str(s)\n    outstring += &quot;&lt;br /&gt;&quot;\nobo.wrapStringInHTMLMac(&quot;html-to-freq-3&quot;, url, outstring)\n</code></pre>\n<p>Note that we interspersed our word-frequency pairs with the HTML break\ntag <code>&lt;br\\&gt;</code>, which acts as a <em>newline</em>. If all went well, you should see\nthe same word frequencies that you computed in the last section, this\ntime in your browser window.</p>\n<h3 id=\"suggested-readings\">Suggested Readings</h3>\n<ul>\n<li>Lutz, Learning Python<ul>\n<li>Re-read and review Chs. 1-17</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"code-syncing\">Code Syncing</h3>\n<p>To follow along with future lessons it is important that you have the\nright files and programs in your &quot;programming-historian&quot; directory. At\nthe end of each chapter you can download the &quot;programming-historian&quot; zip\nfile to make sure you have the correct code. If you are following along\nwith the Mac / Linux version you may have to open the <code>obo.py</code> file and\nchange &quot;file:///Users/username/Desktop/programming-historian/&quot; to the\npath to the directory on your own computer.</p>\n<ul>\n<li>python-lessons7.zip <a href=\"/assets/python-lessons7.zip\">zip sync</a></li>\n</ul>\n"}