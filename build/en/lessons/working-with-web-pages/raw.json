{"metadata":{"title":"Downloading Web Pages with Python","layout":"lesson","date":"2012-07-17T00:00:00.000Z","authors":["William J. Turkel","Adam Crymble"],"reviewers":["Jim Clifford","Frederik Elwert"],"editors":["Miriam Posner"],"difficulty":2,"exclude_from_check":["review-ticket"],"activity":"acquiring","topics":["python"],"abstract":"This lesson introduces Uniform Resource Locators (URLs) and explains how to use Python to download and save the contents of a web page to your local hard drive.","next":"manipulating-strings-in-python","previous":"code-reuse-and-modularity","series_total":"15 lessons","sequence":5,"categories":["lessons","python","original-ph"],"python_warning":false,"redirect_from":"/lessons/working-with-web-pages","avatar_alt":"A tall man next to a short woman","doi":"10.46430/phen0021"},"html_body":"<p>{% include toc.html %}</p>\n<h2 id=\"lesson-goals\">Lesson Goals</h2>\n<p>This lesson introduces <em>Uniform Resource Locators</em> (URLs) and explains how\nto use Python to download and save the contents of a web page to your\nlocal hard drive.</p>\n<h3 id=\"about-urls\">About URLs</h3>\n<p>A <em>web page</em> is a file that is stored on another computer, a machine known\nas a <em>web server</em>. When you &quot;go to&quot; a web page, what is actually happening\nis that your computer, (the <em>client</em>) sends a request to the server (the\n<em>host</em>) out over the network, and the server replies by sending a copy of\nthe page back to your machine. One way to get to a web page with your\nbrowser is to follow a link from somewhere else. You also have the\nability, of course, to paste or type a Uniform Resource Locator (URL)\ndirectly into your browser. The URL tells your browser where to find an\nonline resource by specifying the server, directory and name of the file\nto be retrieved, as well as the kind of <em>protocol</em> that the server and\nyour browser will agree to use while exchanging information (like HTTP,\nthe <em>Hypertext Transfer Protocol</em>). The basic structure of a URL is</p>\n<pre><code>protocol://host:port/path?query\n</code></pre>\n<p>Let&#39;s look at a few examples.</p>\n<pre><code class=\"language-xml\">http://oldbaileyonline.org\n</code></pre>\n<p>The most basic kind of URL simply specifies the protocol and host. If\nyou give this URL to your browser, it will return the main page of The\n<a href=\"http://www.oldbaileyonline.org/\">Old Bailey Online</a> website. The default assumption is that the main\npage in a given directory will be named index, usually <code>index.html</code>.</p>\n<p>The URL can also include an optional <em>port number</em>. Without getting into\ntoo much detail, the network protocol that underlies the\nexchange of information on the Internet allows computers to connect in\ndifferent ways. Port numbers are used to distinguish these different\nkinds of connection. Since the default port for HTTP is 80, the\nfollowing URL is equivalent to the previous one.</p>\n<pre><code class=\"language-xml\">http://oldbaileyonline.org:80\n</code></pre>\n<p>As you know, there are usually many web pages on a given website. These\nare stored in directories on the server, and you can specify the path to\na particular page. The &quot;About&quot; page for <em>The Old Bailey Online</em> has the\nfollowing URL.</p>\n<pre><code class=\"language-xml\">http://oldbaileyonline.org/static/Project.jsp\n</code></pre>\n<p>Finally, some web pages allow you to enter queries. <em>The Old Bailey\nOnline</em> website, for example, is laid out in such a way that you can\nrequest a particular page within it by using a <em>query string</em>. The\nfollowing URL will take you to a search results page for criminal record\ntrials containing the word &quot;arsenic&quot;.</p>\n<pre><code class=\"language-xml\">https://www.oldbaileyonline.org/search.jsp?form=searchHomePage&amp;_divs_fulltext=arsenic&amp;kwparse=and&amp;_persNames_surname=&amp;_persNames_given=&amp;_persNames_alias=&amp;_offences_offenceCategory_offenceSubcategory=&amp;_verdicts_verdictCategory_verdictSubcategory=&amp;_punishments_punishmentCategory_punishmentSubcategory=&amp;_divs_div0Type_div1Type=&amp;fromMonth=&amp;fromYear=&amp;toMonth=&amp;toYear=&amp;ref=&amp;submit.x=0&amp;submit.y=0\n</code></pre>\n<p>The snippet after the &quot;?&quot; represents the query. You can learn more about\nbuilding queries in <a href=\"/lessons/downloading-multiple-records-using-query-strings\">Downloading Multiple Records Using Query\nStrings</a>.</p>\n<h2 id=\"opening-urls-with-python\">Opening URLs with Python</h2>\n<p>As a digital historian you will often find yourself wanting to use data\nheld in scholarly databases online. To get this data you could open URLs\none at a time and copy and paste their contents to a text file, or you\ncan use Python to automatically harvest and process webpages. To do\nthis, you&#39;re going to need to be able to open URLs with your own\nprograms. The Python language includes a number of standard ways to do\nthis.</p>\n<p>As an example, let&#39;s work with the kind of file that you might encounter\nwhile doing historical research. Say you&#39;re interested in race relations\nin eighteenth century Britain. &#39;The Old Bailey Online&#39; (OBO) is a rich resource that provides trial transcripts from\n1674 to 1913 and is one good place to seek sources.</p>\n<p>{% include figure.html filename=&quot;old-bailey.png&quot; caption=&quot;The Old Bailey Online Homepage&quot; %}</p>\n<p>For this example, we will be using the trial transcript of Benjamin\nBowsey, a “black moor” who was convicted of breaking the peace during\nthe <a href=\"http://en.wikipedia.org/wiki/Gordon_Riots\">Gordon Riots</a> of 1780. The URL for the entry is</p>\n<pre><code class=\"language-xml\">http://www.oldbaileyonline.org/browse.jsp?id=t17800628-33&amp;div=t17800628-33\n</code></pre>\n<p>By studying the URL we can learn a few things. First, The OBO is written\nin JSP (<em>JavaServer Pages</em>, a web programming language which outputs\nHTML), and it’s possible to retrieve individual trial entries by making\nuse of the query string. Each is apparently given a unique ID number\n(<em>id=t</em> in the URL), built from the date of the trial session in the\nformat (<em>YYYYMMDD</em>) and the trial number from within that court session,\nin this case: <em>33</em>. If you change the two instances of <code>33</code> to <code>34</code> in\nyour browser and press Enter, you should be taken to the next trial.\nUnfortunately, not all websites have such readable and reliable URLs.</p>\n<p>{% include figure.html filename=&quot;bowsey-trial-page.png&quot; caption=&quot;Trial Transcript Page of Benjamin Bowsey, 1780&quot; %}</p>\n<p>Spend a few minutes looking at Benjamin Bowsey’s trial page. Here we are\nnot so much interested in what the transcript says, but what features\nthe page has. Notice the <a href=\"http://www.oldbaileyonline.org/browse.jsp?foo=bar&amp;path=sessionsPapers/17800628.xml&amp;div=t17800628-33&amp;xml=yes\">View as XML</a> link at the bottom that takes\nyou to a heavily marked up version of the text which may be useful to\ncertain types of research. You can also look at a <a href=\"http://www.oldbaileyonline.org/images.jsp?doc=178006280084\">scan of the original\ndocument</a>, which was transcribed to make this resource.</p>\n<p>Now let&#39;s try opening the page using Python. Copy the following program\ninto Komodo Edit and save it as <code>open-webpage.py</code>. When you execute the\nprogram, it will <code>open</code> the trial file, <code>read</code> its contents into a Python\nstring called webContent and then <code>print</code> the first three hundred\ncharacters of the string to the &quot;Command Output&quot; pane. Use the\n<code>View -&gt; Web Developer -&gt; View Page Source</code> command in Firefox to verify\nthat the HTML source of the page is the same as the source that your\nprogram retrieved. Each browser has a different shortcut key to open the\npage source. In Firefox on PC it is <code>CTRL+u</code>. If you cannot find it on\nyour browser, try using a search engine to find where it is. (See the\nPython library reference to learn more about <a href=\"https://docs.python.org/3/library/urllib.html?highlight=urllib\">urllib</a>.)</p>\n<pre><code class=\"language-python\"># open-webpage.py\n\nimport urllib.request, urllib.error, urllib.parse\n\nurl = &#39;http://www.oldbaileyonline.org/browse.jsp?id=t17800628-33&amp;div=t17800628-33&#39;\n\nresponse = urllib.request.urlopen(url)\nwebContent = response.read().decode(&#39;UTF-8&#39;)\n\nprint(webContent[0:300])\n</code></pre>\n<p>These five lines of code achieve an awful lot very quickly. Let us take\na moment to make sure that everything is clear and that you can\nrecognize the building blocks that allow us to make this program do what\nwe want it to do.</p>\n<p><em>url</em>, <em>response</em>, and <em>webContent</em> are all variables that we have named\nourselves.</p>\n<p><em>url</em> holds the URL of the web page that we want to download. In this\ncase, it is the trial of Benjamin Bowsey.</p>\n<p>On the following line, we call the function <code>urlopen</code>, which is stored in\na Python module named <code>urllib.py</code>, and we have asked that function to\nopen the website found at the URL we just specified. We then saved the\nresult of that process into a variable named <em>response</em>. That variable now\ncontains an open version of the requested website.</p>\n<p>We then use the <code>read</code> method, which we used earlier, to copy the contents\nof that open webpage into a new variable named <em>webContent</em>.</p>\n<p>Make sure you can pick out the variables (there are 3 of them), the\nmodules (1), the methods (2), and the parameters (1) before you move on.</p>\n<p>In the resulting output, you will notice a little bit of HTML markup:</p>\n<pre><code class=\"language-xml\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;title&gt;Browse - Central Criminal Court&lt;/title&gt;\n    &lt;meta http-equiv=&quot;content-type&quot; content=\n</code></pre>\n<p>The content of the trial itself is much further down the page. What we\nsee here is the HTML code at the top of the document. This is not quite\nwhat we need for historical research, but don&#39;t worry; you\nwill soon learn how to remove that excess markup and get the content you are after.</p>\n<h2 id=\"saving-a-local-copy-of-a-web-page\">Saving a Local Copy of a Web Page</h2>\n<p>Given what you already know about writing to files, it is quite easy to\nmodify the above program so that it writes the contents of the\n<em>webContent</em> string to a local file on our computer rather than to the\n&quot;Command Output&quot; pane. Copy the following program into Komodo Edit, save\nit as <code>save-webpage.py</code> and execute it. Using the <code>File -&gt; Open File</code>\ncommand in Firefox, open the file on your hard drive that it creates\n(<code>obo-t17800628-33.html</code>) to confirm that your saved copy is the same as\nthe online copy.</p>\n<pre><code class=\"language-python\"># save-webpage.py\n\nimport urllib.request, urllib.error, urllib.parse\n\nurl = &#39;http://www.oldbaileyonline.org/browse.jsp?id=t17800628-33&amp;div=t17800628-33&#39;\n\nresponse = urllib.request.urlopen(url)\nwebContent = response.read().decode(&#39;UTF-8&#39;)\n\nf = open(&#39;obo-t17800628-33.html&#39;, &#39;w&#39;)\nf.write(webContent)\nf.close\n</code></pre>\n<p>So, if you can save a single file this easily, could you write a program\nto download a bunch of files? Could you step through trial IDs, for\nexample, and make your own copies of a whole bunch of them? Yep. You can learn\nhow to do that in <a href=\"/lessons/downloading-multiple-records-using-query-strings\">Downloading Multiple Files using Query Strings</a>,\nwhich we recommend after you have completed the introductory lessons in this series.</p>\n<h2 id=\"suggested-readings\">Suggested Readings</h2>\n<ul>\n<li>Lutz, Mark. “Ch. 4: Introducing Python Object Types”, <em>Learning\nPython</em> (O’Reilly, 1999).</li>\n</ul>\n<h3 id=\"code-syncing\">Code Syncing</h3>\n<p>To follow along with future lessons it is important that you have the\nright files and programs in your &quot;programming-historian&quot; directory. At\nthe end of each lesson you can download the &quot;programming-historian&quot; zip\nfile to make sure you have the correct code.</p>\n<ul>\n<li>programming-historian-1 (<a href=\"/assets/python-lessons1.zip\">zip</a>)</li>\n</ul>\n"}