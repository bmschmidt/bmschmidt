{"metadata":{"title":"Keywords in Context (Using n-grams) with Python","layout":"lesson","date":"2012-07-17T00:00:00.000Z","authors":["William J. Turkel","Adam Crymble"],"reviewers":["Jim Clifford","Frederik Elwert"],"editors":["Miriam Posner"],"difficulty":2,"exclude_from_check":["review-ticket"],"activity":"presenting","topics":["python"],"abstract":"This lesson takes the frequency pairs collected in \"Counting Frequencies\" and outputs them in HTML.\n","next":"output-keywords-in-context-in-html-file","previous":"output-data-as-html-file","series_total":"15 lessons","sequence":13,"python_warning":false,"redirect_from":"/lessons/keywords-in-context-using-n-grams","avatar_alt":"A figure dropping two bottles of alcohol","doi":"10.46430/phen0010"},"html_body":"<p>{% include toc.html %}</p>\n<h2 id=\"lesson-goals\">Lesson Goals</h2>\n<p>Like in <a href=\"/lessons/output-data-as-html-file\">Output Data as HTML File</a>, this lesson takes the frequency\npairs collected in <a href=\"/lessons/counting-frequencies\">Counting Frequencies</a> and outputs them in HTML.\nThis time the focus is on keywords in context (KWIC) which creates\nn-grams from the original document content – in this case a trial\ntranscript from the <em>Old Bailey Online</em>. You can use your program to\nselect a keyword and the computer will output all instances of that\nkeyword, along with the words to the left and right of it, making it\neasy to see at a glance how the keyword is used.</p>\n<p>Once the KWICs have been created, they are then wrapped in HTML and sent\nto the browser where they can be viewed. This reinforces what was\nlearned in <a href=\"output-data-as-html-file\">Output Data as HTML File</a>, opting for a slightly\ndifferent output.</p>\n<p>At the end of this lesson, you will be able to extract all possible\nn-grams from the text. In the next lesson, you will be learn how to\noutput all of the n-grams of a given keyword in a document downloaded\nfrom the Internet, and display them clearly in your browser window.</p>\n<h2 id=\"files-needed-for-this-lesson\">Files Needed For This Lesson</h2>\n<ul>\n<li><code>obo.py</code></li>\n</ul>\n<p>If you do not have these files from the previous lesson, you can\ndownload programming-historian-7, a <a href=\"/assets/python-lessons7.zip\">zip file from the previous lesson</a></p>\n<h2 id=\"from-text-to-n-grams-to-kwic\">From Text to N-Grams to KWIC</h2>\n<p>Now that you know how to harvest the textual content of a web page\nautomatically with Python, and have begun to use strings, lists and\ndictionaries for text processing, there are many other things that you\ncan do with the text besides counting frequencies. People who study the\nstatistical properties of language have found that studying linear\nsequences of linguistic units can tell us a lot about a text. These\nlinear sequences are known as <em>bigrams</em> (2 units), <em>trigrams</em> (3 units), or\nmore generally as <em>n-grams</em>.</p>\n<p>You have probably seen n-grams many times before. They are commonly used\non search results pages to give you a preview of where your keyword\nappears in a document and what the surrounding context of the keyword\nis. This application of n-grams is known as keywords in context (often\nabbreviated as KWIC). For example, if the string in question were &quot;it\nwas the best of times it was the worst of times it was the age of wisdom\nit was the age of foolishness&quot; then a 7-gram for the keyword &quot;wisdom&quot;\nwould be:</p>\n<pre><code>the age of wisdom it was the\n</code></pre>\n<p>An n-gram could contain any type of linguistic unit you like. For\nhistorians you are most likely to use characters as in the bigram &quot;qu&quot;\nor words as in the trigram &quot;the dog barked&quot;; however, you could also use\nphonemes, syllables, or any number of other units depending on your\nresearch question.</p>\n<p>What we&#39;re going to do next is develop the ability to display KWIC for\nany keyword in a body of text, showing it in the context of a fixed\nnumber of words on either side. As before, we will wrap the output so\nthat it can be viewed in Firefox and added easily to Zotero.</p>\n<h2 id=\"from-text-to-n-grams\">From Text to N-grams</h2>\n<p>Since we want to work with words as opposed to characters or phonemes,\nit will be much easier to create n-grams using a list of words rather\nthan strings. As you already know, Python can easily turn a string into\na list using the <code>split</code> operation. Once split it becomes simple to\nretrieve a subsequence of adjacent words in the list by using a <em>slice</em>,\nrepresented as two indexes separated by a colon. This was introduced\nwhen working with strings in <a href=\"/lessons/manipulating-strings-in-python\">Manipulating Strings in Python</a>.</p>\n<pre><code class=\"language-python\">message9 = &quot;Hello World&quot;\nmessage9a = message9[1:8]\nprint(message9a)\n-&gt; ello Wo\n</code></pre>\n<p>However, we can also use this technique to take a predetermined number\nof neighbouring words from the list with very little effort. Study the\nfollowing examples, which you can try out in a Python Shell.</p>\n<pre><code class=\"language-python\">wordstring = &#39;it was the best of times it was the worst of times &#39;\nwordstring += &#39;it was the age of wisdom it was the age of foolishness&#39;\nwordlist = wordstring.split()\n\nprint(wordlist[0:4])\n-&gt; [&#39;it&#39;, &#39;was&#39;, &#39;the&#39;, &#39;best&#39;]\n\nprint(wordlist[0:6])\n-&gt; [&#39;it&#39;, &#39;was&#39;, &#39;the&#39;, &#39;best&#39;, &#39;of&#39;, &#39;times&#39;]\n\nprint(wordlist[6:10])\n-&gt; [&#39;it&#39;, &#39;was&#39;, &#39;the&#39;, &#39;worst&#39;]\n\nprint(wordlist[0:12])\n-&gt; [&#39;it&#39;, &#39;was&#39;, &#39;the&#39;, &#39;best&#39;, &#39;of&#39;, &#39;times&#39;, &#39;it&#39;, &#39;was&#39;, &#39;the&#39;, &#39;worst&#39;, &#39;of&#39;, &#39;times&#39;]\n\nprint(wordlist[:12])\n-&gt; [&#39;it&#39;, &#39;was&#39;, &#39;the&#39;, &#39;best&#39;, &#39;of&#39;, &#39;times&#39;, &#39;it&#39;, &#39;was&#39;, &#39;the&#39;, &#39;worst&#39;, &#39;of&#39;, &#39;times&#39;]\n\nprint(wordlist[12:])\n-&gt; [&#39;it&#39;, &#39;was&#39;, &#39;the&#39;, &#39;age&#39;, &#39;of&#39;, &#39;wisdom&#39;, &#39;it&#39;, &#39;was&#39;, &#39;the&#39;, &#39;age&#39;, &#39;of&#39;, &#39;foolishness&#39;]\n</code></pre>\n<p>In these examples we have used the <code>slice</code> method to return parts of our\nlist. Note that there are two sides to the colon in a slice. If the\nright of the colon is left blank as in the last example above, the\nprogram knows to automatically continue to the end – in this case, to\nthe end of the list. The second last example above shows that we can\nstart at the beginning by leaving the space before the colon empty. This\nis a handy shortcut available to keep your code shorter.</p>\n<p>You can also use variables to represent the index positions. Used in\nconjunction with a <code>for</code> loop, you could easily create every possible\nn-gram of your list. The following example returns all 5-grams of our\nstring from the example above.</p>\n<pre><code class=\"language-python\">i = 0\nfor items in wordlist:\n    print(wordlist[i: i+5])\n    i += 1\n</code></pre>\n<p>Keeping with our modular approach, we will create a function and save it\nto the <code>obo.py</code> module that can create n-grams for us. Study and type or\ncopy the following code:</p>\n<pre><code class=\"language-python\"># Given a list of words and a number n, return a list\n# of n-grams.\n\ndef getNGrams(wordlist, n):\n    return [wordlist[i:i+n] for i in range(len(wordlist)-(n-1))]\n</code></pre>\n<p>This function may look a little confusing as there is a lot going on\nhere in not very much code. It uses a <em>list comprehension</em> to keep the\ncode compact. The following example does exactly the same thing:</p>\n<pre><code class=\"language-python\">def getNGrams(wordlist, n):\n    ngrams = []\n    for i in range(len(wordlist)-(n-1)):\n        ngrams.append(wordlist[i:i+n])\n    return ngrams\n</code></pre>\n<p>Use whichever makes most sense to you.</p>\n<p>A concept that may still be confusing to you are the two function\narguments. Notice that our function has two variable names in the\nparentheses after its name when we declared it: <em>wordlist</em>, <em>n</em>. These two\nvariables are the function arguments. When you call (run) this function,\nthese variables will be used by the function for its solution. Without\nthese arguments there is not enough information to do the calculations.\nIn this case, the two pieces of information are the list of words you\nwant to turn into n-grams (wordlist), and the number of words you want\nin each n-gram (n). For the function to work it needs both, so you call\nit in like this (save the following as <code>useGetNGrams.py</code> and run):</p>\n<pre><code class=\"language-python\">#useGetNGrams.py\n\nimport obo\n\nwordstring = &#39;it was the best of times it was the worst of times &#39;\nwordstring += &#39;it was the age of wisdom it was the age of foolishness&#39;\nallMyWords = wordstring.split()\n\nprint(obo.getNGrams(allMyWords, 5))\n</code></pre>\n<p>Notice that the arguments you enter do not have to have the same names\nas the arguments named in the function declaration. Python knows to use\n<em>allMyWords</em> everywhere in the function that <em>wordlist</em> appears, since this\nis given as the first argument. Likewise, all instances of <em>n</em> will be\nreplaced by the integer 5 in this case. Try changing the 5 to a string,\nsuch as &quot;elephants&quot; and see what happens when you run your program. Note\nthat because <em>n</em> is being used as an integer, you have to ensure the\nargument sent is also an integer. The same is true for strings, floats\nor any other variable type sent as an argument.</p>\n<p>You can also use a Python shell to play around with the code to get a\nbetter understanding of how it works. Paste the function declaration for\n<em>getNGrams</em> (either of the two functions above) into your Python shell.</p>\n<pre><code class=\"language-python\">test1 = &#39;here are four words&#39;\ntest2 = &#39;this test sentence has eight words in it&#39;\n\ngetNGrams(test1.split(), 5)\n-&gt; []\n\ngetNGrams(test2.split(), 5)\n-&gt; [[&#39;this&#39;, &#39;test&#39;, &#39;sentence&#39;, &#39;has&#39;, &#39;eight&#39;],\n[&#39;test&#39;, &#39;sentence&#39;, &#39;has&#39;, &#39;eight&#39;, &#39;words&#39;],\n[&#39;sentence&#39;, &#39;has&#39;, &#39;eight&#39;, &#39;words&#39;, &#39;in&#39;],\n[&#39;has&#39;, &#39;eight&#39;, &#39;words&#39;, &#39;in&#39;, &#39;it&#39;]]\n</code></pre>\n<p>There are two concepts that we see in this example of which you need to\nbe aware. Firstly, because our function expects a list of words rather\nthan a string, we have to convert the strings into lists before our\nfunction can handle them. We could have done this by adding another line\nof code above the function call, but instead we used the <code>split</code> method\ndirectly in the function argument as a bit of a shortcut.</p>\n<p>Secondly, why did the first example return an empty list rather than the\nn-grams we were after? In <em>test1</em>, we have tried to ask for an n-gram that\nis longer than the number of words in our list. This has resulted in a\nblank list. In <em>test2</em> we have no such problem and get all possible\n5-grams for the longer list of words. If you wanted to you could adapt\nyour function to print a warning message or to return the entire string\ninstead of an empty list.</p>\n<p>We now have a way to extract all possible n-grams from a body of text.\nIn the next lesson, we can focus our attention on isolating those\nn-grams that are of interest to us.</p>\n<h2 id=\"code-syncing\">Code Syncing</h2>\n<p>To follow along with future lessons it is important that you have the\nright files and programs in your &quot;programming-historian&quot; directory. At\nthe end of each chapter you can download the &quot;programming-historian&quot; zip\nfile to make sure you have the correct code. If you are following along\nwith the Mac / Linux version you may have to open the <code>obo.py</code> file and\nchange &quot;file:///Users/username/Desktop/programming-historian/&quot; to the\npath to the directory on your own computer.</p>\n<ul>\n<li>python-lessons8.py (<a href=\"/assets/python-lessons8.zip\">zip sync</a>)</li>\n</ul>\n"}