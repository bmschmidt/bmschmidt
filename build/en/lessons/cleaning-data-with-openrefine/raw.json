{"metadata":{"title":"Cleaning Data with OpenRefine","layout":"lesson","date":"2013-08-05T00:00:00.000Z","tested_date":"2021-09-10T00:00:00.000Z","authors":["Seth van Hooland","Ruben Verborgh","Max De Wilde"],"reviewers":["Patrick Burns","Nora McGregor"],"editors":["Adam Crymble"],"difficulty":2,"exclude_from_check":["review-ticket"],"activity":"transforming","topics":["data-manipulation"],"abstract":"This tutorial focuses on how scholars can diagnose and act upon the accuracy of data.","redirect_from":"/lessons/cleaning-data-with-openrefine","avatar_alt":"Two men laundering clothes outside","doi":"10.46430/phen0023"},"html_body":"<p>{% include toc.html %}</p>\n<h2 id=\"lesson-goals\">Lesson goals</h2>\n<p>Don’t take your data at face value. That is the key message of this\ntutorial which focuses on how scholars can diagnose and act upon the\naccuracy of data. In this lesson, you will learn the principles and\npractice of data cleaning, as well as how <a href=\"http://openrefine.org\" title=\"OpenRefine\"><em>OpenRefine</em></a> can be used\nto perform four essential tasks that will help you to clean your data:</p>\n<ol>\n<li>Remove duplicate records</li>\n<li>Separate multiple values contained in the same field</li>\n<li>Analyse the distribution of values throughout a data set</li>\n<li>Group together different representations of the same reality</li>\n</ol>\n<p>These steps are illustrated with the help of a series of exercises based\non a collection of metadata from the <a href=\"http://www.powerhousemuseum.com\" title=\"Powerhouse museum\">Powerhouse museum</a>,\ndemonstrating how (semi-)automated methods can help you correct the\nerrors in your data.</p>\n<h2 id=\"why-should-historians-care-about-data-quality\">Why should historians care about data quality?</h2>\n<p>Duplicate records, empty values and inconsistent formats are phenomena\nwe should be prepared to deal with when using historical data sets. This\nlesson will teach you how to discover inconsistencies in data contained\nwithin a spreadsheet or a database. As we increasingly share, aggregate\nand reuse data on the web, historians will need to respond to data\nquality issues which inevitably pop up. Using a program called\n<em>OpenRefine</em>, you will be able to easily identify systematic errors such\nas blank cells, duplicates, spelling inconsistencies, etc. <em>OpenRefine</em>\nnot only allows you to quickly diagnose the accuracy of your data, but\nalso to act upon certain errors in an automated manner.</p>\n<h2 id=\"description-of-the-tool-openrefine\">Description of the tool: OpenRefine</h2>\n<p>In the past, historians had to rely on information technology\nspecialists to diagnose data quality and to run cleaning tasks. This\nrequired custom computer programs when working with sizeable data sets.\nLuckily, the advent of Interactive Data Transformation tools (IDTs) now\nallows for rapid and inexpensive operations on large amounts of data,\neven by professionals lacking in-depth technical skills.</p>\n<p>IDTs resemble the desktop spreadsheet software we are all familiar with,\nand they share some common functionalities. You can for example use an\napplication such as Microsoft Excel to sort your data based on\nnumerical, alphabetical and custom-developed filters, which allows you\nto detect errors more easily. Setting up these filters in a spreadsheet\ncan be cumbersome, as they are a secondary functionality. On a more\ngeneral level, we could say that spreadsheets are designed to work on\nindividual rows and cells, whereas IDTs operate on large ranges of data\nat once. These &#39;spreadsheets on steroids&#39; offer an integrated and\nuser-friendly interface through which end users can detect and correct\nerrors.</p>\n<p>Several general purpose tools for interactive data transformation have\nbeen developed in recent years, such as <a href=\"http://control.cs.berkeley.edu/abc/\" title=\"Potter&#39;s Wheel ABC \"><em>Potter’s Wheel ABC</em></a> and\n<a href=\"http://vis.stanford.edu/papers/wrangler/\" title=\"Wrangler\"><em>Wrangler</em></a>. Here we want to focus specifically on <a href=\"http://openrefine.org\" title=\"OpenRefine\"><em>OpenRefine</em></a>\n(formerly Freebase Gridworks and Google Refine), as in the opinion of\nthe authors, it is the most user-friendly tool to efficiently process\nand clean large amounts of data in a browser-based interface.</p>\n<p>On top of <a href=\"http://en.wikipedia.org/wiki/Data_profiling\">data profiling</a> and cleaning operations, <em>OpenRefine</em>\nextensions allow users to identify concepts in unstructured text, a\nprocess referred to as <a href=\"http://en.wikipedia.org/wiki/Named-entity_recognition\">named-entity recognition</a> (NER), and can also\nreconcile their own data with existing knowledge bases. By doing so,\n<em>OpenRefine</em> can be a practical tool to link data with concepts and\nauthorities which have already been declared on the Web by parties such\nas <a href=\"http://www.loc.gov/index.html\" title=\"Library of Congress\">Library of Congress</a> or <a href=\"http://www.oclc.org/home.en.html\" title=\"OCLC\">OCLC</a>. Data cleaning is a prerequisite\nto these steps; the success rate of NER and a fruitful matching process\nbetween your data and external authorities depends on your ability to\nmake your data as coherent as possible.</p>\n<h2 id=\"description-of-the-exercise-powerhouse-museum\">Description of the exercise: Powerhouse Museum</h2>\n<p>The Powerhouse Museum in Sydney provides a freely available metadata\nexport of its collection on its <a href=\"http://www.powerhousemuseum.com/collection/database/download.php\" title=\"website\">website</a>. The museum is one of the\nlargest science and technology museums worldwide, providing access to\nalmost 90,000 objects, ranging from steam engines to fine glassware and\nfrom haute couture to computer chips.</p>\n<p>The Powerhouse has been very actively disclosing its collection online\nand making most of its data freely available. From the museum website, a\ntab-separated text file under the name <em>phm-collection.tsv</em> can be\ndownloaded, which you can open as a spreadsheet. The unzipped file\n(58MB) contains basic metadata (17 fields) for 75,823 objects, released\nunder a <a href=\"http://creativecommons.org/licenses/by-nc/2.5/au/\">Creative Commons Attribution Share Alike (CCASA) license</a>. In\nthis tutorial we will be using a copy of the data that we have archived\nfor you to download (in a moment). This ensures that if the Powerhouse\nMuseum updates the data, you will still be able to follow along with the\nLesson.</p>\n<p>Throughout the data profiling and cleaning process, the case study will\nspecifically focus on the <code>Categories</code> field, which is populated with\nterms from the Powerhouse museum Object Names Thesaurus (PONT). PONT\nrecognizes Australian usage and spelling, and reflects in a very direct\nmanner the strengths of the collection. In the collection you will find\nbetter representations of social history and decorative arts, and\ncomparably few object names relating to fine arts and natural history.</p>\n<p>The terms in the Categories field comprise what we call a <a href=\"http://en.wikipedia.org/wiki/Controlled_vocabulary\">Controlled\nvocabulary</a>. A controlled vocabulary consists of keywords describing\nthe content of a collection using a limited number of terms, and is\noften a key entry point into data sets used by historians in libraries,\narchives and museums. That is why we will give particular attention to\nthe &#39;Categories&#39; field. Once the data has been cleaned, it should be\npossible to reuse the terms in the controlled vocabulary to find\nadditional information about the terms elsewhere online, which is known\nas creating <a href=\"http://en.wikipedia.org/wiki/Linked_data\">Linked Data</a>.</p>\n<h3 id=\"getting-started-installing-openrefine-and-importing-data\">Getting started: installing OpenRefine and importing data</h3>\n<p><a href=\"http://openrefine.org/#download_openrefine\">Download OpenRefine</a> and follow the installation instructions.\nOpenRefine works on all platforms: Windows, Mac, and Linux. <em>OpenRefine</em>\nwill open in your browser, but it is important to realise that the\napplication is run locally and that your data won&#39;t be stored online.\nThe data files are available on our <a href=\"http://data.freeyourmetadata.org/powerhouse-museum/\">FreeYourMetadata website</a>, which\nwill be used throughout this tutorial. Please download the\n<em>phm-collection.tsv</em> file before continuing (also archived on the\nProgramming Historian site: as <a href=\"/assets/phm-collection.tsv\">phm-collection</a>).</p>\n<p>On the <em>OpenRefine</em> start page, create a new project using the\ndownloaded data file and click <strong>Next</strong>. By default, the first line will\nbe correctly parsed as the name of a column, but you need to unselect\nthe &#39;Quotation marks are used to enclose cells containing column\nseparators&#39; checkbox, since the quotes inside the file do not have any\nmeaning to <em>OpenRefine</em>. Additionally, select the &#39;Parse cell text into\nnumbers, dates, ...&#39; checkbox to let OpenRefine automatically detect\nnumbers. Now click on &#39;<strong>Create project</strong>&#39;. If all goes\nwell, you will see 75,814 rows. Alternatively, you can download the\n<a href=\"http://data.freeyourmetadata.org/powerhouse-museum/phm-collection.google-refine.tar.gz\">initial OpenRefine project</a> directly.</p>\n<p>The Powerhouse museum data set consists of detailed metadata on all the\ncollection objects, including title, description, several categories the\nitem belongs to, provenance information, and a persistent link to the\nobject on the museum website. To get an idea of what object the metadata\ncorresponds to, simply click the persistent link and the website will\nopen.</p>\n<p>{% include figure.html filename=&quot;powerhouseScreenshot.png&quot; caption=&quot;Figure 1: Screenshot of a Sample Object on the Powerhouse Museum Website&quot; %}</p>\n<h3 id=\"get-to-know-your-data\">Get to know your data</h3>\n<p>The first thing to do is to look around and get to know your data. You\ncan inspect the different data values by displaying them in <code>facets</code>. You\ncould consider a <a href=\"http://en.wikipedia.org/wiki/Faceted_search\">facet</a> like a lense through which you view a\nspecific subset of the data, based on a criterion of your choice. Click\nthe triangle in front of the column name, select Facet, and create a\nfacet. For instance, try a <code>Text</code> facet or a <code>Numeric</code> facet, depending\non the nature of the values contained in the fields (numeric values are\nin green). Be warned, however, that text facets are best used on fields\nwith redundant values (Categories for instance); if you run into a &#39;too\nmany to display&#39; error, you can choose to raise the choice count limit\nabove the 2,000 default, but too high a limit can slow down the\napplication (5,000 is usually a safe choice). Numeric facets do not have\nthis restriction. For more options, select Customized facets: facet by\nblank, for instance, comes handy to find out how many values were filled\nin for each field. We&#39;ll explore these further in the following\nexercises.</p>\n<h3 id=\"remove-blank-rows\">Remove blank rows</h3>\n<p>One thing you notice when creating a numeric facet for the Record ID\ncolumn, is that three rows are empty. You can find them by unselecting\nthe Numeric checkbox, leaving only Non-numeric values. Actually, these\nvalues are not really blank but contain a single whitespace character,\nwhich can be seen by moving your cursor to where the value should have\nbeen and clicking the &#39;<strong>edit</strong>&#39; button that appears. To remove these rows,\nclick the triangle in front of the first column called &#39;<strong>All</strong>&#39;, select\n&#39;<strong>Edit rows</strong>&#39;, and then &#39;<strong>Remove all matching rows</strong>&#39;. Close the numeric\nfacet to see the remaining 75,811 rows.</p>\n<h3 id=\"removing-duplicates\">Removing duplicates</h3>\n<p>A second step is to detect and remove duplicates. These can be spotted\nby sorting them by a unique value, such as the Record ID (in this case\nwe are assuming the Record ID should in fact be unique for each entry).\nThe operation can be performed by clicking the triangle left of Record\nID, then choosing &#39;<strong>Sort</strong>&#39;… and selecting the &#39;<strong>numbers</strong>&#39; bullet. In\n<em>OpenRefine</em>, sorting is only a visual aid, unless you make the\nreordering permanent. To do this, click the Sort menu that has just\nappeared at the top and choose &#39;<strong>Reorder rows permanently</strong>&#39;. If you forget\nto do this, you will get unpredictable results later in this tutorial.</p>\n<p>Identical rows are now adjacent to each other. Next, blank the Record ID\nof rows that have the same Record ID as the row above them, marking them\nduplicates. To do this, click on the Record ID triangle, choose <strong>Edit\ncells</strong> &gt; <strong>Blank down</strong>. The status message tells you that 84 columns\nwere affected (if you forgot to reorder rows permanently, you will get\nonly 19; if so, undo the blank down operation in the &#39;Undo/Redo&#39; tab and\ngo back to the previous paragraph to make sure that rows are reordered\nand not simply sorted). Eliminate those rows by creating a facet on\n&#39;<strong>blank cells</strong>&#39; in the Record ID column (&#39;<strong>Facet</strong>&#39; &gt; &#39;<strong>Customized facets</strong>&#39; &gt;\n&#39;<strong>Facet by blank</strong>&#39;), selecting the 84 blank rows by clicking on &#39;<strong>true</strong>&#39;,\nand removing them using the &#39;<strong>All</strong>&#39; triangle (&#39;<strong>Edit rows</strong>&#39; &gt; &#39;<strong>Remove all\nmatching rows</strong>&#39;). Upon closing the facet, you see 75,727 unique rows.</p>\n<p>Be aware that special caution is needed when eliminating duplicates. In\nthe above mentioned step, we assume the dataset has a field with unique\nvalues, indicating that the entire row represents a duplicate. This is\nnot necessarily the case, and great caution should be taken to manually\nverify whether the entire row represents a duplicate or not.</p>\n<h3 id=\"atomization\">Atomization</h3>\n<p>Once the duplicate records have been removed, we can have a closer look\nat the <em>Categories</em> field. On average each object has been attributed\n2.25 categories. These categories are contained within the same field,\nseparated by a pipe character &#39;|&#39;. Record 9, for instance, contains\nthree: &#39;Mineral samples|Specimens|Mineral Samples-Geological&#39;. In order\nto analyze in detail the use of the keywords, the values of the\nCategories field need to be split up into individual cells on the basis\nof the pipe character , expanding the 75,727 records into 170,167 rows.\nChoose &#39;<strong>Edit cells</strong>&#39;, &#39;<strong>Split multi-valued cells</strong>&#39;, entering &#39;<strong>|</strong>&#39; as the\nvalue separator. OpenRefine informs you that you now have 170,167 rows.</p>\n<p>It is important to fully understand the rows/records paradigm. Make the\nRecord ID column visible to see what is going on. You can switch between\n&#39;rows&#39; and &#39;records&#39; view by clicking on the so-labelled links just\nabove the column headers. In the &#39;rows view&#39;, each row represents a\ncouple of Record IDs and a single Category, enabling manipulation of\neach one individually. The &#39;records view&#39; has an entry for each Record\nID, which can have different categories on different rows (grouped\ntogether in grey or white), but each record is manipulated as a whole.\nConcretely, there now are 170,167 category assignments (rows), spread\nover 75,736 collection items (records). You maybe noticed that we are 9\nrecords up from the original 75,727, but don&#39;t worry about that for the\ntime being, we will come back to this small difference later.</p>\n<h3 id=\"facetting-and-clustering\">Facetting and clustering</h3>\n<p>Once the content of a field has been properly atomized, filters, facets,\nand clusters can be applied to give a quick and straightforward overview\nof classic metadata issues. By applying the customized facet &#39;<code>Facet by blank</code>&#39;, one can immediately identify the 461 records that do not have a\ncategory, representing 0.6% of the collection. Applying a text facet to\nthe Categories field allows an overview of the 4,934 different\ncategories used in the collection (the default limit being 2,000, you\ncan click &#39;<strong>Set choice count limit</strong>&#39; to raise it to 5,000). The headings\ncan be sorted alphabetically or by frequency (&#39;count&#39;), giving a list of\nthe most used terms to index the collection. The top three headings are\n&#39;Numismatics&#39; (8,041), &#39;Ceramics&#39; (7,390) and &#39;Clothing and dress&#39;\n(7,279).</p>\n<p>After the application of a facet, <em>OpenRefine</em> proposes to cluster facet\nchoices together based on various similarity methods. As Figure 2\nillustrates, the clustering allows you to solve issues regarding case\ninconsistencies, incoherent use of either the singular or plural form,\nand simple spelling mistakes. <em>OpenRefine</em> presents the related values\nand proposes a merge into the most recurrent value. Select values you\nwish to cluster by selecting their boxes individually or by clicking\n&#39;<strong>Select all</strong>&#39; at the bottom, then chose &#39;<strong>Merge Selected and Re-Cluster</strong>&#39;.</p>\n<p>{% include figure.html filename=&quot;overviewOfSomeClusters.png&quot; caption=&quot;Figure 2 : Overview of some clusters&quot; %}</p>\n<p>The default clustering method is not too complicated, so it does not\nfind all clusters yet. Experiment with different methods to see what\nresults they yield. Be careful though: some methods are too aggressive,\nso you might end up clustering values that do not belong together. Now\nthat the values have been clustered individually, we can put them back\ntogether in a single cell. Click the Categories triangle and choose <strong>Edit\ncells</strong>, <strong>Join multi-valued cells</strong>, <strong>OK</strong>. Choose the pipe character (|) as a\nseparator. The rows now look like before, with a multi-valued Categories\nfield.</p>\n<h3 id=\"applying-ad-hoc-transformations-through-the-use-of-regular-expressions\">Applying ad-hoc transformations through the use of regular expressions</h3>\n<p>You may remember there was an increase in the number of records after\nthe splitting process: nine records appeared out of nowhere. In order to\nfind the cause of this disparity, we need to go back in time before we\nsplit the categories into separate rows. To do so, toggle the Undo/Redo\ntab right of the Facet/Filter tab, and you will get a history of all the\nactions that you performed since the project was created. Select the\nstep just before &#39;Split multi-valued cells in column Categories&#39; (if you\nfollowed our example this should be &#39;Remove 84 rows&#39;) then go back to\nthe Facet/Filter tab.</p>\n<p>The issue arose during the splitting operation on the pipe character, so\nthere is a strong chance that whatever went wrong is linked to this\ncharacter. Let&#39;s apply a filter on the Categories column by selecting\n&#39;<strong>Text filter</strong>&#39; in the menu. First type a single <code>|</code> in the field on the\nleft: <em>OpenRefine</em> informs you that there are 71,064 matching records\n(i.e. records containing a pipe) out of a total of 75,727. Cells that do\nnot contain a pipe can be blank ones, but also cells containing a single\ncategory with no separator, such as record 29 which only has &#39;Scientific\ninstruments&#39;.</p>\n<p>Now enter a second <code>|</code> after the first one to get || (double pipe): you\ncan see that 9 records are matching this pattern. These are likely the 9\nrecords guilty of our discrepancy: when <em>OpenRefine</em> splits these up,\nthe double pipe is interpreted as a break between two records instead of\na meaningless double separator. Now how do we correct these values? Go\nto the menu of the &#39;Categories&#39; field, and choose &#39;<strong>Edit cells</strong>&#39; &gt;\n&#39;<strong>Transform</strong>&#39;…. Welcome to the custom text tranform interface, a powerful\nfunctionality of <em>OpenRefine</em> using the <em>OpenRefine</em> Expression Language\n(GREL).</p>\n<p>The word &#39;value&#39; in the text field represents the current value of each\ncell, which you can see below. We can modify this value by applying\nfunctions to it (see the <a href=\"https://github.com/OpenRefine/OpenRefine/wiki/GREL-Functions\">GREL documentation</a> for a full list). In\nthis case, we want to replace double pipes with a single pipe. This can\nbe achieved by entering the following <a href=\"http://en.wikipedia.org/wiki/Regular_expression\" title=\"Regular Expressions\">regular expression</a> (be sure\nnot to forget the quotes):</p>\n<pre><code>value.replace(&#39;||&#39;, &#39;|&#39;)\n</code></pre>\n<p>Under the &#39;Expression&#39; text field, you get a preview of the modified\nvalues, with double pipes removed. Click <strong>OK</strong> and try again to split the\ncategories with &#39;<strong>Edit cells</strong>&#39; &gt; &#39;<strong>Split multi-valued cells</strong>&#39;, the number\nof records will now stay at 75,727 (click the &#39;<strong>records</strong>&#39; link to\ndouble-check).</p>\n<p>* * *<br> Another issue that can be solved with the help of GREL is the problem\nof records for which the same category is listed twice. Take record 41\nfor instance, whose categories are &#39;Models|Botanical specimens|Botanical\nSpecimens|Didactic Displays|Models&#39;. The category &#39;Models&#39; appears twice\nwithout any good reason, so we want to remove this duplicate. Click the\nCategories triangle and choose Edit cells, Join multi-valued cells, OK.\nChoose the pipe character as a separator. Now the categories are listed\nas before. Then select &#39;<strong>Edit cells</strong>&#39; &gt; &#39;<strong>Transform</strong>&#39;, also on the\ncategories column. Using GREL we can successively split the categories\non the pipe character, look for unique categories and join them back\nagain. To achieve this, just type the following expression:</p>\n<pre><code>value.split(&#39;|&#39;).uniques().join(&#39;|&#39;)\n</code></pre>\n<p>You will notice that 33,008 cells are affected, more than half the\ncollection.</p>\n<h3 id=\"exporting-your-cleaned-data\">Exporting your cleaned data</h3>\n<p>Since you first loaded your data into <em>OpenRefine</em>, all cleaning\noperations have been performed in the software memory, leaving your\noriginal data set untouched. If you want to save the data that you have\nbeen cleaning, you need to export them by clicking on the &#39;<strong>Export</strong>&#39; menu\ntop-right of the screen. <em>OpenRefine</em> supports a large variety of\nformats, such as <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">CSV</a>, HTML or Excel: select whatever suits you best\nor add your own export template by clicking &#39;Templating&#39;. You can also\nexport your project in the internal <em>OpenRefine</em> format in order to\nshare it with others.</p>\n<h3 id=\"building-on-top-of-your-cleaned-data\">Building on top of your cleaned data</h3>\n<p>Once your data has been cleaned, you can take the next step and explore\nother exciting features of <em>OpenRefine</em>. The user community of\n<em>OpenRefine</em> has developed two particularly interesting extensions which\nallow you to link your data to data that has already been published on\nthe Web. The <a href=\"http://web.archive.org/web/20180113121435/http://refine.deri.ie/docs\">RDF Refine extension</a> transforms plaintext keywords into\nURLs. The <a href=\"https://github.com/RubenVerborgh/Refine-NER-Extension\">NER extension</a> allows you to apply named-entity recognition\n(NER), which identifies keywords in flowing text and gives them a URL.</p>\n<h2 id=\"conclusions\">Conclusions</h2>\n<p>If you only remember on thing from this lesson, it should be this: <em>all\ndata is dirty, but you can do something about it.</em> As we have shown\nhere, there is already a lot you can do yourself to increase data\nquality significantly. First of all, you have learned how you can get a\nquick overview of how many empty values your dataset contains and how\noften a particular value (e.g. a keyword) is used throughout a\ncollection. This lessons also demonstrated how to solve recurrent issues\nsuch as duplicates and spelling inconsistencies in an automated manner\nwith the help of <em>OpenRefine</em>. Don&#39;t hesitate to experiment with the\ncleaning features, as you&#39;re performing these steps on a copy of your\ndata set, and <em>OpenRefine</em> allows you to trace back all of your steps in\nthe case you have made an error.</p>\n"}