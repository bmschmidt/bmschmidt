{"metadata":{"title":"From HTML to List of Words (part 1)","layout":"lesson","date":"2012-07-17T00:00:00.000Z","authors":["William J. Turkel","Adam Crymble"],"reviewers":["Jim Clifford","Frederik Elwert"],"editors":["Miriam Posner"],"difficulty":2,"exclude_from_check":["review-ticket"],"activity":"transforming","topics":["python"],"abstract":"In this two-part lesson, we will build on what you’ve learned about Downloading Web Pages with Python, learning how to remove the HTML markup from the webpage of Benjamin Bowsey’s 1780 criminal trial transcript. We will achieve this by using a variety of string operators, string methods, and close reading skills. We introduce looping and branching so that programs can repeat tasks and test for certain conditions, making it possible to separate the content from the HTML tags. Finally, we convert content from a long string to a list of words that can later be sorted, indexed, and counted.","next":"from-html-to-list-of-words-2","previous":"manipulating-strings-in-python","series_total":"15 lessons","sequence":7,"python_warning":false,"redirect_from":"/lessons/from-html-to-list-of-words-1","avatar_alt":"A giraffe being mimicked by a human","doi":"10.46430/phen0006"},"html_body":"<p>{% include toc.html %}</p>\n<h2 id=\"lesson-goals\">Lesson Goals</h2>\n<p>In this two-part lesson, we will build on what you’ve learned about\n<a href=\"/lessons/working-with-web-pages\">Downloading Web Pages with Python</a>, learning how to remove the <em>HTML markup</em> from\nthe webpage of <a href=\"http://www.oldbaileyonline.org/browse.jsp?id=t17800628-33&amp;div=t17800628-33\">Benjamin Bowsey’s 1780 criminal trial transcript</a>. We\nwill achieve this by using a variety of <em>string operators</em>, <em>string methods</em>\nand close reading skills. We introduce <em>looping</em> and <em>branching</em> so that\nprograms can repeat tasks and test for certain conditions, making it\npossible to separate the content from the HTML tags. Finally, we convert\ncontent from a long string to a <em>list of words</em> that can later be sorted,\nindexed, and counted.</p>\n<h2 id=\"the-challenge\">The Challenge</h2>\n<p>To get a clearer picture of the task ahead, open the\n<em>obo-t17800628-33.html</em> file that you created in <a href=\"/lessons/working-with-web-pages\">Downloading Web Pages with Python</a> (or [download and save the trial]\n<a href=\"/assets/obo-t17800628-33.html\">obo-t17800628-33.html</a> if you do not already have a\ncopy), then look at the HTML source by clicking on\n<em>Tools -&gt; Web Developer -&gt; Page Source</em>. As you scroll through the\nsource code you’ll notice that there are HTML tags mixed in with\nthe text. If HTML is new to you, we recommend that you take the W3 Schools <a href=\"http://www.w3schools.com/html/\">HTML</a> tutorial\nto familiarize yourself with HTML markup. If your work often requires\nthat you remove HTML markup, it will certainly help to be able to\nunderstand it when you see it.</p>\n<h3 id=\"files-needed-for-this-lesson\">Files Needed For This Lesson</h3>\n<ul>\n<li><em><a href=\"/assets/obo-t17800628-33.html\">obo-t17800628-33.html</a></em></li>\n</ul>\n<h2 id=\"devising-an-algorithm\">Devising an Algorithm</h2>\n<p>Since the goal is to get rid of the HTML, the first step is to create an\n<em>algorithm</em> that returns only the text (minus the HTML tags) of the\narticle. An algorithm is a procedure that has been specified in enough\ndetail that it can be implemented on a computer. It helps to write your\nalgorithms first in plain English; it&#39;s a great way to outline exactly\nwhat you want to do before diving into code. To construct this algorithm\nyou are going to use your close reading skills to figure out a way to\ncapture only the textual content of the biography.</p>\n<p>Looking at the source code of <em>obo-t17800628-33.html</em> you will notice\nthe actual transcript does not start right away. Instead there are a\nnumber of HTML tags and some citation information. In this case the content does\nnot even start until quite far along line 81!</p>\n<pre><code class=\"language-xml\">&lt;p&gt;324.                                  &lt;a class=&quot;invisible&quot; name=&quot;t17800628-33-defend448&quot;&gt; &lt;/a&gt;                     BENJAMIN                      BOWSEY                                                                                                          (a blackmoor                  ) was indicted for                                                          that he together with five hundred other persons and more, did, unlawfully, riotously, and tumultuously assemble on the 6th of June\n</code></pre>\n<p>We are only interested in the transcript itself, not the extra metadata\ncontained in the tags. However, you will notice that the end of the\nmetadata corresponds with the start of the transcript. This makes the\nlocation of the metadata a potentially useful marker for isolating the\ntranscript text.</p>\n<p>At a glance, we can see that the trial transcript itself starts with an HTML tag:\n<code>&lt;p&gt;</code>, which stands for &#39;paragraph&#39;. This happens to be the first paragraph tag in the document.\nWe might be able to use this to find the starting point\nof our transcript text. We are lucky in this case because it turns out\nthat this tag is a reliable way to find the start of transcript text\nin the trial (if you want, take a look at a few other trials to check).</p>\n<p>The trial text ends on line 82 with another HTML tag: <code>&lt;br/&gt;</code>, which stands for line break.\nThis happens to be the LAST line break in the document. These two tags (first paragraph tag and last linebreak)\nthus provide a way to isolate our desired text. Well-formatted websites will almost always have some\nunique way of signalling the end of the content. You often just need to\nlook closely.</p>\n<p>The next thing that you want to do is strip out all of the HTML markup\nthat remains mixed in with the content. Since you know HTML tags are\nalways found between matching pairs of angle brackets, it’s probably a\nsafe bet that if you remove everything between angle brackets, you will\nremove the HTML and be left only with the transcript. Note that we are\nmaking the assumption that the transcript will not contain the\nmathematical symbols for “less than” or “greater than.” If Bowsey was a\nmathematician, this assumption would not be as safe.</p>\n<p>The following describes our algorithm in words.</p>\n<p>To isolate the content:</p>\n<ul>\n<li>Download the transcript text</li>\n<li>Search the HTML for and store the location of the first <code>&lt;p&gt;</code> tag</li>\n<li>Search the HTML for and store the location of the last <code>&lt;br/&gt;</code> tag</li>\n<li>Save everything after the <code>&lt;p&gt;</code> tag and before the <code>&lt;br/&gt;</code> tag to a string:\n<em>pageContents</em></li>\n</ul>\n<p>At this point we have the trial transcript text, plus HTML markup. Next:</p>\n<ul>\n<li>Look at every character in the <em>pageContents</em> string, one character at\na time</li>\n<li>If the character is a left angle bracket (&lt;) we are now inside a\ntag so ignore each following character</li>\n<li>If the character is a right angle bracket (&gt;) we are now leaving\nthe tag; ignore the current character, but look at each following\ncharacter</li>\n<li>If we’re not inside a tag, append the current character to a new\nvariable: <em>text</em></li>\n</ul>\n<p>Finally:</p>\n<ul>\n<li>Split the text string into a list of individual words that can later\nbe manipulated further.</li>\n</ul>\n<h2 id=\"isolating-desired-content\">Isolating Desired Content</h2>\n<p>The following step uses Python commands introduced in the <a href=\"/lessons/manipulating-strings-in-python\">Manipulating\nStrings in Python</a> lesson to implement the first half of the\nalgorithm: removing all content before the <code>&lt;p&gt;</code> tag and after the <code>&lt;br/&gt;</code> tag. To recap,\nthe algorithm was as follows:</p>\n<ul>\n<li>Download the transcript text</li>\n<li>Search the HTML for and store the location of the first <code>&lt;p&gt;</code> tag</li>\n<li>Search the HTML for and store the location of the last <code>&lt;br/&gt;</code> tag</li>\n<li>Save everything after the <code>&lt;p&gt;</code> tag and before the <code>&lt;br/&gt;</code> tag to a string:\n<em>pageContents</em></li>\n</ul>\n<p>To achieve this, you will use the &#39;find&#39; string method and .rfind() method\n(which finds the last match of something) and create a new\nsubstring containing only the desired content between those index positions.</p>\n<p>As you work, you will be developing separate files to contain your code.\nOne of these will be called <em>obo.py</em> (for “Old Bailey Online”). This\nfile is going to contain all of the code that you will want to re-use;\nin other words, <em>obo.py</em> is a module. We discussed the idea of modules\nin <a href=\"/lessons/code-reuse-and-modularity\">Code Reuse and Modularity</a> when we saved our functions to\n<em>greet.py</em>.</p>\n<p>Create a new file named <em>obo.py</em> and save it to your\n<em>programming-historian</em> directory. We are going to use this file to keep\ncopies of the functions needed to process The Old Bailey Online. Type or\ncopy the following code into your file.</p>\n<pre><code class=\"language-python\"># obo.py\n\ndef stripTags(pageContents):\n    pageContents = str(pageContents)\n    startLoc = pageContents.find(&quot;&lt;p&gt;&quot;)\n    endLoc = pageContents.rfind(&quot;&lt;br/&gt;&quot;)\n\n    pageContents = pageContents[startLoc:endLoc]\n    return pageContents\n</code></pre>\n<p>Create a second file, <em>trial-content.py</em>, and save the program shown\nbelow.</p>\n<pre><code class=\"language-python\"># trial-content.py\n\nimport urllib.request, urllib.error, urllib.parse, obo\n\nurl = &#39;http://www.oldbaileyonline.org/browse.jsp?id=t17800628-33&amp;div=t17800628-33&#39;\n\nresponse = urllib.request.urlopen(url)\nHTML = response.read().decode(&#39;UTF-8&#39;)\n\nprint((obo.stripTags(HTML)))\n</code></pre>\n<p>When you run <em>trial-content.py</em> it will get the web page for Bowsey’s\ntrial transcript, then look in the <em>obo.py</em> module for the <em>stripTags</em>\nfunction. It will use that function to extract the stuff after the first\n<code>&lt;p&gt;</code> tag and before the last <code>&lt;br/&gt;</code> tag. With any luck, this should be the textual content of\nthe Bowsey transcript, along with some of HTML markup. Don’t worry if\nyour Command Output screen ends in a thick black line. Komodo Edit’s\noutput screen has a maximum number of characters it will display, after\nwhich characters start literally writing over one another on the screen,\ngiving the appearance of a black blob. Don’t worry, the text is in there\neven though you cannot read it; you can cut and paste it to a text file\nto double check.</p>\n<p>Let’s take a moment to make sure we understand how <em>trial-contents.py</em>\nis able to use the functions stored in <em>obo.py</em>. The <em>stripTags</em> function\nthat we saved to <em>obo.py</em> requires one argument. In other words, to run\nproperly it needs one piece of information to be supplied. Recall the\ntrained dog example from a previous lesson. In order to bark, the dog\nneeds two things: air and a delicious treat. The <em>stripTags</em> function in\n<em>obo.py</em> needs one thing: a string called <em>pageContents</em>. But you’ll\nnotice that when we call <em>stripTags</em> in the final program\n(<em>trialcontents.py</em>) there’s no mention of “<em>pageContents</em>“. Instead the\nfunction is given HTML as an argument. This can be confusing to many\npeople when they first start programming. Once a function has been\ndeclared, we no longer need to use the same variable name when we call\nthe function. As long as we provide the right type of argument,\neverything should work fine, no matter what we call it. In this case we\nwanted <em>pageContents</em> to use the contents of our HTML variable. You could\nhave passed it any string, including one you input directly between the\nparentheses. Try rerunning <em>trial-content.py</em>, changing the <em>stripTags</em>\nargument to “I am quite fond of dogs” and see what happens. Note that\ndepending on how you define your function (and what it does) your\nargument may need to be something other than a string: an <em>integer</em> for\nexample.</p>\n<h2 id=\"suggested-reading\">Suggested Reading</h2>\n<ul>\n<li>Lutz, <em>Learning Python</em><ul>\n<li>Ch. 7: Strings</li>\n<li>Ch. 8: Lists and Dictionaries</li>\n<li>Ch. 10: Introducing Python Statements</li>\n<li>Ch. 15: Function Basics</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"code-syncing\">Code Syncing</h2>\n<p>To follow along with future lessons it is important that you have the\nright files and programs in your programming-historian directory. At the\nend of each chapter you can download the programming-historian zip file\nto make sure you have the correct code. Note we have removed unneeded\nfiles from earlier lessons. Your directory may contain more files and\nthat’s ok!</p>\n<ul>\n<li>programming-historian-2 (<a href=\"/assets/python-lessons2.zip\">zip</a>)</li>\n</ul>\n"}