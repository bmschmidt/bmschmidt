{"metadata":{"title":"From HTML to List of Words (part 2)","layout":"lesson","date":"2012-07-17T00:00:00.000Z","authors":["William J. Turkel","Adam Crymble"],"reviewers":["Jim Clifford","Frederik Elwert"],"editors":["Miriam Posner"],"difficulty":2,"exclude_from_check":["review-ticket"],"activity":"transforming","topics":["python"],"abstract":"In this lesson, you will learn the Python commands needed to implement the second part of the algorithm begun in the lesson 'From HTML to a List of Words (part 1)'.","next":"normalizing-data","previous":"from-html-to-list-of-words-1","series_total":"15 lessons","sequence":8,"python_warning":false,"redirect_from":"/lessons/from-html-to-list-of-words-2","avatar_alt":"A soldier being mocked by a man","doi":"10.46430/phen0007"},"html_body":"<p>{% include toc.html %}</p>\n<h2 id=\"lesson-goals\">Lesson Goals</h2>\n<p>In this lesson, you will learn the Python commands needed to implement\nthe second part of the algorithm begun in the <a href=\"/lessons/from-html-to-list-of-words-1\">From HTML to a List of\nWords (part 1)</a>. The first half of the algorithm gets the content of\nan HTML page and saves only the content between the first <code>&lt;p&gt;</code> and the last <code>&lt;br/&gt;</code>\ntags. The second half of the algorithm does the following:</p>\n<ul>\n<li>Look at every character in the <em>pageContents</em> string, one character at\na time</li>\n<li>If the character is a left angle bracket (&lt;) we are now inside a\ntag so ignore each following character</li>\n<li>If the character is a right angle bracket (&gt;) we are now leaving\nthe tag; ignore the current character, but look at each following\ncharacter</li>\n<li>If we’re not inside a tag, append the current character to a new\nvariable: <em>text</em></li>\n<li>Split the <em>text</em> string into a list of individual words that can later\nbe manipulated further.</li>\n</ul>\n<h3 id=\"files-needed-for-this-lesson\">Files Needed For This Lesson</h3>\n<ul>\n<li><em>obo.py</em></li>\n<li><em>trial-content.py</em></li>\n</ul>\n<p>If you do not have these files, you can\ndownload python-lessons2.zip, a (<a href=\"/assets/python-lessons2.zip\">zip</a>) file from the previous lesson.</p>\n<h2 id=\"repeating-and-testing-in-python\">Repeating and Testing in Python</h2>\n<p>The next stage in implementing the algorithm is to look at every\ncharacter in the <em>pageContents</em> string, one at a time and decide whether\nthe character belongs to HTML markup or to the content of the trial\ntranscript. Before you can do this you’ll have to learn a few techniques\nfor repeating tasks and for testing conditions.</p>\n<h3 id=\"looping\">Looping</h3>\n<p>Like many programming languages, Python includes a number of <em>looping</em>\nmechanisms. The one that you want to use in this case is called a <em>for</em>\n<em>loop</em>. The version below tells the interpreter to do something for each\ncharacter in a string named <em>pageContents</em>. The variable <em>char</em> will contain\neach character from <em>pageContents</em> in succession. We gave <em>char</em> its name;\nit does not have any special significance and could have been named\n<em>jingles</em> or <em>k</em> if we had felt so inclined. You can use the colour-coding\nin Komodo Edit as a guideline for deciding if a word is a variable with\na user-given name (such as &#39;<em>char</em>&#39;) or a Python-defined name that serves\na specific purpose (such as &#39;<code>for</code>&#39;). It is usually a good idea to give\nvariables names that provide information about what they contain. This\nwill make it much easier to understand a program that you haven’t looked\nat for a while. With this in mind, &#39;<em>jingles</em>&#39; is probably not a very good\nchoice for a variable name in this case.</p>\n<pre><code class=\"language-python\">for char in pageContents:\n    # do something with char\n</code></pre>\n<h3 id=\"branching\">Branching</h3>\n<p>Next you need a way of testing the contents of a string, and choosing a\ncourse of action based on that test. Again, like many programming\nlanguages, Python includes a number of <em>branching</em> mechanisms. The one\nthat you want to use here is called an <em>if statement</em>. The version below\ntests to see whether the string named <em>char</em> consists of a left angle\nbracket. As we mentioned earlier, indentation is important in Python. If\ncode is indented, Python will execute it when the condition is true.</p>\n<p>Note that Python uses a single equals sign (=) for <em>assignment</em>, that is\nfor setting one thing equal to something else. In order to test for\n<em>equality</em>, use double equals signs (==) instead. Beginning programmers\noften confuse the two.</p>\n<pre><code class=\"language-python\">if char == &#39;&lt;&#39;:\n    # do something\n</code></pre>\n<p>A more general form of the if statement allows you to specify what to do\nin the event that your test condition is false.</p>\n<pre><code class=\"language-python\">if char == &#39;&lt;&#39;:\n    # do something\nelse:\n    # do something different\n</code></pre>\n<p>In Python you have the option of doing further tests after the first\none, by using an <em>elif statement</em> (which is shorthand for else if).</p>\n<pre><code class=\"language-python\">if char == &#39;&lt;&#39;:\n    # do something\nelif char == &#39;&gt;&#39;:\n    # do another thing\nelse:\n    # do something completely different\n</code></pre>\n<h2 id=\"use-the-algorithm-to-remove-html-markup\">Use the Algorithm to Remove HTML Markup</h2>\n<p>You now know enough to implement the second part of the algorithm:\nremoving all HTML tags. In this part of the algorithm we want to:</p>\n<ul>\n<li>Look at every character in the <em>pageContents</em> string, one character at\na time</li>\n<li>If the character is a left angle bracket (&lt;) we are now inside a\ntag so ignore the character</li>\n<li>If the character is a right angle bracket (&gt;) we are now leaving\nthe tag; ignore the character</li>\n<li>If we’re not inside a tag, append the current character to a new\nvariable: text</li>\n</ul>\n<p>To do this, you will use a for loop to look at each successive character\nin the string. You will then use an if / elif statement to determine\nwhether the character is part of HTML markup or part of the content,\nthen append the content characters to the <em>text</em> string. How will we keep\ntrack of whether or not we’re inside a tag? We can use an integer\nvariable, which will be 1 (true) if the current character is inside a\ntag and 0 (false) if it’s not (in the example below we have named the\nvariable <em>inside</em>).</p>\n<h3 id=\"the-striptags-routine\">The stripTags Routine</h3>\n<p>Putting it all together, the final version of the routine is shown\nbelow. Note that we are expanding the <em>stripTags</em> function created above.\nMake sure you maintain the indentation as shown when you replace the old\n<em>stripTags</em> routine in <em>obo.py</em> with this new one.</p>\n<p>Your routine may look slightly different and as long as it works that’s\nfine. If you’ve elected to experiment, it’s probably best to try our\nversion as well to make sure that your program does what ours does.</p>\n<pre><code class=\"language-python\"># obo.py\ndef stripTags(pageContents):\n    pageContents = str(pageContents)\n    startLoc = pageContents.find(&quot;&lt;p&gt;&quot;)\n    endLoc = pageContents.rfind(&quot;&lt;br/&gt;&quot;)\n\n    pageContents = pageContents[startLoc:endLoc]\n\n    inside = 0\n    text = &#39;&#39;\n\n    for char in pageContents:\n        if char == &#39;&lt;&#39;:\n            inside = 1\n        elif (inside == 1 and char == &#39;&gt;&#39;):\n            inside = 0\n        elif inside == 1:\n            continue\n        else:\n            text += char\n\n    return text\n</code></pre>\n<p>There are two new Python concepts in this new code: <em>continue</em> and <em>return</em>.</p>\n<p>The Python continue statement tells the interpreter to jump back to the\ntop of the enclosing loop. So if we are processing characters inside of\na pair of angle brackets, we want to go get the next character in the\n<em>pageContents</em> string without adding anything to our <em>text</em> variable.</p>\n<p>In our previous examples we have used <code>print</code> extensively. This outputs\nthe result of our program to the screen for the user to read. Often,\nhowever, we wish to allow one part of the program to send information to\nanother part. When a function finishes executing, it can return a value\nto the code which called it. If we were to call <em>stripTags</em> using another\nprogram, we would do so like this:</p>\n<pre><code class=\"language-python\">#understanding the Return statement\n\nimport obo\n\nmyText = &quot;This is my &lt;h1&gt;HTML&lt;/h1&gt; message&quot;\n\ntheResult = obo.stripTags(myText)\n</code></pre>\n<p>By using <code>return</code>, we have been able to save the output of the <em>stripTags</em>\nfunction directly into a variable that we have called &#39;theResult&#39;,\nwhich we can then resume processing as needed using additional code.</p>\n<p>Note that in the <em>stripTags</em> example from the start of this sub-section,\nthe value that we want to return now is not <em>pageContents</em>, but rather the\ncontent which has had the HTML markup stripped out.</p>\n<p>To test our new <em>stripTags</em> routine, you can run <em>trial-content.py</em> again.\nSince we’ve redefined <em>stripTags</em>, the <em>trial-content.py</em> program now does\nsomething different (and closer to what we want). Before you continue,\nmake sure that you understand why the behaviour of <em>trial-content.py</em>\nwould change when we only edited <em>obo.py</em>.</p>\n<h2 id=\"python-lists\">Python Lists</h2>\n<p>Now that you have the ability to extract raw text from web pages, you’re\ngoing to want to get the text in a form that is easy to process. So far,\nwhen you’ve needed to store information in your Python programs, you’ve\nusually used strings. There were a couple of exceptions, however. In the\n<em>stripTags</em> routine, you also made use of an <a href=\"http://docs.python.org/2.4/lib/typesnumeric.html\">integer</a> named <em>inside</em> to\nstore a 1 when you were processing a tag and a 0 when you weren’t. You\ncan do mathematical operations on integers but you cannot store\nfractions or decimal numbers in integer variables.</p>\n<pre><code class=\"language-python\">inside = 1\n</code></pre>\n<p>And whenever you’ve needed to read from or write to a file, you’ve used\na special file handle like <em>f</em> in the example below.</p>\n<pre><code class=\"language-python\">f = open(&#39;helloworld.txt&#39;,&#39;w&#39;)\nf.write(&#39;hello world&#39;)\nf.close()\n</code></pre>\n<p>One of the most useful <a href=\"http://docs.python.org/3/library/types.html\">types</a> of object that Python provides,\nhowever, is the <em>list</em>, an ordered collection of other objects (including,\npotentially, other lists). Converting a string into a list of characters\nor words is straightforward. Type or copy the following program into\nyour text editor to see two ways of achieving this. Save the file as\n<em>string-to-list.py</em> and execute it. Compare the two lists that are\nprinted to the Command Output pane and see if you can figure out how the\ncode works.</p>\n<pre><code class=\"language-python\"># string-to-list.py\n\n# some strings\ns1 = &#39;hello world&#39;\ns2 = &#39;howdy world&#39;\n\n# list of characters\ncharlist = []\nfor char in s1:\n    charlist.append(char)\nprint(charlist)\n\n# list of &#39;words&#39;\nwordlist = s2.split()\nprint(wordlist)\n</code></pre>\n<p>The first routine uses a for loop to step through each character in the\nstring <em>s1</em>, and appends the character to the end of <em>charlist</em>. The second\nroutine makes use of the split operation to break the string <em>s2</em> apart\nwherever there is whitespace (spaces, tabs, carriage returns and similar\ncharacters). Actually, it is a bit of a simplification to refer to the\nobjects in the second list as words. Try changing <em>s2</em> in the above\nprogram to ‘howdy world!’ and running it again. What happened to the\nexclamation mark? Note, that you will have to save your changes before\nusing Run Python again.</p>\n<p>Given what you’ve learned so far, you can now open a URL, download the\nweb page to a string, strip out the HTML and then split the text into a\nlist of words. Try executing the following program.</p>\n<pre><code class=\"language-python\">#html-to-list1.py\nimport urllib.request, urllib.error, urllib.parse, obo\n\nurl = &#39;http://www.oldbaileyonline.org/print.jsp?div=t17800628-33&#39;\n\nresponse = urllib.request.urlopen(url)\nhtml = response.read().decode(&#39;UTF-8&#39;)\ntext = obo.stripTags(html)\nwordlist = text.split()\n\nprint((wordlist[0:120]))\n</code></pre>\n<p>You should get something like the following.</p>\n<pre><code class=\"language-python\">[&#39;324.&#39;, &#39;\\xc2\\xa0&#39;, &#39;BENJAMIN&#39;, &#39;BOWSEY&#39;, &#39;(a&#39;, &#39;blackmoor&#39;, &#39;)&#39;, &#39;was&#39;,\n&#39;indicted&#39;, &#39;for&#39;, &#39;that&#39;, &#39;he&#39;, &#39;together&#39;, &#39;with&#39;, &#39;five&#39;, &#39;hundred&#39;,\n&#39;other&#39;, &#39;persons&#39;, &#39;and&#39;, &#39;more,&#39;, &#39;did,&#39;, &#39;unlawfully,&#39;, &#39;riotously,&#39;,\n&#39;and&#39;, &#39;tumultuously&#39;, &#39;assemble&#39;, &#39;on&#39;, &#39;the&#39;, &#39;6th&#39;, &#39;of&#39;, &#39;June&#39;, &#39;to&#39;,\n&#39;the&#39;, &#39;disturbance&#39;, &#39;of&#39;, &#39;the&#39;, &#39;public&#39;, &#39;peace&#39;, &#39;and&#39;, &#39;did&#39;, &#39;begin&#39;,\n&#39;to&#39;, &#39;demolish&#39;, &#39;and&#39;, &#39;pull&#39;, &#39;down&#39;, &#39;the&#39;, &#39;dwelling&#39;, &#39;house&#39;, &#39;of&#39;,\n&#39;\\xc2\\xa0&#39;, &#39;Richard&#39;, &#39;Akerman&#39;, &#39;,&#39;, &#39;against&#39;, &#39;the&#39;, &#39;form&#39;, &#39;of&#39;,\n&#39;the&#39;, &#39;statute,&#39;, &#39;&amp;amp;c.&#39;, &#39;\\xc2\\xa0&#39;, &#39;ROSE&#39;, &#39;JENNINGS&#39;, &#39;,&#39;, &#39;Esq.&#39;,\n&#39;sworn.&#39;, &#39;Had&#39;, &#39;you&#39;, &#39;any&#39;, &#39;occasion&#39;, &#39;to&#39;, &#39;be&#39;, &#39;in&#39;, &#39;this&#39;, &#39;part&#39;,\n&#39;of&#39;, &#39;the&#39;, &#39;town,&#39;, &#39;on&#39;, &#39;the&#39;, &#39;6th&#39;, &#39;of&#39;, &#39;June&#39;, &#39;in&#39;, &#39;the&#39;,\n&#39;evening?&#39;, &#39;-&#39;, &#39;I&#39;, &#39;dined&#39;, &#39;with&#39;, &#39;my&#39;, &#39;brother&#39;, &#39;who&#39;, &#39;lives&#39;,\n&#39;opposite&#39;, &#39;Mr.&#39;, &quot;Akerman&#39;s&quot;, &#39;house.&#39;, &#39;They&#39;, &#39;attacked&#39;, &#39;Mr.&#39;,\n&quot;Akerman&#39;s&quot;, &#39;house&#39;, &#39;precisely&#39;, &#39;at&#39;, &#39;seven&#39;, &quot;o&#39;clock;&quot;, &#39;they&#39;,\n&#39;were&#39;, &#39;preceded&#39;, &#39;by&#39;, &#39;a&#39;, &#39;man&#39;, &#39;better&#39;, &#39;dressed&#39;, &#39;than&#39;, &#39;the&#39;,\n&#39;rest,&#39;, &#39;who&#39;]\n</code></pre>\n<p>Simply having a list of words doesn’t buy you much yet. As human beings,\nwe already have the ability to read. You’re getting much closer to a\nrepresentation that your programs can process, however.</p>\n<h2 id=\"suggested-reading\">Suggested Reading</h2>\n<ul>\n<li>Lutz, <em>Learning Python</em><ul>\n<li>Ch. 7: Strings</li>\n<li>Ch. 8: Lists and Dictionaries</li>\n<li>Ch. 10: Introducing Python Statements</li>\n<li>Ch. 15: Function Basics</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"code-syncing\">Code Syncing</h3>\n<p>To follow along with future lessons it is important that you have the\nright files and programs in your programming-historian directory. At the\nend of each chapter in this series you can download the programming-historian zip file\nto make sure you have the correct code.</p>\n<ul>\n<li>python-lessons3.zip (<a href=\"/assets/python-lessons3.zip\">zip sync</a>)</li>\n</ul>\n"}