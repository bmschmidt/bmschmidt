{"metadata":{"title":"Data Mining the Internet Archive Collection","layout":"lesson","date":"2014-03-03T00:00:00.000Z","authors":["Caleb McDaniel"],"reviewers":["Adam Crymble"],"editors":["William J. Turkel","Adam Crymble"],"difficulty":2,"exclude_from_check":["review-ticket"],"activity":"acquiring","topics":["web-scraping"],"abstract":"The collections of the Internet Archive include many digitized historical sources. Many contain rich bibliographic data in a format called MARC. In this lesson, you'll learn how to use Python to automate the downloading of large numbers of MARC files from the Internet Archive and the parsing of MARC records for specific information such as authors, places of publication, and dates. The lesson can be applied more generally to other Internet Archive files and to MARC records found elsewhere.","redirect_from":"/lessons/data-mining-the-internet-archive","avatar_alt":"Group of of men working in a mine","doi":"10.46430/phen0035"},"html_body":"<p>{% include toc.html %}</p>\n<h2 id=\"lesson-goals\">Lesson Goals</h2>\n<p>The collections of the <a href=\"http://archive.org/\">Internet Archive</a> (IA) include many digitized\nsources of interest to historians, including <a href=\"https://archive.org/details/jstor_ejc\">early JSTOR journal\ncontent</a>, <a href=\"https://archive.org/details/johnadamsBPL\">John Adams&#39;s personal library</a>, and the <a href=\"https://archive.org/details/jcbhaiti\">Haiti\ncollection</a> at the John Carter Brown Library. In short, to quote\nProgramming Historian <a href=\"http://activehistory.ca/2013/09/the-internet-archive-rocks-or-two-million-plus-free-sources-to-explore/\">Ian Milligan</a>, &quot;The Internet Archive rocks.&quot;</p>\n<p>In this lesson, you&#39;ll learn how to download files from such collections\nusing a Python module specifically designed for the Internet Archive.\nYou will also learn how to use another Python module designed for\nparsing MARC XML records, a widely used standard for formatting\nbibliographic metadata.</p>\n<p>For demonstration purposes, this lesson will focus on working with the\ndigitized version of the <a href=\"http://archive.org/details/bplscas\">Anti-Slavery Collection</a> at the Boston\nPublic Library in Copley Square. We will first download a large\ncollection of MARC records from this collection, and then use Python to\nretrieve and analyze bibliographic information about items in the\ncollection. For example, by the end of this lesson, you will be able to\ncreate a list of every named place from which a letter in the\nantislavery collection was written, which you could then use for a\nmapping project or some other kind of analysis.</p>\n<h2 id=\"for-whom-is-this-useful\">For Whom Is This Useful?</h2>\n<p>This intermediate lesson is good for users of the Programming Historian\nwho have completed general lessons on downloading files and performing\ntext analysis on them, but would like an applied example of these\nprinciples. It will also be of interest to historians or archivists who\nwork with the MARC format or the Internet Archive on a regular basis.</p>\n<h2 id=\"before-you-begin\">Before You Begin</h2>\n<p>To write scripts that interact with the Internet Archive, you will\nfirst need to <a href=\"https://archive.org/account/login.createaccount.php\">create an IA account</a>.\nFollow the steps to confirm your account and carefully note down\nyour email address and password.</p>\n<p>We will be working with two Python modules that are not included in\nPython&#39;s standard library.</p>\n<p>The first, <a href=\"https://pypi.python.org/pypi/internetarchive\">internetarchive</a>, provides programmatic access to the\nInternet Archive. The second, <a href=\"https://pypi.python.org/pypi/pymarc/\">pymarc</a>, makes it easier to parse MARC\nrecords.</p>\n<p>The easiest way to download both is to use pip, the python package\nmanager. Begin by installing <code>pip</code> using Fred Gibbs&#39; <a href=\"/lessons/installing-python-modules-pip\">Installing Python Modules with pip</a>. Then issue these commands at the command line: To install\n<code>internetarchive</code>:</p>\n<pre><code class=\"language-bash\">sudo pip install internetarchive\n</code></pre>\n<p>Now you will need to configure your computer so that the new package\nwill work. Type <code>ia configure</code> at the command line, and then enter in\nthe email address and password you used above to create your Internet Archive\naccount.</p>\n<p>To install <code>pymarc</code>:</p>\n<pre><code class=\"language-bash\">sudo pip install pymarc\n</code></pre>\n<p>Now you are ready to go to work!</p>\n<h2 id=\"the-antislavery-collection-at-the-internet-archive\">The Antislavery Collection at the Internet Archive</h2>\n<p>The Boston Public Library&#39;s anti-slavery collection at Copley Square\ncontains not only the letters of William Lloyd Garrison, one of the\nicons of the American abolitionist movement, but also large collections\nof letters by and to reformers somehow connected to him. And by &quot;large\ncollection,&quot; I mean large. According to the library&#39;s estimates, there\nare over 16,000 items at Copley.</p>\n<p>As of this writing, approximately 7,000 of those items have been\ndigitized and uploaded to the <a href=\"http://archive.org/\">Internet Archive</a>. This is good news,\nnot only because the Archive is committed to making its considerable\ncultural resources free for download, but also because each uploaded\nitem is paired with a wealth of metadata suitable for machine-reading.</p>\n<p>Take <a href=\"http://archive.org/details/lettertowilliaml00doug\">this letter</a> sent by Frederick Douglass to William Lloyd\nGarrison. Anyone can read the <a href=\"http://archive.org/stream/lettertowilliaml00doug/39999066767938#page/n0/mode/2up\">original manuscript</a> online, without\nmaking the trip to Boston, and that alone may be enough to revolutionize\nand democratize future abolitionist historiography. But you can also\ndownload <a href=\"http://archive.org/download/lettertowilliaml00doug\">multiple files</a> related to the letter that are rich in\nmetadata, like a <a href=\"http://archive.org/download/lettertowilliaml00doug/lettertowilliaml00doug_dc.xml\">Dublin Core</a> record and a fuller <a href=\"http://archive.org/download/lettertowilliaml00doug/lettertowilliaml00doug_marc.xml\">MARCXML</a> record\nthat uses the <a href=\"http://www.loc.gov/marc/bibliographic/\">Library of Congress&#39;s MARC 21 Format for Bibliographic\nData</a>.</p>\n<p>Stop and think about that for a moment: every item uploaded from the\nCollection contains these things. Right now, that means historians have\naccess to rich metadata, full images, and partial descriptions for\n<a href=\"http://archive.org/search.php?query=collection%3Abplscas&amp;sort=-publicdate\">thousands of antislavery letters, manuscripts, and publications</a>.</p>\n<h2 id=\"accessing-an-ia-collection-in-python\">Accessing an IA Collection in Python</h2>\n<p>Internet Archive (IA) collections and items all have a unique\nidentifier, and URLs to collections and items all look like this:</p>\n<pre><code>\nhttp://archive.org/details/[IDENTIFIER]\n</code></pre>\n<p>So, for example, here is a URL to the Archive item discussed above,\nDouglass&#39;s letter to Garrison:</p>\n<pre><code>\nhttp://archive.org/details/lettertowilliaml00doug\n</code></pre>\n<p>And here is a URL to the entire antislavery collection at the Boston\nPublic Library:</p>\n<pre><code>\nhttp://archive.org/details/bplscas/\n</code></pre>\n<p>Because the URLs are so similar, the only way to tell that you are\nlooking at a collection page, instead of an individual item page, is to\nexamine the page layout. An item page usually has a lefthand sidebar\nthat says &quot;View the Book&quot; and lists links for reading the item online or\naccessing other file formats. A collection page will probably have a\n&quot;Spotlight Item&quot; in the lefthand sidebar instead. You can browse to\ndifferent collections through the <a href=\"https://archive.org/details/texts\">eBook and Texts</a> portal, and you\nmay also want to read a little bit about <a href=\"http://blog.archive.org/2011/03/31/how-archive-org-items-are-structured/\">the way that items and item\nURLs are structured</a>.</p>\n<p>Once you have a collection&#39;s identifier—in this case, <code>bplscas</code>—seeing\nall of the items in the collection is as easy as navigating to the\nArchive&#39;s <a href=\"https://archive.org/advancedsearch.php\">advanced search</a> page, selecting the id from the drop down\nmenu next to &quot;Collection,&quot; and hitting the search button. Performing\nthat search with <code>bplscas</code> selected returns <a href=\"https://archive.org/search.php?query=collection%3A%28bplscas%29\">this page</a>, which as of\nthis writing showed 7,029 results.</p>\n<p>We can also <a href=\"http://internetarchive.readthedocs.io/en/latest/quickstart.html#searching\">search the Archive using the Python module that we\ninstalled</a>, and doing so makes it easier to iterate over all the items\nin the collection for purposes of further inspection and downloading.</p>\n<p>For example, let&#39;s modify the sample code from the module&#39;s\ndocumentation to see if we can tell, with Python, how many items are in\nthe digital Antislavery Collection. The sample code looks something like\nwhat you see below. The only difference is that instead of importing\nonly the <code>search_items</code> module from <code>internetarchive</code>, we are going to\nimport the whole library.</p>\n<pre><code class=\"language-python\">import internetarchive\nsearch = internetarchive.search_items(&#39;collection:nasa&#39;)\nprint search.num_found\n</code></pre>\n<p>All we should need to modify is the collection identifier, from <code>nasa</code>\nto <code>bplscas</code>. After starting your computer&#39;s Python interpreter, try\nentering each of the above lines, followed by enter, but modify the\ncollection id in the second command:</p>\n<pre><code class=\"language-python\">search = internetarchive.search_items(&#39;collection:bplscas&#39;)\n</code></pre>\n<p>After hitting enter on the print command, you should see a number that\nmatches the number of results you saw when doing <a href=\"http://archive.org/search.php?query=collection%3Abplscas\">the advanced search\nfor the collection</a> in the browser.</p>\n<h2 id=\"accessing-an-ia-item-in-python\">Accessing an IA Item in Python</h2>\n<p>The <code>internetarchive</code> module also allows you to access individual items\nusing their identifiers. Let&#39;s try that using the <a href=\"http://internetarchive.readthedocs.io/en/latest/quickstart.html#downloading\">documentation&#39;s\nsample code</a>, modifying it in order to get the\nDouglass letter we discussed earlier.</p>\n<p>If you are still at your Python interpreter&#39;s command prompt, you don&#39;t\nneed to <code>import internetarchive</code> again. Since we imported the whole\nmodule, we also need to modify the sample code so that our interpreter\nwill know that <code>get_item</code> is from the <code>internetarchive</code> module. We also\nneed to change the sample identifier <code>stairs</code> to our item identifier,\n<em>lettertowilliaml00doug</em> (note that the character before the two zeroes\nis a lowercase L, not the number 1):</p>\n<pre><code class=\"language-python\">item = internetarchive.get_item(&#39;lettertowilliaml00doug&#39;)\nitem.download()\n</code></pre>\n<p>Enter each of those lines in your interpreter, followed by enter.\nDepending on your Internet connection speed, it will now probably take a\nminute or two for the command prompt to return, because your computer is\ndownloading all of the files associated with that item, including some\npretty large images. But when it&#39;s done downloading, you should be see a\nnew directory on your computer whose name is the item identifier. To\ncheck, first exit your Python interpreter:</p>\n<pre><code class=\"language-python\">exit()\n</code></pre>\n<p>Then list the contents of the current directory to see if a folder now\nappears named <code>lettertowilliaml00doug</code>. If you list the contents of that\nfolder, you should see a list of files similar to this:</p>\n<pre><code>39999066767938.djvu\n39999066767938.epub\n39999066767938.gif\n39999066767938.pdf\n39999066767938_abbyy.gz\n39999066767938_djvu.txt\n39999066767938_djvu.xml\n39999066767938_images.zip\n39999066767938_jp2.zip\n39999066767938_scandata.xml\nlettertowilliaml00doug_archive.torrent\nlettertowilliaml00doug_dc.xml\nlettertowilliaml00doug_files.xml\nlettertowilliaml00doug_marc.xml\nlettertowilliaml00doug_meta.mrc\nlettertowilliaml00doug_meta.xml\nlettertowilliaml00doug_metasource.xml\n</code></pre>\n<p>Now that we know how to use the Search and Item functions in the\n<code>internetarchive</code> module, we can turn to thinking about how to make this\nprocess more effective for downloading lots of information from the\ncollection for further analysis.</p>\n<h2 id=\"downloading-marc-records-from-a-collection\">Downloading MARC Records from a Collection</h2>\n<p>Downloading one item is nice, but what if we want to look at thousands\nof items in a collection? We&#39;re in luck, because the <code>internetarchive</code>\nmodule&#39;s Search function allows us to iterate over all the results in a\nsearch.</p>\n<p>To see how, let&#39;s first start our Python interpreter again. We&#39;ll need\nto import our module again, and perform our search again:</p>\n<pre><code class=\"language-python\">import internetarchive\nsearch = internetarchive.search_items(&#39;collection:bplscas&#39;)\n</code></pre>\n<p>Now let&#39;s enter the documentation&#39;s sample code for printing out the\nitem identifier of every item returned by our search:</p>\n<pre><code class=\"language-python\">for result in search:\n   print result[&#39;identifier&#39;]\n</code></pre>\n<p>Note that after entering the first line, your Python interpreter will\nautomatically print an ellipsis on line two. This is because you have\nstarted a <em>for loop,</em> and Python is expecting there to be more. It wants\nto know what you want to do for each result in the search. That&#39;s also\nwhy, once you hit enter on the second line, you&#39;ll see a third line with\nanother ellipsis, because Python doesn&#39;t know whether you are finished\ntelling it what to do with each result. Hit enter again to end the for\nloop and execute the command.</p>\n<p>You should now see your terminal begin to print out the identifiers for\neach result returned by our <em>bplscas search</em>---in this case, all 7,029 of\nthem! You can interrupt the print out by hitting <code>Ctrl-C</code> on your\nkeyboard, which will return you to the prompt.</p>\n<p>If you didn&#39;t see identifiers printing out to your screen, but instead\nsaw an error like this, you may have forgotten to enter a few spaces\nbefore your print command:</p>\n<pre><code class=\"language-python\">for result in search:\n   print result[&#39;identifier&#39;]\nFile &quot;&quot;, line 2\n   print result[&#39;identifier&#39;]\n      ^\nIndentationError: expected an indented block\n</code></pre>\n<p>Remember that whitespace matters in Python, and you need to indent the\nlines in a for loop so that Python can tell which command(s) to perform\non each item in the loop.</p>\n<h2 id=\"understanding-the-for-loop\">Understanding the for loop</h2>\n<p>The <em>for loop,</em> expressed in plain English, tells Python to do something\nto each thing in a collection of things. In the above case, we printed\nthe identifier for each result in the results of our collection search.\nTwo additional points about the <em>for loop:</em></p>\n<p>First, the word we used after <code>for</code> is what&#39;s called a <em>local variable</em> in\nPython. It serves as a placeholder for whatever instance or item we are\ngoing to be working with inside the loop. Usually it makes sense to pick\na name that describes what kind of thing we are working with—in this\ncase, a search result—but we could have used other names in place of\nthat one. For example, try running the above for loop again, but\nsubstitute a different name for the local variable, such as:</p>\n<pre><code class=\"language-python\">for item in search:\n   print item[&#39;identifier&#39;]\n</code></pre>\n<p>You should get the same results.</p>\n<p>The second thing to note about the <em>for loop</em> is that the indented block\ncould could have contained other commands. In this case, we printed each\nindividual search result&#39;s identifier. But we could have chosen to do,\nfor each result, anything that we could do to an individual Internet\nArchive item.</p>\n<p>For example, earlier we downloaded all the files associated with the\nitem <em>lettertowilliaml00doug.</em> We could have done that to each item\nreturned by our search by changing the line <code>print result[&#39;identifier&#39;]</code>\nin our <em>for loop</em> to <code>result.download()</code>.</p>\n<p>We probably want to think twice before doing that, though—downloading\nall the files for each of the 7,029 items in the bplscas collection is a\nlot of files. Fortunately, the download function in the\n<code>internetarchive</code> module also allows you to <a href=\"http://internetarchive.readthedocs.io/en/latest/quickstart.html#downloading\">download specific files\nassociated with an item</a>. If we had only wanted to download the MARC XML record associated with a particular item, we could have instead done this:</p>\n<pre><code class=\"language-python\">item = internetarchive.get_item(&#39;lettertowilliaml00doug&#39;)\nmarc = item.get_file(&#39;lettertowilliaml00doug_marc.xml&#39;)\nmarc.download()\n</code></pre>\n<p>Because Internet Archive <a href=\"https://archive.org/about/faqs.php#140\">item files are named according to specific\nrules</a>, we can also figure out the name of the MARC file we want just\nby knowing the item&#39;s unique identifier. And armed with that knowledge,\nwe can proceed to …</p>\n<h2 id=\"download-all-the-marc-xml-files-from-a-collection\">Download All the MARC XML Files from a Collection</h2>\n<p>For the next section, we&#39;re going to move from using the Python shell to\nwriting a Python script that downloads the MARC record from each item in\nthe BPL Antislavery Collection. Try putting this script into Komodo or\nyour preferred text editor:</p>\n<pre><code class=\"language-python\">#!/usr/bin/python\n\nimport internetarchive\n\nsearch = internetarchive.search_items(&#39;collection:bplscas&#39;)\n\nfor result in search:\n    itemid = result[&#39;identifier&#39;]\n    item = internetarchive.get_item(itemid)\n    marc = item.get_file(itemid + &#39;_marc.xml&#39;)\n    marc.download()\n    print &quot;Downloading &quot; + itemid + &quot; ...&quot;\n</code></pre>\n<p>This script looks a lot like the experiments we have done above with the\nFrederick Douglass letter, but since we want to download the MARC record\nfor each item returned by our collection search, we are using an itemid\nvariable to account for the fact that the identifier and filename will\nbe different for each result.</p>\n<p>Before running this script (which, I should note, is going to download\nthousands of small XML files to your computer), make a directory where\nyou want those MARC records to be stored and place the above script in\nthat directory. Then run the script from within the directory so that\nthe files will be downloaded in an easy-to-find place.</p>\n<p>(Note that if you receive what looks like a <code>ConnectionError</code> on your\nfirst attempt, check your Internet connection, wait a few minutes, and\nthen try running the script again.)</p>\n<p>If all goes well, when you run your script, you should see the program\nbegin to print out status updates telling you that it is downloading\nMARC records. But allowing the script to run its full course will\nprobably take a couple of hours, so let&#39;s stop the script and look a\nlittle more closely at ways to improve it. Pressing <code>Ctrl-C</code> while in\nyour terminal window should make the script stop.</p>\n<h2 id=\"building-error-reporting-into-the-script\">Building Error Reporting into the Script</h2>\n<p>Since downloading all of these records will take some time, we are\nprobably going to want to walk away from our computer for a while. But\nthe chances are high that during those two hours, something could go\nwrong that would prevent our script from working.</p>\n<p>Let&#39;s say, for example, that we had forgotten that we already downloaded\nan individual file into this directory. Or maybe your computer briefly\nloses its Internet connection, or some sort of outage happens on the\nInternet Archive server that prevents the script from getting the file\nit wants.</p>\n<p>In those and other error cases, Python will raise an &quot;exception&quot; telling\nyou what the problem is. Unfortunately, an exception will also crash\nyour script instead of continuing on to the next item.</p>\n<p>To prevent this, we can use what&#39;s called a <em>try statement</em> in Python,\nwhich does exactly what it sounds like. The statement will try to\nexecute a certain snippet of code until it hits an exception, in which\ncase you can give it some other code to execute instead. You can read\nmore about <a href=\"http://docs.python.org/2/tutorial/errors.html#handling-exceptions\">handling exceptions</a> in the Python documentation, but for\nnow let&#39;s just update our above script so that it looks like this:</p>\n<pre><code class=\"language-python\">#!/usr/bin/python\n\nimport internetarchive\nimport time\n\nerror_log = open(&#39;bpl-marcs-errors.log&#39;, &#39;a&#39;)\n\nsearch = internetarchive.search_items(&#39;collection:bplscas&#39;)\n\nfor result in search:\n    itemid = result[&#39;identifier&#39;]\n    item = internetarchive.get_item(itemid)\n    marc = item.get_file(itemid + &#39;_marc.xml&#39;)\n    try:\n        marc.download()\n    except Exception as e:\n        error_log.write(&#39;Could not download &#39; + itemid + &#39; because of error: %s\\n&#39; % e)\n        print &quot;There was an error; writing to log.&quot;\n    else:\n        print &quot;Downloading &quot; + itemid + &quot; ...&quot;\n        time.sleep(1)\n</code></pre>\n<p>The main thing we&#39;ve added here, after our module import statements, is\na line that opens a text file called <code>bpl-marcs-errors.log</code> and prepares\nit to have text appended to it. We are going to use this file to log\nexceptions that the script raises. The <em>try statement</em> that we have added\nto our <em>for loop</em> will attempt to download the MARC record. If it can&#39;t,\nit will write a descriptive statement about what went wrong to our log\nfile. That way we can go back to the file later and identify which items\nwe will need to try to download again. If the try clause succeeds and\ncan download the record, then the script will execute the code in the\n<em>else</em> clause.</p>\n<p>One other thing we have added, upon successful download, is this line:</p>\n<pre><code class=\"language-python\">time.sleep(1)\n</code></pre>\n<p>This line uses the <code>time</code> module that we are now importing at the\nbeginning to tell our script to pause for one second before proceeding,\nwhich is basically just a way for us to be nice to Internet Archive&#39;s\nservers by not clobbering them every millisecond or so with a request.</p>\n<p>Try updating your script to look like the above lines, and run it again\nin the directory where you want to store your MARC files. Don&#39;t be\nsurprised if you immediately encounter a string of error messages; that\nmeans the script is doing what it&#39;s supposed to do! Calmly go into your\ntext editor, while leaving the script running, and open the\n<code>bpl-marcs-errors.log</code> to see what exceptions have been recorded there.\nYou&#39;ll probably see that the script raised the exception &quot;File already\nexists&quot; for each of the files that you had already downloaded when\nrunning our earlier, shorter program.</p>\n<p>If you leave the program running for a little while, the script will\neventually get to items that you have not already downloaded and resume\ncollecting your MARCs!</p>\n<h2 id=\"scraping-information-from-a-marc-record\">Scraping Information from a MARC Record</h2>\n<p>Once your download script has completed, you should find yourself in the\npossession of nearly 7,000 detailed MARC XML records about items in the\nAnti-Slavery Collection (or whichever other collection you may have\ndownloaded instead; the methods above should work on any collection\nwhose items have MARC files attached to them).</p>\n<p>Now what?</p>\n<p>The next step depends on what sort of questions about the collection you\nwant to answer. The MARC formatting language captures a wealth of data\nabout an item, as you can see if you return to <a href=\"http://archive.org/download/lettertowilliaml00doug/lettertowilliaml00doug_marc.xml\">the MARC XML record for\nthe Frederick Douglass letter</a> mentioned at the outset.</p>\n<p>Notice, for example, that the Douglass letter contains information about\nthe place where the letter was written in the <em>datafield</em> that is tagged\n<em>260,</em> inside the subfield coded <em>a.</em> The person who prepared this MARC\nrecord knew to put place information in that specific field because of\n<a href=\"http://www.loc.gov/marc/bibliographic/bd260.html\">rules specified for the 260 datafield</a> by the <a href=\"http://www.loc.gov/marc/\">MARC standards</a>.</p>\n<p>That means that it should be possible for us to look inside all of the\nMARC records we have downloaded, grab the information inside of\ndatafield <em>260,</em> subfield <em>a,</em> and make a list of every place name where\nitems in the collection were published.</p>\n<p>To do this, we&#39;ll use the other helpful Python module that we downloaded\nwith <code>pip</code> at the beginning: <a href=\"https://github.com/edsu/pymarc\">pymarc</a>.</p>\n<p>That module makes it easy to get information out of subfields. Assuming\nthat we have a MARC record prepared for parsing by the module assigned\nto the variable record, we could get the information about publication\nplace names this way:</p>\n<pre><code class=\"language-python\">place_of_pub = record[&#39;260&#39;][&#39;a&#39;]\n</code></pre>\n<p>The documentation for <code>pymarc</code> is a little less complete than that for\nthe Internet Archive, especially when it comes to parsing XML records.\nBut a little rooting around in the source code for the module reveals\nsome <a href=\"https://github.com/edsu/pymarc/blob/master/pymarc/marcxml.py\">functions that it provides for working with MARC XML records</a>.\nOne of these, called <code>map_xml()</code> is described this way:</p>\n<pre><code class=\"language-python\">def map_xml(function, *files):\n    &quot;&quot;&quot;\n    map a function onto the file, so that for each record that is\n    parsed the function will get called with the extracted record\n\n    def do_it(r):\n    print r\n\n    map_xml(do_it, &#39;marc.xml&#39;)\n    &quot;&quot;&quot;\n</code></pre>\n<p>Translated into plain English, this function means that we can take an\nXML file containing MARC data (like the nearly 7,000 we now have on our\ncomputer), pass it to the <code>map_xml</code> function in the <code>pymarc</code> module, and\nthen specify another function (that we will write) telling our program\nwhat to do with the MARC data retrieved from the XML file. In rough\noutline, our code will look something like this:</p>\n<pre><code class=\"language-python\">import pymarc\n\ndef get_place_of_pub(record):\n    place_of_pub = record[&#39;260&#39;][&#39;a&#39;]\n    print place_of_pub\n\npymarc.map_xml(get_place_of_pub, &#39;lettertowilliaml00doug_marc.xml&#39;)\n</code></pre>\n<p>Try saving that code to a script and running it from a directory where\nyou already have the Douglass letter XML saved. If all goes well, the\nscript should spit out this:</p>\n<pre><code class=\"language-python\">Belfast, [Northern Ireland],\n</code></pre>\n<p>Voila! Of course, this script would be much more useful if we scraped\nthe place of publication from every letter in our collection of MARC\nrecords. Putting together what we&#39;ve learned from earlier in the lesson,\nwe can do that with a script that looks like this:</p>\n<pre><code class=\"language-python\">#!/usr/bin/python\n\nimport os\nimport pymarc\n\npath = &#39;/path/to/dir/with/xmlfiles/&#39;\n\ndef get_place_of_pub(record):\n    try:\n        place_of_pub = record[&#39;260&#39;][&#39;a&#39;]\n        print place_of_pub\n    except Exception as e:\n        print e\n\nfor file in os.listdir(path):\n    if file.endswith(&#39;.xml&#39;):\n        pymarc.map_xml(get_place_of_pub, path + file)\n</code></pre>\n<p>This script modifies our above code in several ways. First, it uses a\n<em>for loop</em> to iterate over each file in our directory. In place of the\n<code>internetarchive</code> search results that we iterated over in our first part\nof this lesson, we iterate over the files returned by <code>os.listdir(path)</code>\nwhich uses the built-in Python module <code>os</code> to list the contents of the\ndirectory specified in the path variable, which you will need to modify\nso that it matches the directory where you have downloaded all of your\nMARC files.</p>\n<p>We have also added some error handling to our <code>get_place_of_pub()</code>\nfunction to account for the fact that some records may (for whatever\nreason) not contain the information we are looking for. The function\nwill try to print the place of publication, but if this raises an\nException, it will print out the information returned by the Exception\ninstead. In this case, if the try statement failed, the exception will\nprobably print <code>None</code>. Understanding why is a subject for another lesson\non Python Type errors, but for now the None printout is descriptive\nenough of what happened, so it could be useful to us.</p>\n<p>Try running this script. If all goes well, your screen should fill with\na list of the places where these letters were written. If that works,\ntry modifying your script so that it saves the place names to a text\nfile instead of printing them to your screen. You could then use the\n<a href=\"/lessons/counting-frequencies\">Counting Frequencies</a> lesson to figure out which place names are most\ncommon in the collection. You could work with the place names to find\ncoordinates that could be placed on a map using the <a href=\"/lessons/googlemaps-googleearth\">Google Maps\nlesson</a>.</p>\n<p>Or, to get a very rough visual sense of the places where letters were\nwritten, you could do what I&#39;ve done below and simply make a <a href=\"https://web.archive.org/web/20201202151557/http://www.wordle.net/\">Wordle\nword cloud</a> of the text file.</p>\n<p>{% include figure.html filename=&quot;bpl-wordle.png&quot; caption=&quot;Wordle wordcloud of places of publication for abolitionist letters&quot; %}</p>\n<p>Of course, to make such techniques useful would require more <a href=\"/lessons/cleaning-ocrd-text-with-regular-expressions\">cleaning\nof your data</a>. And other applications of this lesson may prove more\nuseful. For example, working with the MARC data fields for personal\nnames, you could create a network of correspondents. Or you could\nanalyze which subjects are common in the MARC records. Now that you have\nthe MARC records downloaded and can use <code>pymarc</code> to extract information\nfrom the fields, the possibilities can multiply rapidly!</p>\n"}