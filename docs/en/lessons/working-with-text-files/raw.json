{"metadata":{"title":"Working with Text Files in Python","layout":"lesson","date":"2012-07-17T00:00:00.000Z","authors":["William J. Turkel","Adam Crymble"],"reviewers":["Jim Clifford"],"editors":["Miriam Posner"],"difficulty":2,"exclude_from_check":["review-ticket"],"activity":"transforming","topics":["python"],"abstract":"In this lesson you will learn how to manipulate text files using Python.","next":"code-reuse-and-modularity","previous":"viewing-html-files","series_total":"15 lessons","sequence":3,"python_warning":false,"redirect_from":"/lessons/working-with-text-files","avatar_alt":"Bespectacled man reading an alphabet book","doi":"10.46430/phen0020"},"html_body":"<p>{% include toc.html %}</p>\n<h2 id=\"lesson-goals\">Lesson Goals</h2>\n<p>In this lesson you will learn how to manipulate text files using Python.\nThis includes opening, closing, reading from, and writing to <code>.txt</code>\nfiles using programming.</p>\n<p>The next few lessons in this series will involve downloading a web page from the\nInternet and reorganizing the contents into useful chunks of\ninformation. You will be doing most of your work using Python code\nwritten and executed in Komodo Edit.</p>\n<h2 id=\"working-with-text-files\">Working with Text Files</h2>\n<p>Python makes it easy to work with files and text. Let’s begin with\nfiles.</p>\n<h2 id=\"creating-and-writing-to-a-text-file\">Creating and Writing to a Text File</h2>\n<p>Let’s start with a brief discussion of terminology. In a previous lesson\n(depending on your operating system: <a href=\"/lessons/mac-installation\">Mac Installation</a>, <a href=\"/lessons/windows-installation\">Windows\nInstallation</a>, or <a href=\"/lessons/linux-installation\">Linux Installation</a>), you saw how to send\ninformation to the &quot;Command Output&quot; window of your text editor by using\nPython&#39;s <a href=\"https://docs.python.org/2/reference/simple_stmts.html#the-print-statement\">print</a> command.</p>\n<pre><code class=\"language-python\">print(&#39;hello world&#39;)\n</code></pre>\n<p>The Python programming language is <em>object-oriented</em>. That is to say that\nit is constructed around a special kind of entity, an <em>object</em>, which\ncontains both <em>data</em> and a number of <em>methods</em> for accessing and altering\nthat data. Once an object is created, it can interact with other\nobjects.</p>\n<p>In the example above, we see one kind of object, the <em>string</em> &quot;hello\nworld&quot;. The string is the sequence of characters enclosed by quotes. You\ncan write a string one of three ways:</p>\n<pre><code>message1 = &#39;hello world&#39;\nmessage2 = &quot;hello world&quot;\nmessage3 = &quot;&quot;&quot;hello\nhello\nhello world&quot;&quot;&quot;\n</code></pre>\n<p>The important thing to note is that in the first two examples you can\nuse single or double quotes / inverted commas, but you cannot mix the\ntwo within one string.</p>\n<p>For instance, the following are all wrong:</p>\n<pre><code>message1 = &quot;hello world&#39;\nmessage2 = &#39;hello world&quot;\nmessage3 = &#39;I can&#39;t eat pickles&#39;\n</code></pre>\n<p>Count the number of single quotes in message3. For that to work you\nwould have to <em>escape</em> the apostrophe:</p>\n<pre><code class=\"language-python\">message3 = &#39;I can\\&#39;t eat pickles&#39;\n</code></pre>\n<p>Or, rewrite the phrase as:</p>\n<pre><code class=\"language-python\">message3 = &quot;I can&#39;t eat pickles&quot;\n</code></pre>\n<p>In the third example, the triple quotes signify a string that covers\nmore than one line.</p>\n<p><code>Print</code> is a command that prints objects in textual form. The print\ncommand, when combined with the string, produces a <em>statement</em>.</p>\n<p>You will use <code>print</code> like this in cases where you want to create\ninformation that needs to be acted upon right away. Sometimes, however,\nyou will be creating information that you want to save, to send to\nsomeone else, or to use as input for further processing by another\nprogram or set of programs. In these cases you will want to send\ninformation to files on your hard drive rather than to the &quot;Command\nOutput&quot; pane. Enter the following program into your text editor and save\nit as <code>file-output.py</code>.</p>\n<pre><code class=\"language-python\"># file-output.py\nf = open(&#39;helloworld.txt&#39;,&#39;w&#39;)\nf.write(&#39;hello world&#39;)\nf.close()\n</code></pre>\n<p>In Python, any line that begins with a hash mark (#) is known as a\n<em>comment</em> and is ignored by the Python interpreter. Comments are intended\nto allow programmers to communicate with one another (or to remind\nthemselves of what their code does when they sit down with it a few\nmonths later). In a larger sense, programs themselves are typically\nwritten and formatted in a way that makes it easier for programmers to\ncommunicate with one another. Code that is closer to the requirements of\nthe machine is referred to as <em>low-level</em>, whereas code that is closer to\nnatural language is <em>high-level</em>. One of the benefits of using a language\nlike Python is that it is very high level, making it easier for us to\ncommunicate with you (at some cost in terms of computational\nefficiency).</p>\n<p>In this program <em>f</em> is a <em>file object</em>, and <code>open</code>, <code>write</code> and <code>close</code> are <em>file\nmethods</em>. In other words, open, write and close do something to the\nobject <em>f</em> which is in this case defined as a <code>.txt</code> file. This is likely\na different use of the term &quot;method&quot; than you might expect and from time\nto time you will find that words used in a programming context have\nslightly (or completely) different meanings than they do in everyday\nspeech. In this case recall that methods are bits of code which perform\nactions. They do something to something else and return a result. You\nmight try to think of it using a real-world example such giving commands\nto the family dog. The dog (the object) understands commands (i.e., has\n&quot;methods&quot;) such as &quot;bark&quot;, &quot;sit&quot;, &quot;play dead&quot;, and so on. We will\ndiscuss and learn how to use many other methods as we go along.</p>\n<p><em>f</em> is a variable name chosen by us; you could have named it just about\nanything you like. In Python, variable names can be made from upper- and\nlowercase letters, numbers and underscores…but you can&#39;t use the names\nof Python commands as variables. If you tried to name your file variable\n&quot;print&quot; for example, your program would not work because that is a\n<a href=\"http://docs.python.org/release/2.5.4/ref/keywords.html\">reserved word</a> that is part of the programming language.</p>\n<p>Python variable names are also <em>case-sensitive</em>, which means that\nfoobar, Foobar and FOOBAR would all be different variables.</p>\n<p>When you run this program, the <code>open</code> method will tell your computer to\ncreate a new text file <code>helloworld.txt</code> in the same folder as you have\nsaved the <code>file-output.py</code> program. The <em>w parameter</em> says that you intend\nto write content to this new file using Python.</p>\n<p>Note that since both the file name and the parameter are surrounded by\nsingle quotes you know they are both stored as strings; forgetting to\ninclude the quotation marks will cause your program to fail.</p>\n<p>On the next line, your program writes the message &quot;hello world&quot; (another\nstring) to the file and then closes it. (For more information about\nthese statements, see the section on <a href=\"https://docs.python.org/2/library/stdtypes.html#bltin-file-objects\">File Objects</a> in the Python\nLibrary Reference.)</p>\n<p>Double-click on your &quot;Run Python&quot; button in Komodo Edit to execute the\nprogram (or the equivalent in whichever text-editor you have decided to\nuse: e.g., click on the &quot;#!&quot; and &quot;Run&quot; in TextWrangler). Although nothing\nwill be printed to the &quot;Command Output&quot; pane, you will see a status\nmessage that says something like</p>\n<pre><code class=\"language-python\">`/usr/bin/python file-output.py` returned 0.\n</code></pre>\n<p>in Mac or Linux, or</p>\n<pre><code class=\"language-python\">&#39;C:\\Python27\\Python.exe file-output.py&#39; returned 0.\n</code></pre>\n<p>in Windows.</p>\n<p>This means that your program executed successfully. If you use\n<em>File -&gt; Open -&gt; File</em> in your Komodo Edit, you can open the file\n<code>helloworld.txt</code>. It should contain your one-line message:</p>\n<pre><code class=\"language-python\">Hello World!\n</code></pre>\n<p>Since text files include a minimal amount of formatting information,\nthey tend to be small, easy to exchange between different platforms\n(i.e., from Windows to Linux or Mac or vice versa), and easy to send\nfrom one computer program to another. They can usually also be read by\npeople using a text editor like Komodo Edit.</p>\n<h3 id=\"reading-from-a-text-file\">Reading From a Text File</h3>\n<p>Python also has methods which allow you to get information from files.\nType the following program into your text editor and save it as\n<code>file-input.py</code>. When you click on &quot;Run&quot; to execute it, it will open the\ntext file that you just created, read the one-line message from it, and\nprint the message to the &quot;Command Output&quot; pane.</p>\n<pre><code class=\"language-python\"># file-input.py\nf = open(&#39;helloworld.txt&#39;,&#39;r&#39;)\nmessage = f.read()\nprint(message)\nf.close()\n</code></pre>\n<p>In this case, the <em>r</em> parameter is used to indicate that you are opening a\nfile to <code>read</code> from it. Parameters let you choose among the different\noptions a particular method allows. Returning to the family dog example,\nthe dog may be trained to bark once when he gets a beef-flavoured snack\nand twice when he gets a chicken-flavoured one. The flavour of the snack\nis a parameter. Each method is different in terms of what parameters it\nwill accept. You cannot, for example, ask the dog to sing an Italian\nopera – unless your dog is particularly talented. You can look up the\npossible parameters for a particular method on the Python website, or\noften you can find them by typing the method into a search engine along\nwith &quot;Python&quot;.</p>\n<p><code>Read</code> is another file method. The contents of the file (the one-line\nmessage) are copied into <em>message</em>, which is what we&#39;ve decided to call\nthis string, and then the <code>print</code> command is used to send the contents of\n<em>message</em> to the &quot;Command Output&quot; pane.</p>\n<h3 id=\"appending-to-a-pre-existing-text-file\">Appending to a Pre-Existing Text File</h3>\n<p>A third option is to open a pre-existing file and add more to it. Note\nthat if you <code>open</code> a file and use the <code>write</code> method, <em>the program will\noverwrite whatever might have been contained in the file</em>. This isn’t an\nissue when you are creating a new file, or when you want to overwrite\nthe contents of an existing file, but it might be undesirable when you\nare creating a log of events or compiling a large set of data into one\nfile. So, instead of <code>write</code> you will want to use the <code>append</code> method,\ndesignated by <code>a</code>.</p>\n<p>Type the following program into your text editor and save it as\n<code>file-append.py</code>. When you run this program it will open the same\n<code>helloworld.txt</code> file created earlier and append a second “hello world”\nto the file. The &#39;\\n&#39; stands for new line.</p>\n<pre><code class=\"language-python\"># file-append.py\nf = open(&#39;helloworld.txt&#39;,&#39;a&#39;)\nf.write(&#39;\\n&#39; + &#39;hello world&#39;)\nf.close()\n</code></pre>\n<p>After you have run the program, open the <code>helloworld.txt</code> file and see\nwhat happened. Close the text file and re-run <code>file-append.py</code> a few\nmore times. When you open <code>helloworld.txt</code> again you should notice a few\nextra &#39;hello world&#39; messages waiting for you.</p>\n<p>In the next section, we will discuss modularity and reusing code.</p>\n<h2 id=\"suggested-readings\">Suggested Readings</h2>\n<ul>\n<li><a href=\"http://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_2.6/Hello,_World\">Non-Programmer’s Tutorial for Python 2.6/Hello, World</a></li>\n</ul>\n"}