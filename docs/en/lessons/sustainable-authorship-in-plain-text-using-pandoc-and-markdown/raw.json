{"metadata":{"title":"Sustainable Authorship in Plain Text using Pandoc and Markdown","layout":"lesson","date":"2014-03-19T00:00:00.000Z","authors":["Dennis Tenen","Grant Wythoff"],"editors":["Fred Gibbs"],"lesson-testers":["Pao-Chuan Ma"],"tested-date":"2021-06-10T00:00:00.000Z","difficulty":2,"activity":"sustaining","topics":["website","data-management"],"abstract":"In this tutorial, you will first learn the basics of Markdown—an easy to read and write markup syntax for plain text—as well as Pandoc, a command line tool that converts plain text into a number of beautifully formatted file types: PDF, .docx, HTML, LaTeX, slide decks, and more.","exclude_from_check":["reviewers","review-ticket"],"redirect_from":"/lessons/sustainable-authorship-in-plain-text-using-pandoc-and-markdown","avatar_alt":"A man working at a drafting table","doi":"10.46430/phen0041"},"html_body":"<p>{% include toc.html %}</p>\n<p>{% include figure.html filename=&quot;lexoriter.jpg&quot; caption=&quot;&quot; %}</p>\n<h2 id=\"objectives\">Objectives</h2>\n<p>In this tutorial, you will first learn the basics of Markdown—an easy to\nread and write markup syntax for plain text—as well as\n<a href=\"http://johnmacfarlane.net/pandoc/\">Pandoc</a>, a command line tool that\nconverts plain text into a number of beautifully formatted file types:\nPDF, .docx, HTML, LaTeX, slide decks, and more.[^1] With Pandoc\nas your digital typesetting tool, you can use Markdown syntax to add\nfigures, a bibliography, formatting, and easily change citation styles\nfrom Chicago to MLA (for instance), all using plain text.</p>\n<p>The tutorial assumes no prior technical knowledge, but it scales with\nexperience, as we often suggest more advanced techniques towards the end\nof each section. These are clearly marked and can be revisited after\nsome practice and experimentation.</p>\n<p>Instead of following this tutorial in a mechanical way, we recommend you\nstrive to understand the solutions offered here as a <em>methodology</em>,\nwhich may need to be tailored further to fit your environment and\nworkflow. The installation of the necessary tools presents perhaps the\nbiggest barrier to participation. Allot yourself enough time and\npatience to install everything properly, or do it with a colleague who\nhas a similar set-up and help each other out. Consult the <a href=\"#useful-resources\">Useful\nResources</a> section below if you get\nstuck.[^2]</p>\n<h2 id=\"philosophy\">Philosophy</h2>\n<p>Writing, storing, and retrieving documents are activities central to the\nhumanities research workflow. And yet, many authors base their practice\non proprietary tools and formats that sometimes fall short of even the\nmost basic requirements of scholarly writing. Perhaps you can relate to\nbeing frustrated by the fragility of footnotes, bibliographies, figures,\nand book drafts authored in Microsoft Word or Google Docs. Nevertheless,\nmost journals still insist on submissions in .docx format.</p>\n<p>More than causing personal frustration, this reliance on proprietary\ntools and formats has long-term negative implications for the academic\ncommunity. In such an environment, journals must outsource typesetting,\nalienating authors from the material contexts of publication and adding\nfurther unnecessary barriers to the unfettered circulation of\nknowledge.[^3]</p>\n<p>When you use MS Word, Google Docs, or Open Office to write documents,\nwhat you see is not what you get. Beneath the visible layer of words,\nsentences, and paragraphs lies a complicated layer of code\nunderstandable only to machines. Because of that hidden layer, your\n.docx and .pdf files depend on proprietary tools to be rendered\ncorrectly. Such documents are difficult to search, to print, and to\nconvert into other file formats.</p>\n<p>Moreover, time spent formatting your document in MS Word or Open Office\nis wasted, because all that formatting is removed by the publisher\nduring submission. Both authors and publishers would benefit from\nexchanging files with minimal formatting, leaving the typesetting to the\nfinal typesetting stage of the publishing process.</p>\n<p>This is where Markdown shines. Markdown is a syntax for marking semantic\nelements within a document explicitly, not in some hidden layer. The\nidea is to identify units that are meaningful to humans, like titles,\nsections, subsections, footnotes, and illustrations. At the very least,\nyour files will always remain comprehensible to you, even if the editor\nyou are currently using stops working or &quot;goes out of business.&quot;</p>\n<p>Writing in this way liberates the author from the tool. Markdown can be\nwritten in any plain text editor and offers a rich ecosystem of software\nthat can render that text into beautiful looking documents. For this\nreason, Markdown is currently enjoying a period of growth, not just as\nas means for writing scholarly papers but as a convention for online\nediting in general.</p>\n<p>Popular general purpose plain text editors include <a href=\"https://atom.io/\">Atom</a>\n(all platforms) and <a href=\"http://notepad-plus-plus.org\">Notepad++</a> (Windows only).</p>\n<p>It is important to understand that Markdown is merely a convention.\nMarkdown files are stored as plain text, further adding to the\nflexibility of the format. Plain text files have been around since the\nelectronic typewriter. The longevity of this standard inherently makes\nplain text more sustainable and stable than proprietary formats. While\nfiles produced even ten years ago in Microsoft Word and Apple&#39;s Pages\ncan cause significant problems when opened with the latest version, it\nis still possible to open a file written in any number of &quot;dead&quot; plain\ntext editors from the past several decades: AlphaPlus, Perfect Writer,\nText Wizard, Spellbinder, WordStar, or Isaac Asimov&#39;s favorite SCRIPSIT\n2.0, made by Radio Shack. Writing in plain text guarantees that your\nfiles will remain readable ten, fifteen, twenty years from now. In this\ntutorial, we outline a workflow that frees the researcher from\nproprietary word processing software and fragile file formats.</p>\n<p>It is now possible to write a wide range of documents in one\nformat—articles, blog posts, wikis, syllabi, and recommendation\nletters—using the same set of tools and techniques to search, discover,\nbackup, and distribute our materials. Your notes, blog entries, code\ndocumentation, and wikis can all be authored in Markdown. Increasingly,\nmany platforms like WordPress, Reddit, and GitHub support Markdown\nauthorship natively. In the long term, your research will benefit from\nsuch unified workflows, making it easier to save, search, share, and\norganize your materials.</p>\n<h2 id=\"principles\">Principles</h2>\n<p>Inspired by best practices in a variety of disciplines, we were guided\nby the following principles:</p>\n<ol>\n<li><p><em>Sustainability.</em> Plain text both ensures transparency and answers\nthe standards of long-term preservation. MS Word may go the way of\nWord Perfect in the future, but plain text will always remain easy\nto read, catalog, mine, and transform. Furthermore, plain text\nenables easy and powerful versioning of the document, which is\nuseful in collaboration and organizing drafts. Your plain text files\nwill be accessible on cell phones, tablets, or, perhaps, on a\nlow-powered terminal in some remote library. Plain text is backwards\ncompatible and future-proof. Whatever software or hardware comes\nalong next, it will be able to understand your plain text files.</p>\n</li>\n<li><p><em>Preference for human-readable formats.</em> When writing in Word or\nGoogle Docs, what you see is not what you get. The .doc file\ncontains hidden, automatically-generated formatting characters,\ncreating an obfuscated typesetting layer that is difficult for the\nuser to troubleshoot. Something as simple as pasting an image or\ntext from the browser can have unpredictable effects on your\ndocument&#39;s formatting.</p>\n</li>\n<li><p><em>Separation of form and content.</em> Writing and formatting at the same\ntime is distracting. The idea is to write first, and format later,\nas close as possible to the time of publication. A task like\nswitching from Chicago to MLA formatting should be painless. Journal\neditors who want to save time on needless formatting and copy\nediting should be able to provide their authors with a formatting\ntemplate which takes care of the typesetting minutia.</p>\n</li>\n<li><p><em>Support for the academic apparatus.</em> The workflow needs to handle\nfootnotes, figures, international characters, and bibliographies\ngracefully.</p>\n</li>\n<li><p><em>Platform independence.</em> As the vectors of publication multiply, we\nneed to be able to generate a multiplicity of formats including for\nslide projection, print, web, and mobile. Ideally, we would like to\nbe able to generate the most common formats without breaking\nbibliographic dependencies. Our workflow needs to be portable as\nwell–it would be nice to be able to copy a folder to a thumbdrive\nand know that it contains everything needed for publication. Writing\nin plain text means you can easily share, edit, and archive your\ndocuments in virtually any environment. For example, a syllabus\nwritten in Markdown can be saved as a PDF, printed as a handout, and\nconverted into HTML for the web, all from the same file. Both web\nand print documents should be published from the same source and\nlook similar, preserving the logical layout of the material.</p>\n</li>\n</ol>\n<p>Markdown and LaTeX answer all of these requirements. We chose Markdown\n(and not LaTeX) because it offers the most light-weight and clutter free\nsyntax (hence, mark <em>down</em>) and because when coupled with Pandoc it\nallows for the greatest flexibility in outputs (including .docx and .tex\nfiles).[^5]</p>\n<h2 id=\"software-requirements\">Software Requirements</h2>\n<p>We purposefully omit some of the granular, platform- or operating\nsystem-bound details of installing the software listed below. For\nexample, it makes no sense to provide installation instructions for\nLaTeX, when the canonical online instructions for your operating system\nwill always remain more current and more complete. Similarly, the\nmechanics of Pandoc installation are best explored by searching for\n&quot;installing Pandoc&quot; on Google, with the likely first result being\nPandoc&#39;s homepage.</p>\n<ul>\n<li><p><strong>Plain text editor</strong>. Entering the world of plain-text editing expands\nyour choice of innovative authoring tools dramatically.  Search online for\n&quot;markdown text editor&quot; and experiment with your options. It does not matter\nwhat you use as long as it is explicitly a plain text editor, such as Atom or\nNotepad++. Remember, since we are not tied to the tool, you can change editors\nat any time.</p>\n</li>\n<li><p><strong>Command line terminal</strong>. Working &quot;in the command line&quot; is\nequivalent to typing commands into the terminal. On a Mac you simply\nneed to use your finder for &quot;Terminal&quot;. On Windows, use PowerShell.\nLinux users are likely to be familiar with their terminals already.\nWe will cover the basics of how to find and use the command line\nbelow.</p>\n</li>\n<li><p><strong>Pandoc</strong>. Detailed, platform-specific installation instructions\nare available at <a href=\"http://johnmacfarlane.net/pandoc/installing.html\">the Pandoc\nwebsite</a>.\n<em>Installation of Pandoc on your machine is crucial for this\ntutorial</em>, so be sure to take your time and click through the\ninstructions. Pandoc was created and is maintained by John\nMacFarlane, Professor of Philosophy at the University of California,\nBerkeley. This is humanities computing at its best and will serve as\nthe engine of our workflow. With Pandoc, you will be able to compile\ntext and bibliography into beautifully formatted and flexible\ndocuments. Once you&#39;ve followed the installation instructions,\nverify that Pandoc is installed by entering <code>pandoc --version</code> into\nthe command line. We assume that you have at least version 1.12.3,\nreleased in January 2014.</p>\n</li>\n</ul>\n<p>The following two pieces of software are recommended, but not required\nto complete this tutorial.</p>\n<ul>\n<li><p><strong>Zotero or Endnote</strong>. Bibliographic reference software like Zotero\nand Endnote are indispensable tools for organizing and formatting\ncitations in a research paper. These programs can export your\nlibraries as a BibTeX file (which you will learn more about in Case\n2 below). This file, itself a formatted plain text document of all\nyour citations, will allow you to quickly and easily cite references\nusing <code>@tags</code>. It should be noted that it&#39;s also possible to type\nall of your bibliographic references by hand, using <a href=\"https://github.com/dhcolumbia/pandoc-workflow/blob/master/pandoctut.bib\">our\nbibliography</a>\nas a template.</p>\n</li>\n<li><p><strong>LaTeX</strong>. Detailed, platform-specific installation instructions\navailable at <a href=\"http://johnmacfarlane.net/pandoc/installing.html\">the Pandoc\nwebsite</a>. Although\nLaTeX is not covered in this tutorial, it is used by Pandoc for .pdf\ncreation. Advanced users will often convert into LaTeX directly to\nhave more granular control over the typesetting of the .pdf.\nBeginners may want to consider skipping this step. Otherwise, type\n<code>latex -v</code> to see if LaTeX was installed correctly (you will get an\nerror if it was not and some information on the version if it was).</p>\n</li>\n</ul>\n<h2 id=\"markdown-basics\">Markdown Basics</h2>\n<p>Markdown is a convention for structuring your plain-text documents\nsemantically. The idea is to identify logical structures in your\ndocument (a title, sections, subsections, footnotes, etc.), mark them\nwith some unobtrusive characters, and then &quot;compile&quot; the resulting text\nwith a typesetting interpreter which will format the document\nconsistently, according to a specified style.</p>\n<p>Markdown conventions come in several &quot;flavors&quot; designed for use in\nparticular contexts, such as blogs, wikis, or code repositories. The\nflavor of Markdown used by Pandoc is geared for academic use. Its\nconventions are described on the <a href=\"http://pandoc.org/README.html#pandocs-markdown\">Pandoc&#39;s\nMarkdown</a>\npage. Its conventions include the <a href=\"http://johnmacfarlane.net/pandoc/README.html#yaml-metadata-block\">&quot;YAML&quot;\nblock</a>,\nwhich contains some useful metadata.[^ft-1]</p>\n<p>Let&#39;s now create a simple document in Markdown. Open a plain-text editor\nof your choice and begin typing. It should look like this:</p>\n<pre><code>---\ntitle: Plain Text Workflow\nauthor: Dennis Tenen, Grant Wythoff\ndate: January 20, 2014\nfontfamily: times\n---\n</code></pre>\n<p>Pandoc-flavored Markdown stores each of the above values, and &quot;prints&quot;\nthem in the appropriate location of your outputted document once you are\nready to typeset. We will later learn to add other, more powerful fields\nto the YAML block. For now, let&#39;s pretend we are writing a paper that\ncontains three sections, each subdivided into two subsections. Leave a\nblank line after last three dashes in the YAML block and paste the\nfollowing:</p>\n<pre><code># Section 1\n\n## Subsection 1.1\n\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\nNext paragraph should start like this. Do not indent.\n\n## Subsection 1.2\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque  ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n\n# Section 2\n\n## Subsection 2.1\n</code></pre>\n<p>Go ahead and enter some dummy text as well. Empty space is meaningful in\nMarkdown: do not indent your paragraphs. Instead, separate paragraphs by\nusing an blank line. Blank lines must also precede section headers.</p>\n<p>You can use asterisks to add bold or italicized emphasis to your words,\nlike this: <code>*italics*</code> and <code>**bold**</code>. We should also add a link and a\nfootnote to our text to cover the basic components of an average paper.\nType:</p>\n<pre><code>A sentence that needs a note.[^1]\n\n[^1]: my first footnote! And a [link](https://www.eff.org/).\n</code></pre>\n<p>When the text of the link and the address are the same it is faster to\nwrite <code>&lt;www.eff.org&gt;</code> instead of <code>[www.eff.org](www.eff.org)</code>.</p>\n<p>Let&#39;s save our file before advancing any further. Create a new folder\nthat will house this project. You are likely to have some system of\norganizing your documents, projects, illustrations, and bibliographies.\nBut often, your document, its illustrations, and bibliography live in\ndifferent folders, which makes them hard to track. Our goal is to create\na single folder for each project, with all relevant materials included.\nThe general rule of thumb is one project, one paper, one folder. Name\nyour file something like <code>main.md</code>, where &quot;md&quot; stands for markdown.</p>\n<p>Once your file is saved, let&#39;s add an illustration. Copy an image (any\nsmall image) to your folder, and add the following somewhere in the body\nof the text: <code>![image caption](your_image.jpg)</code>.</p>\n<p>At this point, your <code>main.md</code> should look something like the following.\nYou can download this sample .md file\n<a href=\"https://raw.githubusercontent.com/programminghistorian/jekyll/gh-pages/assets/sample.md\">here</a>.</p>\n<pre><code>---\ntitle: Plain Text Workflow\nauthor: Dennis Tenen, Grant Wythoff\ndate: January 20, 2014\n---\n\n# Section 1\n\n## Subsection 1.1\n\nLorem *ipsum* dolor sit amet, **consectetur** adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n## Subsection 1.2\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque  ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n\nNext paragraph should start like this. Do not indent.\n\n# Section 2\n\n## Subsection 2.1\n\n![image caption](your_image.jpg)\n\n## Subsection 2.2\n\nA sentence that needs a note.[^1]\n\n[^1]: my first footnote! And a [link](https://www.eff.org/)\n</code></pre>\n<p>As we shall do shortly, this plain text file can be rendered as a very\nnice PDF:</p>\n<p>{% include figure.html filename=&quot;Screen-Shot-2014-11-06.png&quot; caption=&quot;Screen shot of PDF rendered by Pandoc&quot; %}</p>\n<p>If you&#39;d like to get an idea of how this kind of markup will be\ninterpreted as HTML formatting, try <a href=\"http://daringfireball.net/projects/markdown/dingus\">this online\nsandbox</a> and play\naround with various kinds of syntax. Remember that certain elements of\n<em>Pandoc</em>-flavored Markdown (such as the title block and footnotes) will\nnot work in this web form, which only accepts the basics.</p>\n<p>At this point, you should spend some time exploring some of other\nfeatures of Markdown like quotations (referenced by <code>&gt;</code> symbol), bullet\nlists which start with <code>*</code> or <code>-</code>, verbatim line breaks which start with\n<code>|</code> (useful for poetry), tables, and a few of the other functions listed\non Pandoc&#39;s markdown page.</p>\n<p>Pay particular attention to empty space and the flow of paragraphs. The\ndocumentation puts it succinctly when it defines a paragraph to be &quot;one\nor more lines of text followed by one or more blank line.&quot; Note that\n&quot;newlines are treated as spaces&quot; and that &quot;if you need a hard line\nbreak, put two or more spaces at the end of a line.&quot; The best way to\nunderstand what that means is to experiment freely. Use your editor&#39;s\npreview mode or just run Pandoc to see the results of your experiments.</p>\n<p>Above all, avoid the urge to format. Remember that you are identifying\n<em>semantic</em> units: sections, subsections, emphasis, footnotes, and\nfigures. Even <code>*italics*</code> and <code>**bold**</code> in Markdown are not really\nformatting marks, but indicate different level of <em>emphasis</em>. The\nformatting will happen later, once you know the venue and the\nrequirements of publication.</p>\n<p>There are programs that allow you to watch a live preview of Markdown\noutput as you edit your plain text file, which we detail below in the\nUseful Resources section. Few of them support footnotes, figures, and\nbibliographies however. To take full advantage of Pandoc, we recommend\nthat you stick with simple, plain text files stored locally, on your\ncomputer.</p>\n<h2 id=\"getting-in-touch-with-your-inner-terminal\">Getting in touch with your inner terminal</h2>\n<p>Before we can start publishing our <code>main.md</code> file into other formats, we\nneed to get oriented with working on the command line using your\ncomputer&#39;s terminal program, which is the only (and best) way to use\nPandoc.</p>\n<p>The command line is a friendly place, once you get used to it. If you\nare already familiar with using the command line, feel free to skip this\nsection. For others, it is important to understand that being able to\nuse your terminal program directly will all you to use a broad range of\npowerful research tools that you couldn&#39;t use otherwise, and can serve\nas a basis for more advanced work. For the purposes of this tutorial,\nyou need to learn only a few, very simple commands.</p>\n<p>First, open a command line window. If you are using macOS, open the Terminal\napplication in the &#39;Applications/Utilities&#39; directory. On Windows, we\nrecommend you use PowerShell or, for a more robust solution, install the\nWindows Subsystem for Linux and use the terminal that comes with your favorite\nLinux distribution. For an excellent introduction to the command line, consult\n&quot;<a href=\"/en/lessons/intro-to-bash\">Introduction to the Bash Command\nLine</a>&quot; by Ian\nMilligan and James Baker.</p>\n<p>In the terminal, you should see a text window and a prompt that looks\nsomething like this: <code>computer-name:~username$</code>. The tilde indicates your\n&quot;home&quot; directory, and in fact you can type <code>$ cd ~</code> at any point to return to\nyour home directory. Don&#39;t type the dollar sign, it just symbolizes the\ncommand prompt of your terminal, prompting you to type something into your\nterminal (as opposed to typing it into your document); remember to hit enter\nafter every command.</p>\n<p>It is very likely that your &quot;Documents&quot; folder is located here. Type\n<code>$ pwd</code> (= print working directory) and press enter to display the name\nof the current directory). Use <code>$ pwd</code> whenever you feel lost.</p>\n<p>The command <code>$ ls</code> (= list), which simply lists the files in the current\ndirectory. Finally, you can use <code>$ cd&gt;</code> (= change directory) like\n<code>$ cd DIRECTORY_NAME</code> (where <code>DIRECTORY_NAME</code> is the name of the\ndirectory you&#39;d like to navigate to). You can use <code>$ cd ..</code> to\nautomatically move up one level in the directory structure (the parent\ndirectory of the directory you are currently in). Once you start typing\nthe directory name, use the Tab key to auto complete the\ntext—particularly useful for long directory names, or directories names\nthat contain spaces.[^6]</p>\n<p>These three terminal commands: <code>pwd</code>, <code>ls</code>, and <code>cd</code> are all you need\nfor this tutorial. Practice them for a few minutes to navigate your\ndocuments folder and think about they way you have organized your files.\nIf you&#39;d like, follow along with your regular graphical file manager to\nkeep your bearings.</p>\n<h2 id=\"using-pandoc-to-convert-markdown-to-an-ms-word-document\">Using Pandoc to convert Markdown to an MS Word document</h2>\n<p>We are now ready to typeset! Open your terminal window, use <code>$ pwd</code> and\n<code>$ cd DIRECTORY-NAME</code> to navigate to the correct folder for your project. Once you are\nthere, type <code>$ ls</code> in the terminal to list the files. If you see your\n.md file and your images, you are in the right place. To convert .md\ninto .docx type:</p>\n<pre><code>$ pandoc main.md -o main.docx\n</code></pre>\n<p>Open the file with MS Word to check your results. Alternatively, if you\nuse Open- or LibreOffice you can run:</p>\n<pre><code>$ pandoc main.md -o project.odt\n</code></pre>\n<p>If you are new to the command line, imagine reading the above command as saying something like:\n&quot;Pandoc, create an MS Word file out of my Markdown file.&quot; The <code>-o</code> part is a &quot;flag,&quot; which in\nthis case says something like &quot;instead of me explicitly telling you the source and the target\nfile formats, just guess by looking at the file extension&quot; or simply &quot;output.&quot; Many options are\navailable through such flags in Pandoc. You can see the complete list on <a href=\"http://johnmacfarlane.net/pandoc/README.html\">Pandoc&#39;s\nwebsite</a> or by typing <code>$ man pandoc</code> in the\nterminal.</p>\n<p>Try running the command</p>\n<pre><code>$ pandoc main.md -o project.html\n</code></pre>\n<p>Now navigate back to your project directory. Can you tell what happened?</p>\n<p>More advanced users who have LaTeX installed may want to experiment by\nconverting Markdown into .tex or specially formatted .pdf files. Once\nLaTeX is installed, a beautifully formatted PDF file can be created\nusing the same command structure:</p>\n<pre><code>$ pandoc main.md -o main.pdf\n</code></pre>\n<p>If your document is written in languages other than English, you will likely need to use\nthe XeLaTeX engine instead of plain LaTeX for .pdf conversion:</p>\n<pre><code>pandoc main.md --pdf-engine=xelatex -o main.pdf\n</code></pre>\n<p>Make sure your text editor supports the UTF-8 encoding. When using XeLaTeX for\nconversion into .pdf, instead of the <code>fontfamily</code> attribute in YAML to change\nfonts, specify the <code>mainfont</code> attribute, to produce something like the\nfollowing:</p>\n<pre><code>    ---\n    title: Plain Text Workflow\n    author: Dennis Tenen, Grant Wythoff\n    date: January 20, 2014\n    mainfont: times\n    ---\n</code></pre>\n<p>[^ft-1]: Note that YAML often replicates some, although not all, of the\n  command line argument (flag) functionality.  For example, font styles could\nbe passed to Pandoc in the form of <code>pandoc main.md --mainfont=times -o target.pdf</code>. However, we prefer to use the YAML header options whenever\npossible, since it makes our command line incantations easier to type and to\nremember. Using a version control tool such as Git will preserve your YAML\nchanges, where what you type in the terminal is rather more ephemeral. Consult\nthe Templates section in the Pandoc manual (<code>man pandoc</code>) for the list of\navailable YAML variables.</p>\n<h2 id=\"working-with-bibliographies\">Working with Bibliographies</h2>\n<p>In this section, we will add a bibliography to our document and then\nconvert from Chicago to MLA formats.</p>\n<p>If you are not using a reference manger like Endnote or Zotero, you\nshould. We prefer Zotero, because, like Pandoc, it was created by the\nacademic community and like other open-source projects it is released\nunder the GNU General Public License. Most importantly for us, your\nreference manager must have the ability to generate bibliographies in\nplain text format, to keep in line with our &quot;everything in plain text&quot;\nprinciple. Go ahead and open a reference manager of your choice and add\nsome sample entries. When you are ready, find the option to export your\nbibliography in BibTeX (.bib) format. Save your .bib file in your\nproject directory, and give it a reasonable title like &quot;project.bib&quot;.</p>\n<p>The general idea is to keep your sources organized under one centralized\nbibliographic database, while generating specific and much smaller .bib\nfiles that will live in the same directory as your project. Go ahead and\nopen your .bib file with the plain-text editor of your choice.[^4]</p>\n<p>Your .bib file should contain multiple entries that look something like\nthis:</p>\n<pre><code>@article{fyfe_digital_2011,\n    title = {Digital Pedagogy Unplugged},\n    volume = {5},\n    url = {http://digitalhumanities.org/dhq/vol/5/3/000106/000106.html},\n    number = {3},\n    urldate = {2013-09-28},\n    author = {Fyfe, Paul},\n    year = {2011},\n    file = {fyfe_digital_pedagogy_unplugged_2011.pdf}\n}\n</code></pre>\n<p>You will rarely have to edit these by hand (although you can). In most\ncases, you will simply &quot;export&quot; the .bib file from Zotero or from a\nsimilar reference manager. Take a moment to orient yourself here. Each\nentry consists of a document type, &quot;article&quot; in our case, a unique\nidentifier (fyfe_digital_2011), and the relevant meta-data on title,\nvolume, author, and so on. The thing we care most about is the unique ID\nwhich immediately follows the curly bracket in the first line of each\nentry. The unique ID is what allows us to connect the bibliography with\nthe main document. Leave this file open for now and go back to your\n<code>main.md</code> file.</p>\n<p>Edit the footnote in the first line of your <code>main.md</code> file to look\nsomething like the following examples, where <code>@name_title_date</code> can be replaced with one of\nthe unique IDs from your <code>project.bib</code> file.</p>\n<ul>\n<li><code>A reference formatted like this will render properly as inline- or footnote- style citation [@name_title_date, 67].</code>[^7]</li>\n<li><code>&quot;For citations within quotes, put the comma outside the quotation mark&quot; [@name_title_2011, 67].</code></li>\n</ul>\n<p>Once we run the markdown through Pandoc, &quot;@fyfe_digital_2011&quot; will be\nexpanded to a full citation in the style of your choice. You can use the\n<code>@citation</code> syntax in any way you see fit: in-line with your text or in\nthe footnotes. To generate a bibliography simply include a section\ncalled <code># Bibliography</code> at the end of document.</p>\n<p>Now, go back to your metadata header at the top of your .md document,\nand specify the bibliography file to be used, like so:</p>\n<pre><code>---\ntitle: Plain Text Workflow\nauthor: Dennis Tenen, Grant Wythoff\ndate: January 20, 2014\nbibliography: project.bib\n---\n</code></pre>\n<p>This tells Pandoc to look for your bibliography in the <code>project.bib</code>\nfile, under the same directory as your <code>main.md</code>. Let&#39;s see if this\nworks. Save your file, switch to the terminal window and run:</p>\n<pre><code>$ pandoc main.md --filter pandoc-citeproc -o main.docx\n</code></pre>\n<p>The &quot;pandoc-citeproc&quot; filter will parse any citation tags found in your document. The result\nshould be a decently formatted MS Word file. If you have LaTeX installed, convert into .pdf\nusing the same syntax for prettier results. Do not worry if things are not exactly the way you\nlike them---remember, you are going to fine-tune the formatting all at once and at later time,\nas close as possible to the time of publication. For now we are just creating drafts based on\nreasonable defaults.</p>\n<h2 id=\"changing-citation-styles\">Changing citation styles</h2>\n<p>The default citation style in Pandoc is Chicago Author-date. We can\nspecify a different style by using stylesheet, written in the &quot;Citation\nStyle Language&quot; (yet another plain-text convention, in this case for\ndescribing citation styles) and denoted by the .csl file extension.\nLuckily, the CSL project maintains a repository of common citation\nstyles, some even tailored for specific journals. Visit\n<a href=\"http://editor.citationstyles.org/about/\">http://editor.citationstyles.org/about/</a> to find the .csl file for\nModern Language Association, download <code>modern-language-association.csl</code>,\nand save to your project directory as <code>mla.csl</code>. Now we need to tell\nPandoc to use the MLA stylesheet instead of the default Chicago. We do\nthis by updating the YAML header:</p>\n<pre><code>---\ntitle: Plain Text Workflow\nauthor: Dennis Tenen, Grant Wythoff\ndate: January 20, 2014\nbibliography: project.bib\ncsl: mla.csl\n---\n</code></pre>\n<p>You then repeat the pandoc incantation to cast your markdown file into your target format (.pdf\nor .docx):</p>\n<pre><code>$ pandoc main.md --filter pandoc-citeproc -o main.pdf\n</code></pre>\n<p>Parse the command into English as you are typing. In my head, I translate the above into\nsomething like: &quot;Pandoc, take the my markdown file, run it through a citation filter, and\noutput a Markdown file.&quot; As you get more familiar with citation stylesheets, consider adding\nyour custom-tailored .csl files for journals in your field to the archive as a service to the\ncommunity.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>You should now be able to write papers in Markdown, to create drafts in\nmultiple formats, to add bibliographies, and to easily change citation\nstyles. A final look at the project directory will reveal a number of\n&quot;source&quot; files: your <code>main.md</code> file, <code>project.bib</code> file, your <code>mla.csl</code>\nfile, and some images. Besides the source files you should see some some\n&quot;target&quot; files that we created during the tutorial: <code>main.docx</code> or\n<code>main.pdf</code>. Your folder should look something like this:</p>\n<pre><code>    Pandoc-tutorial/\n        main.md\n        project.bib\n        mla.csl\n        image.jpg\n        main.docx\n</code></pre>\n<p>Treat you source files as an authoritative version of your text, and you\ntarget files as disposable &quot;print outs&quot; that you can easily generate\nwith Pandoc on the fly. All revisions should go into <code>main.md</code>. The\n<code>main.docx</code> file is there for final-stage clean up and formatting. For\nexample, if the journal requires double-spaced manuscripts, you can\nquickly double-space in Open Office or Microsoft Word. But don&#39;t spend\ntoo much time formatting. Remember, it all gets stripped out when your\nmanuscript goes to print. The time spent on needless formatting can be\nput to better use in polishing the prose of your draft.</p>\n<h2 id=\"useful-resources\">Useful Resources</h2>\n<p>Should you run into trouble, there is no better place to start looking\nfor support than John MacFarlane&#39;s <a href=\"http://johnmacfarlane.net/pandoc/\">Pandoc site</a> and the\naffiliated <a href=\"https://groups.google.com/forum/#!forum/pandoc-discuss\">mailing\nlist</a>. At least\ntwo &quot;Question and Answer&quot; type sites can field questions on Pandoc:\n<a href=\"http://stackoverflow.com/questions/tagged/pandoc\">Stack Overflow</a> and\n<a href=\"http://web.archive.org/web/20190203062832/http://digitalhumanities.org/answers/\">Digital Humanities Q&amp;A</a>.\nQuestions may also be asked live, on Freenode IRC, #Pandoc channel,\nfrequented by a friendly group of regulars. As you learn more about\nPandoc, you can also explore one of its most powerful features: <a href=\"https://github.com/jgm/pandoc/wiki/Pandoc-Filters\">filters</a>.</p>\n<p>Although we suggest starting out with a simple editor, many (70+,\naccording to <a href=\"http://web.archive.org/web/20140120195538/http://mashable.com/2013/06/24/markdown-tools/\">this blog\npost</a>)\nother, Markdown-specific alternatives to MS Word are available online,\nand often free of cost. From the standalone ones, we liked\n<a href=\"http://mouapp.com/\">Mou</a>, <a href=\"http://writemonkey.com\">Write Monkey</a>, and\n<a href=\"http://www.sublimetext.com/\">Sublime Text</a>. Several web-based platforms\nhave recently emerged that provide slick, graphic interfaces for\ncollaborative writing and version tracking using Markdown. These\ninclude: <a href=\"http://prose.io\">prose.io</a>,\n<a href=\"http://www.authorea.com\">Authorea</a>,\n<a href=\"http://www.draftin.com\">Draft</a>, and\n<a href=\"https://stackedit.io\">StackEdit</a>.</p>\n<p>But the ecosystem is not limited to editors. <a href=\"http://gitit.net/\">Gitit</a>\nand <a href=\"https://github.com/dubiousjim/pandoc-iki\">Ikiwiki</a> support\nauthoring in Markdown with Pandoc as parser. To this list we may a range\nof tools that generate fast, static webpages,\n<a href=\"https://github.com/jgm/yst\">Yst</a>,\n<a href=\"http://github.com/fauno/jekyll-pandoc-multiple-formats\">Jekyll</a>,\n<a href=\"http://jaspervdj.be/hakyll/\">Hakyll</a>, and <a href=\"https://github.com/wcaleb/website\">bash shell\nscript</a> by the historian Caleb\nMcDaniel.</p>\n<p>Finally, whole publishing platforms are forming around the use of\nMarkdown. Markdown to marketplace platform\n<a href=\"https://leanpub.com\">Leanpub</a> could be an interesting alternative to\nthe traditional publishing model. And we ourselves are experimenting\nwith academic journal design based on GitHub and\n<a href=\"http://readthedocs.org\">readthedocs.org</a> (tools usually used for technical\ndocumentation).</p>\n<p>[^1]: Don&#39;t worry if you don&#39;t understand some of of this terminology yet!</p>\n<p>[^2]: The source files for this document can be <a href=\"https://github.com/dhcolumbia/pandoc-workflow\">downloaded from GitHub</a>. Use the &quot;raw&quot; option when viewing in GitHub to see the source Markdown. The authors would like to thank Alex Gil and his colleagues from Columbia&#39;s Digital Humanities Center, and the participants of openLab at the Studio in the Butler library for testing the code in this tutorial on a variety of platforms.</p>\n<p>[^3]: See Charlie Stross&#39;s excellent discussion of this topic in <a href=\"http://www.antipope.org/charlie/blog-static/2013/10/why-microsoft-word-must-die.html\">Why Microsoft Word Must Die</a>.</p>\n<p>[^4]: Note that the .bib extension may be &quot;registered&quot; to Zotero in your operating system. That means when you click on a .bib file it is likely that Zotero will be called to open it, whereas we want to open it within a text editor. Eventually, you may want to associate the .bib extension with your text editor.</p>\n<p>[^5]: There are no good solutions for directly arriving at MS Word from LaTeX.</p>\n<p>[^6]: It is a good idea to get into the habit of not using spaces in folder or file names. Dashes or underscores instead of spaces in your filenames ensure lasting cross-platform compatibility.</p>\n<p>[^7]: Thanks to <a href=\"https://github.com/njbart\">@njbart</a> for the correction. In response to our original suggestion, <code>Some sentence that needs citation.^[@fyfe_digital_2011 argues that too.]</code> <a href=\"https://github.com/programminghistorian/jekyll/issues/46#issuecomment-59219906\">he writes</a>: &quot;This is not recommended since it keeps you from switching easily between footnote and author-date styles. Better use the [corrected] (no circumflex, no final period inside the square braces, and the final punctuation of the text sentence after the square braces; with footnote styles, pandoc automatically adjusts the position of the final punctuation).&quot;</p>\n"}